
i2c_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005200  08005200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08005210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00012dfc  200001dc  080053ec  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20012fd8  080053ec  00022fd8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001352f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002490  00000000  00000000  0003373b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c567  00000000  00000000  00035bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f90  00000000  00000000  00042138  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f78  00000000  00000000  000430c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000229b5  00000000  00000000  00044040  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bc1b  00000000  00000000  000669f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d2204  00000000  00000000  00072610  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00144814  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000036d0  00000000  00000000  00144890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004c80 	.word	0x08004c80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08004c80 	.word	0x08004c80

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b510      	push	{r4, lr}
 80005b2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_InitTick+0x40>)
 80005b6:	7818      	ldrb	r0, [r3, #0]
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <HAL_InitTick+0x44>)
 80005c2:	6810      	ldr	r0, [r2, #0]
 80005c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005c8:	f000 f8aa 	bl	8000720 <HAL_SYSTICK_Config>
 80005cc:	b968      	cbnz	r0, 80005ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ce:	2c0f      	cmp	r4, #15
 80005d0:	d901      	bls.n	80005d6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80005d2:	2001      	movs	r0, #1
 80005d4:	e00a      	b.n	80005ec <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d6:	2200      	movs	r2, #0
 80005d8:	4621      	mov	r1, r4
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	f000 f85d 	bl	800069c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e2:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_InitTick+0x40>)
 80005e4:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 80005e6:	2000      	movs	r0, #0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005ea:	2001      	movs	r0, #1
}
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000008 	.word	0x20000008

080005f8 <HAL_Init>:
{
 80005f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <HAL_Init+0x30>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000602:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800060a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000612:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f82f 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ffc8 	bl	80005b0 <HAL_InitTick>
  HAL_MspInit();
 8000620:	f002 feae 	bl	8003380 <HAL_MspInit>
}
 8000624:	2000      	movs	r0, #0
 8000626:	bd08      	pop	{r3, pc}
 8000628:	40023c00 	.word	0x40023c00

0800062c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x10>)
 800062e:	6811      	ldr	r1, [r2, #0]
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_IncTick+0x14>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	440b      	add	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000208 	.word	0x20000208
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <HAL_GetTick+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000208 	.word	0x20000208

08000650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff fff6 	bl	8000644 <HAL_GetTick>
 8000658:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800065e:	d002      	beq.n	8000666 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_Delay+0x24>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000666:	f7ff ffed 	bl	8000644 <HAL_GetTick>
 800066a:	1b40      	subs	r0, r0, r5
 800066c:	42a0      	cmp	r0, r4
 800066e:	d3fa      	bcc.n	8000666 <HAL_Delay+0x16>
  {
  }
}
 8000670:	bd38      	pop	{r3, r4, r5, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	0200      	lsls	r0, r0, #8
 8000686:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800068c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000690:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000694:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800069c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c3 0407 	rsb	r4, r3, #7
 80006aa:	2c04      	cmp	r4, #4
 80006ac:	bf28      	it	cs
 80006ae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b0:	1d1d      	adds	r5, r3, #4
 80006b2:	2d06      	cmp	r5, #6
 80006b4:	d918      	bls.n	80006e8 <HAL_NVIC_SetPriority+0x4c>
 80006b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 35ff 	mov.w	r5, #4294967295
 80006bc:	fa05 f404 	lsl.w	r4, r5, r4
 80006c0:	ea21 0104 	bic.w	r1, r1, r4
 80006c4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c6:	fa05 f303 	lsl.w	r3, r5, r3
 80006ca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80006d0:	2800      	cmp	r0, #0
 80006d2:	db0b      	blt.n	80006ec <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d4:	0109      	lsls	r1, r1, #4
 80006d6:	b2c9      	uxtb	r1, r1
 80006d8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006e0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006e4:	bc30      	pop	{r4, r5}
 80006e6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e8:	2300      	movs	r3, #0
 80006ea:	e7e5      	b.n	80006b8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	f000 000f 	and.w	r0, r0, #15
 80006f0:	0109      	lsls	r1, r1, #4
 80006f2:	b2c9      	uxtb	r1, r1
 80006f4:	4b02      	ldr	r3, [pc, #8]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
 80006f6:	5419      	strb	r1, [r3, r0]
 80006f8:	e7f4      	b.n	80006e4 <HAL_NVIC_SetPriority+0x48>
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000704:	2800      	cmp	r0, #0
 8000706:	db07      	blt.n	8000718 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000708:	f000 021f 	and.w	r2, r0, #31
 800070c:	0940      	lsrs	r0, r0, #5
 800070e:	2301      	movs	r3, #1
 8000710:	4093      	lsls	r3, r2
 8000712:	4a02      	ldr	r2, [pc, #8]	; (800071c <HAL_NVIC_EnableIRQ+0x18>)
 8000714:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e100 	.word	0xe000e100

08000720 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	3801      	subs	r0, #1
 8000722:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000726:	d20a      	bcs.n	800073e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_SYSTICK_Config+0x24>)
 800072a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_SYSTICK_Config+0x28>)
 800072e:	21f0      	movs	r1, #240	; 0xf0
 8000730:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
 8000736:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800074c:	6802      	ldr	r2, [r0, #0]
 800074e:	b2d3      	uxtb	r3, r2
 8000750:	3b10      	subs	r3, #16
 8000752:	490b      	ldr	r1, [pc, #44]	; (8000780 <DMA_CalcBaseAndBitshift+0x34>)
 8000754:	fba1 1303 	umull	r1, r3, r1, r3
 8000758:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800075a:	490a      	ldr	r1, [pc, #40]	; (8000784 <DMA_CalcBaseAndBitshift+0x38>)
 800075c:	5cc9      	ldrb	r1, [r1, r3]
 800075e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000760:	2b03      	cmp	r3, #3
 8000762:	d806      	bhi.n	8000772 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000764:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8000768:	f022 0203 	bic.w	r2, r2, #3
 800076c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800076e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000770:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000772:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8000776:	f022 0203 	bic.w	r2, r2, #3
 800077a:	3204      	adds	r2, #4
 800077c:	6582      	str	r2, [r0, #88]	; 0x58
 800077e:	e7f6      	b.n	800076e <DMA_CalcBaseAndBitshift+0x22>
 8000780:	aaaaaaab 	.word	0xaaaaaaab
 8000784:	08004c98 	.word	0x08004c98

08000788 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000788:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800078a:	6982      	ldr	r2, [r0, #24]
 800078c:	b992      	cbnz	r2, 80007b4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800078e:	2b01      	cmp	r3, #1
 8000790:	d00a      	beq.n	80007a8 <DMA_CheckFifoParam+0x20>
 8000792:	b11b      	cbz	r3, 800079c <DMA_CheckFifoParam+0x14>
 8000794:	2b02      	cmp	r3, #2
 8000796:	d001      	beq.n	800079c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000798:	2000      	movs	r0, #0
 800079a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800079c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800079e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007a2:	d12c      	bne.n	80007fe <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80007a4:	2000      	movs	r0, #0
 80007a6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80007ae:	d028      	beq.n	8000802 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80007b0:	2000      	movs	r0, #0
 80007b2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80007b4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80007b8:	d005      	beq.n	80007c6 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d929      	bls.n	8000812 <DMA_CheckFifoParam+0x8a>
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d015      	beq.n	80007ee <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80007c2:	2000      	movs	r0, #0
 80007c4:	4770      	bx	lr
    switch (tmp)
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d803      	bhi.n	80007d2 <DMA_CheckFifoParam+0x4a>
 80007ca:	e8df f003 	tbb	[pc, r3]
 80007ce:	041c      	.short	0x041c
 80007d0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80007d2:	2000      	movs	r0, #0
 80007d4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007dc:	d115      	bne.n	800080a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80007de:	2000      	movs	r0, #0
 80007e0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80007e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80007e8:	d011      	beq.n	800080e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80007ea:	2000      	movs	r0, #0
 80007ec:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80007ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80007f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80007f4:	d001      	beq.n	80007fa <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80007f6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80007f8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80007fa:	2000      	movs	r0, #0
 80007fc:	4770      	bx	lr
        status = HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
 8000800:	4770      	bx	lr
        status = HAL_ERROR;
 8000802:	2001      	movs	r0, #1
 8000804:	4770      	bx	lr
      status = HAL_ERROR;
 8000806:	2001      	movs	r0, #1
 8000808:	4770      	bx	lr
        status = HAL_ERROR;
 800080a:	2001      	movs	r0, #1
 800080c:	4770      	bx	lr
        status = HAL_ERROR;
 800080e:	2001      	movs	r0, #1
 8000810:	4770      	bx	lr
      status = HAL_ERROR;
 8000812:	2001      	movs	r0, #1
 8000814:	4770      	bx	lr
	...

08000818 <HAL_DMA_Init>:
{
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800081c:	f7ff ff12 	bl	8000644 <HAL_GetTick>
  if(hdma == NULL)
 8000820:	2c00      	cmp	r4, #0
 8000822:	d05b      	beq.n	80008dc <HAL_DMA_Init+0xc4>
 8000824:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000826:	2300      	movs	r3, #0
 8000828:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800082c:	2302      	movs	r3, #2
 800082e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000832:	6822      	ldr	r2, [r4, #0]
 8000834:	6813      	ldr	r3, [r2, #0]
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	f012 0f01 	tst.w	r2, #1
 8000844:	d00a      	beq.n	800085c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000846:	f7ff fefd 	bl	8000644 <HAL_GetTick>
 800084a:	1b40      	subs	r0, r0, r5
 800084c:	2805      	cmp	r0, #5
 800084e:	d9f5      	bls.n	800083c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000850:	2320      	movs	r3, #32
 8000852:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000854:	2003      	movs	r0, #3
 8000856:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800085a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800085c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800085e:	4820      	ldr	r0, [pc, #128]	; (80008e0 <HAL_DMA_Init+0xc8>)
 8000860:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000862:	6861      	ldr	r1, [r4, #4]
 8000864:	68a2      	ldr	r2, [r4, #8]
 8000866:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000868:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800086a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800086c:	6921      	ldr	r1, [r4, #16]
 800086e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000870:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000872:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000874:	69a1      	ldr	r1, [r4, #24]
 8000876:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000878:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800087a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800087c:	6a21      	ldr	r1, [r4, #32]
 800087e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000880:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000882:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000884:	2904      	cmp	r1, #4
 8000886:	d01e      	beq.n	80008c6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000888:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800088a:	6826      	ldr	r6, [r4, #0]
 800088c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800088e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000894:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000896:	2b04      	cmp	r3, #4
 8000898:	d107      	bne.n	80008aa <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800089a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800089c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800089e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008a0:	b11b      	cbz	r3, 80008aa <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008a2:	4620      	mov	r0, r4
 80008a4:	f7ff ff70 	bl	8000788 <DMA_CheckFifoParam>
 80008a8:	b990      	cbnz	r0, 80008d0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80008aa:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008ac:	4620      	mov	r0, r4
 80008ae:	f7ff ff4d 	bl	800074c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008b4:	233f      	movs	r3, #63	; 0x3f
 80008b6:	4093      	lsls	r3, r2
 80008b8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008ba:	2000      	movs	r0, #0
 80008bc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80008be:	2301      	movs	r3, #1
 80008c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80008c4:	e7c9      	b.n	800085a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80008ca:	4301      	orrs	r1, r0
 80008cc:	430a      	orrs	r2, r1
 80008ce:	e7db      	b.n	8000888 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80008d4:	2001      	movs	r0, #1
 80008d6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80008da:	e7be      	b.n	800085a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80008dc:	2001      	movs	r0, #1
 80008de:	e7bc      	b.n	800085a <HAL_DMA_Init+0x42>
 80008e0:	f010803f 	.word	0xf010803f

080008e4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d003      	beq.n	80008f6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80008f2:	2001      	movs	r0, #1
 80008f4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80008f6:	2305      	movs	r3, #5
 80008f8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80008fc:	6802      	ldr	r2, [r0, #0]
 80008fe:	6813      	ldr	r3, [r2, #0]
 8000900:	f023 0301 	bic.w	r3, r3, #1
 8000904:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000906:	2000      	movs	r0, #0
}
 8000908:	4770      	bx	lr
	...

0800090c <HAL_DMA_IRQHandler>:
{
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000912:	2300      	movs	r3, #0
 8000914:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000916:	4b72      	ldr	r3, [pc, #456]	; (8000ae0 <HAL_DMA_IRQHandler+0x1d4>)
 8000918:	681d      	ldr	r5, [r3, #0]
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <HAL_DMA_IRQHandler+0x1d8>)
 800091c:	fba3 3505 	umull	r3, r5, r3, r5
 8000920:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000922:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000924:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000926:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000928:	2308      	movs	r3, #8
 800092a:	4093      	lsls	r3, r2
 800092c:	4233      	tst	r3, r6
 800092e:	d010      	beq.n	8000952 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000930:	6803      	ldr	r3, [r0, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f012 0f04 	tst.w	r2, #4
 8000938:	d00b      	beq.n	8000952 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	f022 0204 	bic.w	r2, r2, #4
 8000940:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000942:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000944:	2308      	movs	r3, #8
 8000946:	4093      	lsls	r3, r2
 8000948:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800094a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000952:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000954:	2301      	movs	r3, #1
 8000956:	4093      	lsls	r3, r2
 8000958:	4233      	tst	r3, r6
 800095a:	d009      	beq.n	8000970 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800095c:	6822      	ldr	r2, [r4, #0]
 800095e:	6952      	ldr	r2, [r2, #20]
 8000960:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000964:	d004      	beq.n	8000970 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000966:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000968:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000970:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000972:	2304      	movs	r3, #4
 8000974:	4093      	lsls	r3, r2
 8000976:	4233      	tst	r3, r6
 8000978:	d009      	beq.n	800098e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800097a:	6822      	ldr	r2, [r4, #0]
 800097c:	6812      	ldr	r2, [r2, #0]
 800097e:	f012 0f02 	tst.w	r2, #2
 8000982:	d004      	beq.n	800098e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000984:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000986:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800098e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000990:	2310      	movs	r3, #16
 8000992:	4093      	lsls	r3, r2
 8000994:	4233      	tst	r3, r6
 8000996:	d024      	beq.n	80009e2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	6812      	ldr	r2, [r2, #0]
 800099c:	f012 0f08 	tst.w	r2, #8
 80009a0:	d01f      	beq.n	80009e2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009a2:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80009ac:	d00d      	beq.n	80009ca <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80009b4:	d104      	bne.n	80009c0 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80009b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b8:	b19b      	cbz	r3, 80009e2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80009ba:	4620      	mov	r0, r4
 80009bc:	4798      	blx	r3
 80009be:	e010      	b.n	80009e2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80009c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80009c2:	b173      	cbz	r3, 80009e2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80009c4:	4620      	mov	r0, r4
 80009c6:	4798      	blx	r3
 80009c8:	e00b      	b.n	80009e2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80009d0:	d103      	bne.n	80009da <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	f022 0208 	bic.w	r2, r2, #8
 80009d8:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80009da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009dc:	b10b      	cbz	r3, 80009e2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80009de:	4620      	mov	r0, r4
 80009e0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80009e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009e4:	2320      	movs	r3, #32
 80009e6:	4093      	lsls	r3, r2
 80009e8:	4233      	tst	r3, r6
 80009ea:	d055      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80009ec:	6822      	ldr	r2, [r4, #0]
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	f012 0f10 	tst.w	r2, #16
 80009f4:	d050      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009f6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009f8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b05      	cmp	r3, #5
 8000a00:	d00e      	beq.n	8000a20 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a02:	6823      	ldr	r3, [r4, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000a0a:	d033      	beq.n	8000a74 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000a12:	d12a      	bne.n	8000a6a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d03e      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	4798      	blx	r3
 8000a1e:	e03b      	b.n	8000a98 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a20:	6822      	ldr	r2, [r4, #0]
 8000a22:	6813      	ldr	r3, [r2, #0]
 8000a24:	f023 0316 	bic.w	r3, r3, #22
 8000a28:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000a2a:	6822      	ldr	r2, [r4, #0]
 8000a2c:	6953      	ldr	r3, [r2, #20]
 8000a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a32:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a36:	b1a3      	cbz	r3, 8000a62 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a38:	6822      	ldr	r2, [r4, #0]
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	f023 0308 	bic.w	r3, r3, #8
 8000a40:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000a44:	233f      	movs	r3, #63	; 0x3f
 8000a46:	4093      	lsls	r3, r2
 8000a48:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000a56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d03f      	beq.n	8000adc <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	4798      	blx	r3
 8000a60:	e03c      	b.n	8000adc <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a62:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1e7      	bne.n	8000a38 <HAL_DMA_IRQHandler+0x12c>
 8000a68:	e7eb      	b.n	8000a42 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000a6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a6c:	b1a3      	cbz	r3, 8000a98 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000a6e:	4620      	mov	r0, r4
 8000a70:	4798      	blx	r3
 8000a72:	e011      	b.n	8000a98 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000a7a:	d109      	bne.n	8000a90 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	f022 0210 	bic.w	r2, r2, #16
 8000a82:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000a84:	2300      	movs	r3, #0
 8000a86:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000a90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a92:	b10b      	cbz	r3, 8000a98 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000a94:	4620      	mov	r0, r4
 8000a96:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000a98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a9a:	b1fb      	cbz	r3, 8000adc <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000a9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a9e:	f013 0f01 	tst.w	r3, #1
 8000aa2:	d017      	beq.n	8000ad4 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	6813      	ldr	r3, [r2, #0]
 8000aae:	f023 0301 	bic.w	r3, r3, #1
 8000ab2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000ab4:	9b01      	ldr	r3, [sp, #4]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	9301      	str	r3, [sp, #4]
 8000aba:	42ab      	cmp	r3, r5
 8000abc:	d804      	bhi.n	8000ac8 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f013 0f01 	tst.w	r3, #1
 8000ac6:	d1f5      	bne.n	8000ab4 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000ad4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ad6:	b10b      	cbz	r3, 8000adc <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000ad8:	4620      	mov	r0, r4
 8000ada:	4798      	blx	r3
}
 8000adc:	b003      	add	sp, #12
 8000ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	1b4e81b5 	.word	0x1b4e81b5

08000ae8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f200 80d1 	bhi.w	8000c92 <HAL_GPIO_Init+0x1aa>
{
 8000af0:	b4f0      	push	{r4, r5, r6, r7}
 8000af2:	b082      	sub	sp, #8
 8000af4:	e039      	b.n	8000b6a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af6:	2206      	movs	r2, #6
 8000af8:	e000      	b.n	8000afc <HAL_GPIO_Init+0x14>
 8000afa:	2200      	movs	r2, #0
 8000afc:	40b2      	lsls	r2, r6
 8000afe:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b00:	3402      	adds	r4, #2
 8000b02:	4e64      	ldr	r6, [pc, #400]	; (8000c94 <HAL_GPIO_Init+0x1ac>)
 8000b04:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b08:	4a63      	ldr	r2, [pc, #396]	; (8000c98 <HAL_GPIO_Init+0x1b0>)
 8000b0a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b0c:	43ea      	mvns	r2, r5
 8000b0e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	684f      	ldr	r7, [r1, #4]
 8000b14:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000b18:	d001      	beq.n	8000b1e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000b1a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000b1e:	4c5e      	ldr	r4, [pc, #376]	; (8000c98 <HAL_GPIO_Init+0x1b0>)
 8000b20:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000b22:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b24:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b28:	684f      	ldr	r7, [r1, #4]
 8000b2a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000b2e:	d001      	beq.n	8000b34 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000b30:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000b34:	4c58      	ldr	r4, [pc, #352]	; (8000c98 <HAL_GPIO_Init+0x1b0>)
 8000b36:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b38:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b3a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3e:	684f      	ldr	r7, [r1, #4]
 8000b40:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b44:	d001      	beq.n	8000b4a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000b46:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000b4a:	4c53      	ldr	r4, [pc, #332]	; (8000c98 <HAL_GPIO_Init+0x1b0>)
 8000b4c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000b4e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b50:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b52:	684e      	ldr	r6, [r1, #4]
 8000b54:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b58:	d001      	beq.n	8000b5e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000b5a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000b5e:	4c4e      	ldr	r4, [pc, #312]	; (8000c98 <HAL_GPIO_Init+0x1b0>)
 8000b60:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b62:	3301      	adds	r3, #1
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	f200 8091 	bhi.w	8000c8c <HAL_GPIO_Init+0x1a4>
    ioposition = 0x01U << position;
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	680c      	ldr	r4, [r1, #0]
 8000b70:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000b74:	42aa      	cmp	r2, r5
 8000b76:	d1f4      	bne.n	8000b62 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b78:	684c      	ldr	r4, [r1, #4]
 8000b7a:	2c02      	cmp	r4, #2
 8000b7c:	d001      	beq.n	8000b82 <HAL_GPIO_Init+0x9a>
 8000b7e:	2c12      	cmp	r4, #18
 8000b80:	d110      	bne.n	8000ba4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8000b82:	08de      	lsrs	r6, r3, #3
 8000b84:	3608      	adds	r6, #8
 8000b86:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b8a:	f003 0407 	and.w	r4, r3, #7
 8000b8e:	00a7      	lsls	r7, r4, #2
 8000b90:	240f      	movs	r4, #15
 8000b92:	40bc      	lsls	r4, r7
 8000b94:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b98:	690c      	ldr	r4, [r1, #16]
 8000b9a:	40bc      	lsls	r4, r7
 8000b9c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000ba0:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000ba4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ba6:	005f      	lsls	r7, r3, #1
 8000ba8:	2603      	movs	r6, #3
 8000baa:	40be      	lsls	r6, r7
 8000bac:	43f6      	mvns	r6, r6
 8000bae:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb2:	684c      	ldr	r4, [r1, #4]
 8000bb4:	f004 0403 	and.w	r4, r4, #3
 8000bb8:	40bc      	lsls	r4, r7
 8000bba:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000bbe:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc0:	684c      	ldr	r4, [r1, #4]
 8000bc2:	f104 3cff 	add.w	ip, r4, #4294967295
 8000bc6:	f1bc 0f01 	cmp.w	ip, #1
 8000bca:	d903      	bls.n	8000bd4 <HAL_GPIO_Init+0xec>
 8000bcc:	2c11      	cmp	r4, #17
 8000bce:	d001      	beq.n	8000bd4 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd0:	2c12      	cmp	r4, #18
 8000bd2:	d110      	bne.n	8000bf6 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8000bd4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd6:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bda:	68cc      	ldr	r4, [r1, #12]
 8000bdc:	40bc      	lsls	r4, r7
 8000bde:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000be2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000be4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bea:	684c      	ldr	r4, [r1, #4]
 8000bec:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000bf0:	409c      	lsls	r4, r3
 8000bf2:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000bf4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bf6:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bf8:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfa:	688a      	ldr	r2, [r1, #8]
 8000bfc:	40ba      	lsls	r2, r7
 8000bfe:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000c00:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	684a      	ldr	r2, [r1, #4]
 8000c04:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000c08:	d0ab      	beq.n	8000b62 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	9201      	str	r2, [sp, #4]
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <HAL_GPIO_Init+0x1b4>)
 8000c10:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000c12:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000c16:	6454      	str	r4, [r2, #68]	; 0x44
 8000c18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000c1a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c1e:	9201      	str	r2, [sp, #4]
 8000c20:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c22:	089c      	lsrs	r4, r3, #2
 8000c24:	1ca6      	adds	r6, r4, #2
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <HAL_GPIO_Init+0x1ac>)
 8000c28:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c2c:	f003 0203 	and.w	r2, r3, #3
 8000c30:	0096      	lsls	r6, r2, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	40b2      	lsls	r2, r6
 8000c36:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_GPIO_Init+0x1b8>)
 8000c3c:	4290      	cmp	r0, r2
 8000c3e:	f43f af5c 	beq.w	8000afa <HAL_GPIO_Init+0x12>
 8000c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c46:	4290      	cmp	r0, r2
 8000c48:	d016      	beq.n	8000c78 <HAL_GPIO_Init+0x190>
 8000c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	d014      	beq.n	8000c7c <HAL_GPIO_Init+0x194>
 8000c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c56:	4290      	cmp	r0, r2
 8000c58:	d012      	beq.n	8000c80 <HAL_GPIO_Init+0x198>
 8000c5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c5e:	4290      	cmp	r0, r2
 8000c60:	d010      	beq.n	8000c84 <HAL_GPIO_Init+0x19c>
 8000c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c66:	4290      	cmp	r0, r2
 8000c68:	d00e      	beq.n	8000c88 <HAL_GPIO_Init+0x1a0>
 8000c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	f43f af41 	beq.w	8000af6 <HAL_GPIO_Init+0xe>
 8000c74:	2207      	movs	r2, #7
 8000c76:	e741      	b.n	8000afc <HAL_GPIO_Init+0x14>
 8000c78:	2201      	movs	r2, #1
 8000c7a:	e73f      	b.n	8000afc <HAL_GPIO_Init+0x14>
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	e73d      	b.n	8000afc <HAL_GPIO_Init+0x14>
 8000c80:	2203      	movs	r2, #3
 8000c82:	e73b      	b.n	8000afc <HAL_GPIO_Init+0x14>
 8000c84:	2204      	movs	r2, #4
 8000c86:	e739      	b.n	8000afc <HAL_GPIO_Init+0x14>
 8000c88:	2205      	movs	r2, #5
 8000c8a:	e737      	b.n	8000afc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c90:	4770      	bx	lr
 8000c92:	4770      	bx	lr
 8000c94:	40013800 	.word	0x40013800
 8000c98:	40013c00 	.word	0x40013c00
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ca4:	6903      	ldr	r3, [r0, #16]
 8000ca6:	4219      	tst	r1, r3
 8000ca8:	d101      	bne.n	8000cae <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000caa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000cac:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb2:	b912      	cbnz	r2, 8000cba <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cb4:	0409      	lsls	r1, r1, #16
 8000cb6:	6181      	str	r1, [r0, #24]
  }
}
 8000cb8:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000cba:	6181      	str	r1, [r0, #24]
 8000cbc:	4770      	bx	lr

08000cbe <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000cbe:	6943      	ldr	r3, [r0, #20]
 8000cc0:	ea31 0303 	bics.w	r3, r1, r3
 8000cc4:	d001      	beq.n	8000cca <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cc6:	6181      	str	r1, [r0, #24]
  }
}
 8000cc8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cca:	0409      	lsls	r1, r1, #16
 8000ccc:	6181      	str	r1, [r0, #24]
 8000cce:	4770      	bx	lr

08000cd0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cd0:	6803      	ldr	r3, [r0, #0]
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000cd8:	d011      	beq.n	8000cfe <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000cde:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000cf0:	f042 0204 	orr.w	r2, r2, #4
 8000cf4:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cf6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	4770      	bx	lr
  }
  return HAL_OK;
 8000cfe:	2000      	movs	r0, #0
}
 8000d00:	4770      	bx	lr

08000d02 <I2C_WaitOnFlagUntilTimeout>:
{
 8000d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d04:	4606      	mov	r6, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	4617      	mov	r7, r2
 8000d0a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d0c:	e022      	b.n	8000d54 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d0e:	f7ff fc99 	bl	8000644 <HAL_GetTick>
 8000d12:	9b06      	ldr	r3, [sp, #24]
 8000d14:	1ac0      	subs	r0, r0, r3
 8000d16:	42a8      	cmp	r0, r5
 8000d18:	d800      	bhi.n	8000d1c <I2C_WaitOnFlagUntilTimeout+0x1a>
 8000d1a:	b9dd      	cbnz	r5, 8000d54 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d20:	2220      	movs	r2, #32
 8000d22:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d26:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d2a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000d2c:	f042 0220 	orr.w	r2, r2, #32
 8000d30:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d32:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8000d36:	2001      	movs	r0, #1
 8000d38:	e01a      	b.n	8000d70 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d3a:	6833      	ldr	r3, [r6, #0]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	ea24 0303 	bic.w	r3, r4, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	095b      	lsrs	r3, r3, #5
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d10f      	bne.n	8000d6e <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8000d4e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000d52:	d1dc      	bne.n	8000d0e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000d54:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d0ee      	beq.n	8000d3a <I2C_WaitOnFlagUntilTimeout+0x38>
 8000d5c:	6833      	ldr	r3, [r6, #0]
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	ea24 0303 	bic.w	r3, r4, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	e7ed      	b.n	8000d4a <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8000d6e:	2000      	movs	r0, #0
}
 8000d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d74:	4604      	mov	r4, r0
 8000d76:	460d      	mov	r5, r1
 8000d78:	4616      	mov	r6, r2
 8000d7a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d7c:	e03c      	b.n	8000df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d84:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d8c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d92:	2220      	movs	r2, #32
 8000d94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000d9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d9e:	f042 0204 	orr.w	r2, r2, #4
 8000da2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000da4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000da8:	2001      	movs	r0, #1
 8000daa:	e033      	b.n	8000e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dac:	f7ff fc4a 	bl	8000644 <HAL_GetTick>
 8000db0:	1bc0      	subs	r0, r0, r7
 8000db2:	42b0      	cmp	r0, r6
 8000db4:	d800      	bhi.n	8000db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8000db6:	b9fe      	cbnz	r6, 8000df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dc2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000dc8:	f042 0220 	orr.w	r2, r2, #32
 8000dcc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000dce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	e01e      	b.n	8000e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	ea25 0303 	bic.w	r3, r5, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	3300      	adds	r3, #0
 8000de2:	bf18      	it	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	b1a3      	cbz	r3, 8000e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	695a      	ldr	r2, [r3, #20]
 8000dec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000df0:	d1c5      	bne.n	8000d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8000df2:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000df6:	d1d9      	bne.n	8000dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000df8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d0ea      	beq.n	8000dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	ea25 0303 	bic.w	r3, r5, r3
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	3300      	adds	r3, #0
 8000e0c:	bf18      	it	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	e7e9      	b.n	8000de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8000e12:	2000      	movs	r0, #0
}
 8000e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e16 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000e16:	b570      	push	{r4, r5, r6, lr}
 8000e18:	4604      	mov	r4, r0
 8000e1a:	460d      	mov	r5, r1
 8000e1c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e26:	d11c      	bne.n	8000e62 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff ff51 	bl	8000cd0 <I2C_IsAcknowledgeFailed>
 8000e2e:	b9d0      	cbnz	r0, 8000e66 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000e30:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000e34:	d0f3      	beq.n	8000e1e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e36:	f7ff fc05 	bl	8000644 <HAL_GetTick>
 8000e3a:	1b80      	subs	r0, r0, r6
 8000e3c:	42a8      	cmp	r0, r5
 8000e3e:	d801      	bhi.n	8000e44 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000e40:	2d00      	cmp	r5, #0
 8000e42:	d1ec      	bne.n	8000e1e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e48:	2220      	movs	r2, #32
 8000e4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e54:	f042 0220 	orr.w	r2, r2, #32
 8000e58:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000e5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000e5e:	2001      	movs	r0, #1
 8000e60:	e000      	b.n	8000e64 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000e62:	2000      	movs	r0, #0
}
 8000e64:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000e66:	2001      	movs	r0, #1
 8000e68:	e7fc      	b.n	8000e64 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08000e6c <I2C_RequestMemoryWrite>:
{
 8000e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	4604      	mov	r4, r0
 8000e74:	4688      	mov	r8, r1
 8000e76:	4616      	mov	r6, r2
 8000e78:	461f      	mov	r7, r3
 8000e7a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e7c:	6802      	ldr	r2, [r0, #0]
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e86:	9500      	str	r5, [sp, #0]
 8000e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e90:	f7ff ff37 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 8000e94:	b120      	cbz	r0, 8000ea0 <I2C_RequestMemoryWrite+0x34>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	b004      	add	sp, #16
 8000e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ea0:	6822      	ldr	r2, [r4, #0]
 8000ea2:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8000ea6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000eac:	4920      	ldr	r1, [pc, #128]	; (8000f30 <I2C_RequestMemoryWrite+0xc4>)
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f7ff ff5f 	bl	8000d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000eb4:	b108      	cbz	r0, 8000eba <I2C_RequestMemoryWrite+0x4e>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e7ee      	b.n	8000e98 <I2C_RequestMemoryWrite+0x2c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9303      	str	r3, [sp, #12]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	9203      	str	r2, [sp, #12]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	9303      	str	r3, [sp, #12]
 8000ec8:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eca:	462a      	mov	r2, r5
 8000ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ffa1 	bl	8000e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b158      	cbz	r0, 8000ef0 <I2C_RequestMemoryWrite+0x84>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d001      	beq.n	8000ee2 <I2C_RequestMemoryWrite+0x76>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e7da      	b.n	8000e98 <I2C_RequestMemoryWrite+0x2c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e7d3      	b.n	8000e98 <I2C_RequestMemoryWrite+0x2c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ef0:	2f01      	cmp	r7, #1
 8000ef2:	d00e      	beq.n	8000f12 <I2C_RequestMemoryWrite+0xa6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	0a32      	lsrs	r2, r6, #8
 8000ef8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000efa:	462a      	mov	r2, r5
 8000efc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000efe:	4620      	mov	r0, r4
 8000f00:	f7ff ff89 	bl	8000e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b178      	cbz	r0, 8000f28 <I2C_RequestMemoryWrite+0xbc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d005      	beq.n	8000f1a <I2C_RequestMemoryWrite+0xae>
      return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e7c2      	b.n	8000e98 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f12:	6822      	ldr	r2, [r4, #0]
 8000f14:	b2f6      	uxtb	r6, r6
 8000f16:	6116      	str	r6, [r2, #16]
 8000f18:	e7be      	b.n	8000e98 <I2C_RequestMemoryWrite+0x2c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f1a:	6822      	ldr	r2, [r4, #0]
 8000f1c:	6813      	ldr	r3, [r2, #0]
 8000f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f22:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e7b7      	b.n	8000e98 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	b2f6      	uxtb	r6, r6
 8000f2c:	6116      	str	r6, [r2, #16]
 8000f2e:	e7b3      	b.n	8000e98 <I2C_RequestMemoryWrite+0x2c>
 8000f30:	00010002 	.word	0x00010002

08000f34 <I2C_RequestMemoryRead>:
{
 8000f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	460e      	mov	r6, r1
 8000f3e:	4617      	mov	r7, r2
 8000f40:	4698      	mov	r8, r3
 8000f42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f44:	6802      	ldr	r2, [r0, #0]
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f4e:	6802      	ldr	r2, [r0, #0]
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000f58:	9500      	str	r5, [sp, #0]
 8000f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f62:	f7ff fece 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 8000f66:	b120      	cbz	r0, 8000f72 <I2C_RequestMemoryRead+0x3e>
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	b004      	add	sp, #16
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000f72:	b2f6      	uxtb	r6, r6
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8000f7a:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000f7c:	462b      	mov	r3, r5
 8000f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f80:	4938      	ldr	r1, [pc, #224]	; (8001064 <I2C_RequestMemoryRead+0x130>)
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff fef5 	bl	8000d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000f88:	b108      	cbz	r0, 8000f8e <I2C_RequestMemoryRead+0x5a>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e7ed      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9303      	str	r3, [sp, #12]
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	9203      	str	r2, [sp, #12]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	9303      	str	r3, [sp, #12]
 8000f9c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f9e:	462a      	mov	r2, r5
 8000fa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f7ff ff37 	bl	8000e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fa8:	b158      	cbz	r0, 8000fc2 <I2C_RequestMemoryRead+0x8e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d001      	beq.n	8000fb4 <I2C_RequestMemoryRead+0x80>
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e7da      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb4:	6822      	ldr	r2, [r4, #0]
 8000fb6:	6813      	ldr	r3, [r2, #0]
 8000fb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbc:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e7d3      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fc2:	f1b8 0f01 	cmp.w	r8, #1
 8000fc6:	d10d      	bne.n	8000fe4 <I2C_RequestMemoryRead+0xb0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	b2ff      	uxtb	r7, r7
 8000fcc:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fce:	462a      	mov	r2, r5
 8000fd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	f7ff ff1f 	bl	8000e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fd8:	b320      	cbz	r0, 8001024 <I2C_RequestMemoryRead+0xf0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d01a      	beq.n	8001016 <I2C_RequestMemoryRead+0xe2>
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e7c2      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	0a3a      	lsrs	r2, r7, #8
 8000fe8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fea:	462a      	mov	r2, r5
 8000fec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000fee:	4620      	mov	r0, r4
 8000ff0:	f7ff ff11 	bl	8000e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ff4:	b158      	cbz	r0, 800100e <I2C_RequestMemoryRead+0xda>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d001      	beq.n	8001000 <I2C_RequestMemoryRead+0xcc>
      return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e7b4      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001000:	6822      	ldr	r2, [r4, #0]
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001008:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e7ad      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	b2ff      	uxtb	r7, r7
 8001012:	611f      	str	r7, [r3, #16]
 8001014:	e7db      	b.n	8000fce <I2C_RequestMemoryRead+0x9a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e7a2      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001024:	6822      	ldr	r2, [r4, #0]
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800102e:	9500      	str	r5, [sp, #0]
 8001030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001032:	2200      	movs	r2, #0
 8001034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fe62 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 800103e:	b108      	cbz	r0, 8001044 <I2C_RequestMemoryRead+0x110>
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e792      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	f046 0601 	orr.w	r6, r6, #1
 800104a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800104c:	462b      	mov	r3, r5
 800104e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <I2C_RequestMemoryRead+0x130>)
 8001052:	4620      	mov	r0, r4
 8001054:	f7ff fe8d 	bl	8000d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001058:	4603      	mov	r3, r0
 800105a:	2800      	cmp	r0, #0
 800105c:	d085      	beq.n	8000f6a <I2C_RequestMemoryRead+0x36>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e783      	b.n	8000f6a <I2C_RequestMemoryRead+0x36>
 8001062:	bf00      	nop
 8001064:	00010002 	.word	0x00010002

08001068 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f013 0f04 	tst.w	r3, #4
 8001078:	d11c      	bne.n	80010b4 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fe28 	bl	8000cd0 <I2C_IsAcknowledgeFailed>
 8001080:	b9d0      	cbnz	r0, 80010b8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001082:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001086:	d0f3      	beq.n	8001070 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001088:	f7ff fadc 	bl	8000644 <HAL_GetTick>
 800108c:	1b80      	subs	r0, r0, r6
 800108e:	42a8      	cmp	r0, r5
 8001090:	d801      	bhi.n	8001096 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001092:	2d00      	cmp	r5, #0
 8001094:	d1ec      	bne.n	8001070 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001096:	2300      	movs	r3, #0
 8001098:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800109a:	2220      	movs	r2, #32
 800109c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010a6:	f042 0220 	orr.w	r2, r2, #32
 80010aa:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80010ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
 80010b2:	e000      	b.n	80010b6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80010b4:	2000      	movs	r0, #0
}
 80010b6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
 80010ba:	e7fc      	b.n	80010b6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080010bc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	4605      	mov	r5, r0
 80010c0:	460c      	mov	r4, r1
 80010c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010cc:	d129      	bne.n	8001122 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	f012 0f10 	tst.w	r2, #16
 80010d4:	d115      	bne.n	8001102 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010d6:	f7ff fab5 	bl	8000644 <HAL_GetTick>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	42a0      	cmp	r0, r4
 80010de:	d801      	bhi.n	80010e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80010e0:	2c00      	cmp	r4, #0
 80010e2:	d1ef      	bne.n	80010c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80010e8:	2220      	movs	r2, #32
 80010ea:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010ee:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010f2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80010f4:	f042 0220 	orr.w	r2, r2, #32
 80010f8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010fa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80010fe:	2001      	movs	r0, #1
}
 8001100:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001102:	f06f 0210 	mvn.w	r2, #16
 8001106:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800110c:	2220      	movs	r2, #32
 800110e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001112:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001116:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001118:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800111a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800111e:	2001      	movs	r0, #1
 8001120:	e7ee      	b.n	8001100 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8001122:	2000      	movs	r0, #0
 8001124:	e7ec      	b.n	8001100 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08001128 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001128:	2800      	cmp	r0, #0
 800112a:	f000 80be 	beq.w	80012aa <HAL_I2C_Init+0x182>
{
 800112e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001130:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001132:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001136:	2b00      	cmp	r3, #0
 8001138:	d06b      	beq.n	8001212 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800113a:	2324      	movs	r3, #36	; 0x24
 800113c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001140:	6822      	ldr	r2, [r4, #0]
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800114a:	f000 fbcb 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800114e:	6862      	ldr	r2, [r4, #4]
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <HAL_I2C_Init+0x18c>)
 8001152:	429a      	cmp	r2, r3
 8001154:	d862      	bhi.n	800121c <HAL_I2C_Init+0xf4>
 8001156:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <HAL_I2C_Init+0x190>)
 8001158:	4298      	cmp	r0, r3
 800115a:	bf8c      	ite	hi
 800115c:	2300      	movhi	r3, #0
 800115e:	2301      	movls	r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	f040 80a4 	bne.w	80012ae <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8001166:	4b55      	ldr	r3, [pc, #340]	; (80012bc <HAL_I2C_Init+0x194>)
 8001168:	fba3 2300 	umull	r2, r3, r3, r0
 800116c:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800116e:	6821      	ldr	r1, [r4, #0]
 8001170:	684a      	ldr	r2, [r1, #4]
 8001172:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001176:	431a      	orrs	r2, r3
 8001178:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800117a:	6825      	ldr	r5, [r4, #0]
 800117c:	6a2a      	ldr	r2, [r5, #32]
 800117e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001182:	6866      	ldr	r6, [r4, #4]
 8001184:	494b      	ldr	r1, [pc, #300]	; (80012b4 <HAL_I2C_Init+0x18c>)
 8001186:	428e      	cmp	r6, r1
 8001188:	d84e      	bhi.n	8001228 <HAL_I2C_Init+0x100>
 800118a:	3301      	adds	r3, #1
 800118c:	4313      	orrs	r3, r2
 800118e:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001190:	6825      	ldr	r5, [r4, #0]
 8001192:	69e9      	ldr	r1, [r5, #28]
 8001194:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001198:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800119c:	6863      	ldr	r3, [r4, #4]
 800119e:	4a45      	ldr	r2, [pc, #276]	; (80012b4 <HAL_I2C_Init+0x18c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d84b      	bhi.n	800123c <HAL_I2C_Init+0x114>
 80011a4:	3801      	subs	r0, #1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ac:	3301      	adds	r3, #1
 80011ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf38      	it	cc
 80011b6:	2304      	movcc	r3, #4
 80011b8:	430b      	orrs	r3, r1
 80011ba:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011bc:	6821      	ldr	r1, [r4, #0]
 80011be:	680b      	ldr	r3, [r1, #0]
 80011c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80011c4:	69e2      	ldr	r2, [r4, #28]
 80011c6:	6a20      	ldr	r0, [r4, #32]
 80011c8:	4302      	orrs	r2, r0
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011ce:	6821      	ldr	r1, [r4, #0]
 80011d0:	688b      	ldr	r3, [r1, #8]
 80011d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011da:	6922      	ldr	r2, [r4, #16]
 80011dc:	68e0      	ldr	r0, [r4, #12]
 80011de:	4302      	orrs	r2, r0
 80011e0:	4313      	orrs	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011e4:	6821      	ldr	r1, [r4, #0]
 80011e6:	68cb      	ldr	r3, [r1, #12]
 80011e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011ec:	6962      	ldr	r2, [r4, #20]
 80011ee:	69a0      	ldr	r0, [r4, #24]
 80011f0:	4302      	orrs	r2, r0
 80011f2:	4313      	orrs	r3, r2
 80011f4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	6813      	ldr	r3, [r2, #0]
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001200:	2000      	movs	r0, #0
 8001202:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001204:	2320      	movs	r3, #32
 8001206:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800120a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800120c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8001210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001212:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001216:	f002 f8cf 	bl	80033b8 <HAL_I2C_MspInit>
 800121a:	e78e      	b.n	800113a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_I2C_Init+0x198>)
 800121e:	4298      	cmp	r0, r3
 8001220:	bf8c      	ite	hi
 8001222:	2300      	movhi	r3, #0
 8001224:	2301      	movls	r3, #1
 8001226:	e79b      	b.n	8001160 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001228:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4924      	ldr	r1, [pc, #144]	; (80012c4 <HAL_I2C_Init+0x19c>)
 8001232:	fba1 1303 	umull	r1, r3, r1, r3
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	3301      	adds	r3, #1
 800123a:	e7a7      	b.n	800118c <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800123c:	68a2      	ldr	r2, [r4, #8]
 800123e:	b9ba      	cbnz	r2, 8001270 <HAL_I2C_Init+0x148>
 8001240:	1e46      	subs	r6, r0, #1
 8001242:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8001246:	fbb6 f6f7 	udiv	r6, r6, r7
 800124a:	3601      	adds	r6, #1
 800124c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001250:	fab6 f686 	clz	r6, r6
 8001254:	0976      	lsrs	r6, r6, #5
 8001256:	bb36      	cbnz	r6, 80012a6 <HAL_I2C_Init+0x17e>
 8001258:	b9c2      	cbnz	r2, 800128c <HAL_I2C_Init+0x164>
 800125a:	3801      	subs	r0, #1
 800125c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001260:	fbb0 f3f3 	udiv	r3, r0, r3
 8001264:	3301      	adds	r3, #1
 8001266:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800126a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800126e:	e7a3      	b.n	80011b8 <HAL_I2C_Init+0x90>
 8001270:	1e46      	subs	r6, r0, #1
 8001272:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8001276:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800127a:	fbb6 f6f7 	udiv	r6, r6, r7
 800127e:	3601      	adds	r6, #1
 8001280:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001284:	fab6 f686 	clz	r6, r6
 8001288:	0976      	lsrs	r6, r6, #5
 800128a:	e7e4      	b.n	8001256 <HAL_I2C_Init+0x12e>
 800128c:	3801      	subs	r0, #1
 800128e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001292:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001296:	fbb0 f2f3 	udiv	r2, r0, r3
 800129a:	3201      	adds	r2, #1
 800129c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80012a0:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80012a4:	e788      	b.n	80011b8 <HAL_I2C_Init+0x90>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e786      	b.n	80011b8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
}
 80012ac:	4770      	bx	lr
    return HAL_ERROR;
 80012ae:	2001      	movs	r0, #1
 80012b0:	e7ae      	b.n	8001210 <HAL_I2C_Init+0xe8>
 80012b2:	bf00      	nop
 80012b4:	000186a0 	.word	0x000186a0
 80012b8:	001e847f 	.word	0x001e847f
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	003d08ff 	.word	0x003d08ff
 80012c4:	10624dd3 	.word	0x10624dd3

080012c8 <HAL_I2C_Mem_Write>:
{
 80012c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	4604      	mov	r4, r0
 80012d0:	460e      	mov	r6, r1
 80012d2:	4617      	mov	r7, r2
 80012d4:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80012d6:	f7ff f9b5 	bl	8000644 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80012da:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d004      	beq.n	80012ee <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 80012e4:	2302      	movs	r3, #2
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	b002      	add	sp, #8
 80012ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012ee:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012f0:	9000      	str	r0, [sp, #0]
 80012f2:	2319      	movs	r3, #25
 80012f4:	2201      	movs	r2, #1
 80012f6:	494c      	ldr	r1, [pc, #304]	; (8001428 <HAL_I2C_Mem_Write+0x160>)
 80012f8:	4620      	mov	r0, r4
 80012fa:	f7ff fd02 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 80012fe:	2800      	cmp	r0, #0
 8001300:	f040 808b 	bne.w	800141a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8001304:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001308:	2b01      	cmp	r3, #1
 800130a:	f000 8088 	beq.w	800141e <HAL_I2C_Mem_Write+0x156>
 800130e:	2301      	movs	r3, #1
 8001310:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	f012 0f01 	tst.w	r2, #1
 800131c:	d103      	bne.n	8001326 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001326:	6822      	ldr	r2, [r4, #0]
 8001328:	6813      	ldr	r3, [r2, #0]
 800132a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800132e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001330:	2321      	movs	r3, #33	; 0x21
 8001332:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001336:	2340      	movs	r3, #64	; 0x40
 8001338:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001340:	9b08      	ldr	r3, [sp, #32]
 8001342:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001344:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8001348:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800134a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800134c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_I2C_Mem_Write+0x164>)
 8001350:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001352:	9501      	str	r5, [sp, #4]
 8001354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	4643      	mov	r3, r8
 800135a:	463a      	mov	r2, r7
 800135c:	4631      	mov	r1, r6
 800135e:	4620      	mov	r0, r4
 8001360:	f7ff fd84 	bl	8000e6c <I2C_RequestMemoryWrite>
 8001364:	2800      	cmp	r0, #0
 8001366:	d15c      	bne.n	8001422 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8001368:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	d034      	beq.n	80013d8 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800136e:	462a      	mov	r2, r5
 8001370:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff fd4f 	bl	8000e16 <I2C_WaitOnTXEFlagUntilTimeout>
 8001378:	bb10      	cbnz	r0, 80013c0 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800137a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	7812      	ldrb	r2, [r2, #0]
 8001380:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001382:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001384:	1c4b      	adds	r3, r1, #1
 8001386:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001388:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800138a:	3b01      	subs	r3, #1
 800138c:	b29b      	uxth	r3, r3
 800138e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001390:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001392:	3a01      	subs	r2, #1
 8001394:	b292      	uxth	r2, r2
 8001396:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001398:	6822      	ldr	r2, [r4, #0]
 800139a:	6950      	ldr	r0, [r2, #20]
 800139c:	f010 0f04 	tst.w	r0, #4
 80013a0:	d0e2      	beq.n	8001368 <HAL_I2C_Mem_Write+0xa0>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0e0      	beq.n	8001368 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013a6:	784b      	ldrb	r3, [r1, #1]
 80013a8:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80013aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013ac:	3301      	adds	r3, #1
 80013ae:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80013b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013b2:	3b01      	subs	r3, #1
 80013b4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80013b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80013be:	e7d3      	b.n	8001368 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e78d      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	6813      	ldr	r3, [r2, #0]
 80013ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d2:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e786      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d8:	462a      	mov	r2, r5
 80013da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fe43 	bl	8001068 <I2C_WaitOnBTFFlagUntilTimeout>
 80013e2:	4603      	mov	r3, r0
 80013e4:	b158      	cbz	r0, 80013fe <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d001      	beq.n	80013f0 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e77a      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f0:	6822      	ldr	r2, [r4, #0]
 80013f2:	6813      	ldr	r3, [r2, #0]
 80013f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f8:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e773      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fe:	6821      	ldr	r1, [r4, #0]
 8001400:	680a      	ldr	r2, [r1, #0]
 8001402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001406:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001408:	2220      	movs	r2, #32
 800140a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800140e:	2200      	movs	r2, #0
 8001410:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001414:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8001418:	e765      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 800141a:	2302      	movs	r3, #2
 800141c:	e763      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 800141e:	2302      	movs	r3, #2
 8001420:	e761      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e75f      	b.n	80012e6 <HAL_I2C_Mem_Write+0x1e>
 8001426:	bf00      	nop
 8001428:	00100002 	.word	0x00100002
 800142c:	ffff0000 	.word	0xffff0000

08001430 <HAL_I2C_Mem_Read>:
{
 8001430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	4604      	mov	r4, r0
 8001438:	460e      	mov	r6, r1
 800143a:	4617      	mov	r7, r2
 800143c:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 800143e:	f7ff f901 	bl	8000644 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001442:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b20      	cmp	r3, #32
 800144a:	d004      	beq.n	8001456 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 800144c:	2602      	movs	r6, #2
}
 800144e:	4630      	mov	r0, r6
 8001450:	b006      	add	sp, #24
 8001452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001456:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	2319      	movs	r3, #25
 800145c:	2201      	movs	r2, #1
 800145e:	499e      	ldr	r1, [pc, #632]	; (80016d8 <HAL_I2C_Mem_Read+0x2a8>)
 8001460:	4620      	mov	r0, r4
 8001462:	f7ff fc4e 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 8001466:	2800      	cmp	r0, #0
 8001468:	f040 8134 	bne.w	80016d4 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 800146c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001470:	2b01      	cmp	r3, #1
 8001472:	f000 8137 	beq.w	80016e4 <HAL_I2C_Mem_Read+0x2b4>
 8001476:	2301      	movs	r3, #1
 8001478:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f012 0f01 	tst.w	r2, #1
 8001484:	d103      	bne.n	800148e <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	6813      	ldr	r3, [r2, #0]
 8001492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001496:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001498:	2322      	movs	r3, #34	; 0x22
 800149a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80014a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014aa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014ac:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80014b0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014b4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014b6:	4b89      	ldr	r3, [pc, #548]	; (80016dc <HAL_I2C_Mem_Read+0x2ac>)
 80014b8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014ba:	9501      	str	r5, [sp, #4]
 80014bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	4643      	mov	r3, r8
 80014c2:	463a      	mov	r2, r7
 80014c4:	4631      	mov	r1, r6
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fd34 	bl	8000f34 <I2C_RequestMemoryRead>
 80014cc:	4606      	mov	r6, r0
 80014ce:	2800      	cmp	r0, #0
 80014d0:	f040 810a 	bne.w	80016e8 <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 80014d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80014d6:	b95b      	cbnz	r3, 80014f0 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	9202      	str	r2, [sp, #8]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	9202      	str	r2, [sp, #8]
 80014e4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e072      	b.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d00a      	beq.n	800150a <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d01a      	beq.n	800152e <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014f8:	2300      	movs	r3, #0
 80014fa:	9305      	str	r3, [sp, #20]
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	9205      	str	r2, [sp, #20]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	9305      	str	r3, [sp, #20]
 8001506:	9b05      	ldr	r3, [sp, #20]
 8001508:	e065      	b.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800150a:	6822      	ldr	r2, [r4, #0]
 800150c:	6813      	ldr	r3, [r2, #0]
 800150e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001512:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001514:	2300      	movs	r3, #0
 8001516:	9303      	str	r3, [sp, #12]
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	9203      	str	r2, [sp, #12]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	9203      	str	r2, [sp, #12]
 8001522:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e053      	b.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	6813      	ldr	r3, [r2, #0]
 8001532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001536:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	6813      	ldr	r3, [r2, #0]
 800153c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001540:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001542:	2300      	movs	r3, #0
 8001544:	9304      	str	r3, [sp, #16]
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	9204      	str	r2, [sp, #16]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	9304      	str	r3, [sp, #16]
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	e040      	b.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001554:	462a      	mov	r2, r5
 8001556:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff fdaf 	bl	80010bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800155e:	2800      	cmp	r0, #0
 8001560:	f040 80c4 	bne.w	80016ec <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800156a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800156c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800156e:	3301      	adds	r3, #1
 8001570:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001572:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001574:	3b01      	subs	r3, #1
 8001576:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001578:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800157a:	3b01      	subs	r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001580:	e029      	b.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001582:	9500      	str	r5, [sp, #0]
 8001584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001586:	2200      	movs	r2, #0
 8001588:	4955      	ldr	r1, [pc, #340]	; (80016e0 <HAL_I2C_Mem_Read+0x2b0>)
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fbb9 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 8001590:	2800      	cmp	r0, #0
 8001592:	f040 80ad 	bne.w	80016f0 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001596:	6822      	ldr	r2, [r4, #0]
 8001598:	6813      	ldr	r3, [r2, #0]
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015a6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80015a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015aa:	1c53      	adds	r3, r2, #1
 80015ac:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015b0:	3b01      	subs	r3, #1
 80015b2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80015c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015c4:	3301      	adds	r3, #1
 80015c6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80015c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015ca:	3b01      	subs	r3, #1
 80015cc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80015ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80015d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d072      	beq.n	80016c2 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d849      	bhi.n	8001674 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d0b7      	beq.n	8001554 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d0cc      	beq.n	8001582 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015e8:	9500      	str	r5, [sp, #0]
 80015ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80015ec:	2200      	movs	r2, #0
 80015ee:	493c      	ldr	r1, [pc, #240]	; (80016e0 <HAL_I2C_Mem_Read+0x2b0>)
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff fb86 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d17c      	bne.n	80016f4 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015fa:	6822      	ldr	r2, [r4, #0]
 80015fc:	6813      	ldr	r3, [r2, #0]
 80015fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001602:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800160a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800160c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800160e:	3301      	adds	r3, #1
 8001610:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001612:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001614:	3b01      	subs	r3, #1
 8001616:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001618:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800161a:	3b01      	subs	r3, #1
 800161c:	b29b      	uxth	r3, r3
 800161e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001620:	9500      	str	r5, [sp, #0]
 8001622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001624:	2200      	movs	r2, #0
 8001626:	492e      	ldr	r1, [pc, #184]	; (80016e0 <HAL_I2C_Mem_Read+0x2b0>)
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff fb6a 	bl	8000d02 <I2C_WaitOnFlagUntilTimeout>
 800162e:	2800      	cmp	r0, #0
 8001630:	d162      	bne.n	80016f8 <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001632:	6822      	ldr	r2, [r4, #0]
 8001634:	6813      	ldr	r3, [r2, #0]
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001642:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001644:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001646:	1c53      	adds	r3, r2, #1
 8001648:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800164a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800164c:	3b01      	subs	r3, #1
 800164e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001650:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001652:	3b01      	subs	r3, #1
 8001654:	b29b      	uxth	r3, r3
 8001656:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800165e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001664:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001666:	3b01      	subs	r3, #1
 8001668:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800166a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800166c:	3b01      	subs	r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001672:	e7b0      	b.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001674:	462a      	mov	r2, r5
 8001676:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001678:	4620      	mov	r0, r4
 800167a:	f7ff fd1f 	bl	80010bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800167e:	2800      	cmp	r0, #0
 8001680:	d13c      	bne.n	80016fc <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001688:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800168a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800168c:	1c53      	adds	r3, r2, #1
 800168e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001690:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001692:	3b01      	subs	r3, #1
 8001694:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001696:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001698:	3b01      	subs	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	6959      	ldr	r1, [r3, #20]
 80016a2:	f011 0f04 	tst.w	r1, #4
 80016a6:	d096      	beq.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80016ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ae:	3301      	adds	r3, #1
 80016b0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80016b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80016b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29b      	uxth	r3, r3
 80016be:	8563      	strh	r3, [r4, #42]	; 0x2a
 80016c0:	e789      	b.n	80015d6 <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	2320      	movs	r3, #32
 80016c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80016ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80016d2:	e6bc      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80016d4:	2602      	movs	r6, #2
 80016d6:	e6ba      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
 80016d8:	00100002 	.word	0x00100002
 80016dc:	ffff0000 	.word	0xffff0000
 80016e0:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80016e4:	2602      	movs	r6, #2
 80016e6:	e6b2      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80016e8:	2601      	movs	r6, #1
 80016ea:	e6b0      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80016ec:	2601      	movs	r6, #1
 80016ee:	e6ae      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80016f0:	2601      	movs	r6, #1
 80016f2:	e6ac      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80016f4:	2601      	movs	r6, #1
 80016f6:	e6aa      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80016f8:	2601      	movs	r6, #1
 80016fa:	e6a8      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80016fc:	2601      	movs	r6, #1
 80016fe:	e6a6      	b.n	800144e <HAL_I2C_Mem_Read+0x1e>

08001700 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001700:	b510      	push	{r4, lr}
 8001702:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_PWREx_EnableOverDrive+0x70>)
 800170a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_PWREx_EnableOverDrive+0x74>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001722:	f7fe ff8f 	bl	8000644 <HAL_GetTick>
 8001726:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_PWREx_EnableOverDrive+0x78>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001730:	d108      	bne.n	8001744 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001732:	f7fe ff87 	bl	8000644 <HAL_GetTick>
 8001736:	1b00      	subs	r0, r0, r4
 8001738:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800173c:	d9f4      	bls.n	8001728 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001740:	b002      	add	sp, #8
 8001742:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_PWREx_EnableOverDrive+0x7c>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800174a:	f7fe ff7b 	bl	8000644 <HAL_GetTick>
 800174e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_PWREx_EnableOverDrive+0x78>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001758:	d107      	bne.n	800176a <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800175a:	f7fe ff73 	bl	8000644 <HAL_GetTick>
 800175e:	1b00      	subs	r0, r0, r4
 8001760:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001764:	d9f4      	bls.n	8001750 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8001766:	2003      	movs	r0, #3
 8001768:	e7ea      	b.n	8001740 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800176a:	2000      	movs	r0, #0
 800176c:	e7e8      	b.n	8001740 <HAL_PWREx_EnableOverDrive+0x40>
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	420e0040 	.word	0x420e0040
 8001778:	40007000 	.word	0x40007000
 800177c:	420e0044 	.word	0x420e0044

08001780 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001780:	2800      	cmp	r0, #0
 8001782:	f000 809d 	beq.w	80018c0 <HAL_RCC_ClockConfig+0x140>
{
 8001786:	b570      	push	{r4, r5, r6, lr}
 8001788:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_RCC_ClockConfig+0x148>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	428b      	cmp	r3, r1
 8001794:	d209      	bcs.n	80017aa <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	b2cb      	uxtb	r3, r1
 8001798:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_RCC_ClockConfig+0x148>)
 800179a:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179c:	6813      	ldr	r3, [r2, #0]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	428b      	cmp	r3, r1
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 80017a6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80017a8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	f013 0f02 	tst.w	r3, #2
 80017b0:	d017      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b2:	f013 0f04 	tst.w	r3, #4
 80017b6:	d004      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4a44      	ldr	r2, [pc, #272]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 80017ba:	6893      	ldr	r3, [r2, #8]
 80017bc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	f013 0f08 	tst.w	r3, #8
 80017c8:	d004      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 80017cc:	6893      	ldr	r3, [r2, #8]
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 80017d6:	6893      	ldr	r3, [r2, #8]
 80017d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017dc:	68a0      	ldr	r0, [r4, #8]
 80017de:	4303      	orrs	r3, r0
 80017e0:	6093      	str	r3, [r2, #8]
 80017e2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	f013 0f01 	tst.w	r3, #1
 80017ea:	d032      	beq.n	8001852 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d021      	beq.n	8001836 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	1e9a      	subs	r2, r3, #2
 80017f4:	2a01      	cmp	r2, #1
 80017f6:	d925      	bls.n	8001844 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	4a34      	ldr	r2, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	f012 0f02 	tst.w	r2, #2
 8001800:	d060      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4932      	ldr	r1, [pc, #200]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 8001804:	688a      	ldr	r2, [r1, #8]
 8001806:	f022 0203 	bic.w	r2, r2, #3
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800180e:	f7fe ff19 	bl	8000644 <HAL_GetTick>
 8001812:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	6862      	ldr	r2, [r4, #4]
 800181e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001822:	d016      	beq.n	8001852 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7fe ff0e 	bl	8000644 <HAL_GetTick>
 8001828:	1b80      	subs	r0, r0, r6
 800182a:	f241 3388 	movw	r3, #5000	; 0x1388
 800182e:	4298      	cmp	r0, r3
 8001830:	d9f0      	bls.n	8001814 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001832:	2003      	movs	r0, #3
 8001834:	e7b8      	b.n	80017a8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800183e:	d1e0      	bne.n	8001802 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	e7b1      	b.n	80017a8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001844:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800184c:	d1d9      	bne.n	8001802 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800184e:	2001      	movs	r0, #1
 8001850:	e7aa      	b.n	80017a8 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_ClockConfig+0x148>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	42ab      	cmp	r3, r5
 800185c:	d909      	bls.n	8001872 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	b2ea      	uxtb	r2, r5
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_RCC_ClockConfig+0x148>)
 8001862:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	42ab      	cmp	r3, r5
 800186c:	d001      	beq.n	8001872 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
 8001870:	e79a      	b.n	80017a8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	f013 0f04 	tst.w	r3, #4
 8001878:	d006      	beq.n	8001888 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 800187c:	6893      	ldr	r3, [r2, #8]
 800187e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001882:	68e1      	ldr	r1, [r4, #12]
 8001884:	430b      	orrs	r3, r1
 8001886:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	f013 0f08 	tst.w	r3, #8
 800188e:	d007      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 8001892:	6893      	ldr	r3, [r2, #8]
 8001894:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001898:	6921      	ldr	r1, [r4, #16]
 800189a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800189e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018a0:	f000 f840 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_RCC_ClockConfig+0x14c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_RCC_ClockConfig+0x150>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	40d8      	lsrs	r0, r3
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_RCC_ClockConfig+0x154>)
 80018b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7fe fe7a 	bl	80005b0 <HAL_InitTick>
  return HAL_OK;
 80018bc:	2000      	movs	r0, #0
 80018be:	e773      	b.n	80017a8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80018c0:	2001      	movs	r0, #1
}
 80018c2:	4770      	bx	lr
        return HAL_ERROR;
 80018c4:	2001      	movs	r0, #1
 80018c6:	e76f      	b.n	80017a8 <HAL_RCC_ClockConfig+0x28>
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08004fb8 	.word	0x08004fb8
 80018d4:	20000008 	.word	0x20000008

080018d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018d8:	4b01      	ldr	r3, [pc, #4]	; (80018e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008

080018e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018e6:	f7ff fff7 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018f2:	4a03      	ldr	r2, [pc, #12]	; (8001900 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80018f6:	40d8      	lsrs	r0, r3
 80018f8:	bd08      	pop	{r3, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	08004fc8 	.word	0x08004fc8

08001904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001904:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001906:	f7ff ffe7 	bl	80018d8 <HAL_RCC_GetHCLKFreq>
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_RCC_GetPCLK2Freq+0x18>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001912:	4a03      	ldr	r2, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
}
 8001916:	40d8      	lsrs	r0, r3
 8001918:	bd08      	pop	{r3, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	08004fc8 	.word	0x08004fc8

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d006      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x1e>
 8001934:	2b0c      	cmp	r3, #12
 8001936:	d042      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x9a>
 8001938:	2b04      	cmp	r3, #4
 800193a:	d07c      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4840      	ldr	r0, [pc, #256]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x11c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800193e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001950:	d012      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800195a:	2300      	movs	r3, #0
 800195c:	4839      	ldr	r0, [pc, #228]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x120>)
 800195e:	fba1 0100 	umull	r0, r1, r1, r0
 8001962:	f7fe fca5 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001972:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001976:	e7e2      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001980:	461e      	mov	r6, r3
 8001982:	2700      	movs	r7, #0
 8001984:	015c      	lsls	r4, r3, #5
 8001986:	2500      	movs	r5, #0
 8001988:	1ae4      	subs	r4, r4, r3
 800198a:	eb65 0507 	sbc.w	r5, r5, r7
 800198e:	01a9      	lsls	r1, r5, #6
 8001990:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001994:	01a0      	lsls	r0, r4, #6
 8001996:	1b00      	subs	r0, r0, r4
 8001998:	eb61 0105 	sbc.w	r1, r1, r5
 800199c:	00cb      	lsls	r3, r1, #3
 800199e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80019a2:	00c4      	lsls	r4, r0, #3
 80019a4:	19a0      	adds	r0, r4, r6
 80019a6:	eb43 0107 	adc.w	r1, r3, r7
 80019aa:	028b      	lsls	r3, r1, #10
 80019ac:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80019b0:	0284      	lsls	r4, r0, #10
 80019b2:	4620      	mov	r0, r4
 80019b4:	4619      	mov	r1, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	f7fe fc7a 	bl	80002b0 <__aeabi_uldivmod>
 80019bc:	e7d3      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019cc:	d010      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 80019d0:	6859      	ldr	r1, [r3, #4]
 80019d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019d6:	2300      	movs	r3, #0
 80019d8:	481a      	ldr	r0, [pc, #104]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x120>)
 80019da:	fba1 0100 	umull	r0, r1, r1, r0
 80019de:	f7fe fc67 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 80019ea:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80019ee:	e7a6      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x118>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80019f8:	461e      	mov	r6, r3
 80019fa:	2700      	movs	r7, #0
 80019fc:	015c      	lsls	r4, r3, #5
 80019fe:	2500      	movs	r5, #0
 8001a00:	1ae4      	subs	r4, r4, r3
 8001a02:	eb65 0507 	sbc.w	r5, r5, r7
 8001a06:	01a9      	lsls	r1, r5, #6
 8001a08:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001a0c:	01a0      	lsls	r0, r4, #6
 8001a0e:	1b00      	subs	r0, r0, r4
 8001a10:	eb61 0105 	sbc.w	r1, r1, r5
 8001a14:	00cb      	lsls	r3, r1, #3
 8001a16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a1a:	00c4      	lsls	r4, r0, #3
 8001a1c:	19a0      	adds	r0, r4, r6
 8001a1e:	eb43 0107 	adc.w	r1, r3, r7
 8001a22:	028b      	lsls	r3, r1, #10
 8001a24:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001a28:	0284      	lsls	r4, r0, #10
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f7fe fc3e 	bl	80002b0 <__aeabi_uldivmod>
 8001a34:	e7d5      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0xbe>
      sysclockfreq = HSE_VALUE;
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x120>)
  return sysclockfreq;
 8001a38:	e781      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x1a>
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	017d7840 	.word	0x017d7840

08001a48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	6803      	ldr	r3, [r0, #0]
 8001a50:	f013 0f01 	tst.w	r3, #1
 8001a54:	d041      	beq.n	8001ada <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a56:	4ba6      	ldr	r3, [pc, #664]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d032      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a62:	4ba3      	ldr	r3, [pc, #652]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d027      	beq.n	8001abe <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4ba0      	ldr	r3, [pc, #640]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d059      	beq.n	8001b2e <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a80:	d05b      	beq.n	8001b3a <HAL_RCC_OscConfig+0xf2>
 8001a82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a86:	d05e      	beq.n	8001b46 <HAL_RCC_OscConfig+0xfe>
 8001a88:	4b99      	ldr	r3, [pc, #612]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a98:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a9a:	6863      	ldr	r3, [r4, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d05c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7fe fdd0 	bl	8000644 <HAL_GetTick>
 8001aa4:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001aae:	d114      	bne.n	8001ada <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7fe fdc8 	bl	8000644 <HAL_GetTick>
 8001ab4:	1b40      	subs	r0, r0, r5
 8001ab6:	2864      	cmp	r0, #100	; 0x64
 8001ab8:	d9f5      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8001aba:	2003      	movs	r0, #3
 8001abc:	e19d      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001abe:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ac6:	d0d2      	beq.n	8001a6e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ad0:	d003      	beq.n	8001ada <HAL_RCC_OscConfig+0x92>
 8001ad2:	6863      	ldr	r3, [r4, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 818d 	beq.w	8001df4 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	f013 0f02 	tst.w	r3, #2
 8001ae0:	d067      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ae2:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f013 0f0c 	tst.w	r3, #12
 8001aea:	d04a      	beq.n	8001b82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aec:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d03f      	beq.n	8001b78 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af8:	4b7d      	ldr	r3, [pc, #500]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d048      	beq.n	8001b96 <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b04:	68e3      	ldr	r3, [r4, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d074      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0a:	4b7a      	ldr	r3, [pc, #488]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7fe fd98 	bl	8000644 <HAL_GetTick>
 8001b14:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f013 0f02 	tst.w	r3, #2
 8001b1e:	d160      	bne.n	8001be2 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b20:	f7fe fd90 	bl	8000644 <HAL_GetTick>
 8001b24:	1b40      	subs	r0, r0, r5
 8001b26:	2802      	cmp	r0, #2
 8001b28:	d9f5      	bls.n	8001b16 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8001b2a:	2003      	movs	r0, #3
 8001b2c:	e165      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b2e:	4b70      	ldr	r3, [pc, #448]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b36:	d0a0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x32>
 8001b38:	e7c6      	b.n	8001ac8 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3a:	4a6d      	ldr	r2, [pc, #436]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b3c:	6813      	ldr	r3, [r2, #0]
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e7a9      	b.n	8001a9a <HAL_RCC_OscConfig+0x52>
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e79f      	b.n	8001a9a <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8001b5a:	f7fe fd73 	bl	8000644 <HAL_GetTick>
 8001b5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b60:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b68:	d0b7      	beq.n	8001ada <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6a:	f7fe fd6b 	bl	8000644 <HAL_GetTick>
 8001b6e:	1b40      	subs	r0, r0, r5
 8001b70:	2864      	cmp	r0, #100	; 0x64
 8001b72:	d9f5      	bls.n	8001b60 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001b74:	2003      	movs	r0, #3
 8001b76:	e140      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b80:	d1ba      	bne.n	8001af8 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f013 0f02 	tst.w	r3, #2
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15a>
 8001b8c:	68e3      	ldr	r3, [r4, #12]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d007      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8001b92:	2001      	movs	r0, #1
 8001b94:	e131      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b9e:	d1b1      	bne.n	8001b04 <HAL_RCC_OscConfig+0xbc>
 8001ba0:	e7ef      	b.n	8001b82 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba2:	4a53      	ldr	r2, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001baa:	6921      	ldr	r1, [r4, #16]
 8001bac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bb0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f013 0f08 	tst.w	r3, #8
 8001bb8:	d040      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bba:	6963      	ldr	r3, [r4, #20]
 8001bbc:	b363      	cbz	r3, 8001c18 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <HAL_RCC_OscConfig+0x2b0>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7fe fd3e 	bl	8000644 <HAL_GetTick>
 8001bc8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bce:	f013 0f02 	tst.w	r3, #2
 8001bd2:	d133      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7fe fd36 	bl	8000644 <HAL_GetTick>
 8001bd8:	1b40      	subs	r0, r0, r5
 8001bda:	2802      	cmp	r0, #2
 8001bdc:	d9f5      	bls.n	8001bca <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8001bde:	2003      	movs	r0, #3
 8001be0:	e10b      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be2:	4a43      	ldr	r2, [pc, #268]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bea:	6921      	ldr	r1, [r4, #16]
 8001bec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e7de      	b.n	8001bb2 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bfa:	f7fe fd23 	bl	8000644 <HAL_GetTick>
 8001bfe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f013 0f02 	tst.w	r3, #2
 8001c08:	d0d3      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7fe fd1b 	bl	8000644 <HAL_GetTick>
 8001c0e:	1b40      	subs	r0, r0, r5
 8001c10:	2802      	cmp	r0, #2
 8001c12:	d9f5      	bls.n	8001c00 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8001c14:	2003      	movs	r0, #3
 8001c16:	e0f0      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c18:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_RCC_OscConfig+0x2b0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7fe fd11 	bl	8000644 <HAL_GetTick>
 8001c22:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c28:	f013 0f02 	tst.w	r3, #2
 8001c2c:	d006      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7fe fd09 	bl	8000644 <HAL_GetTick>
 8001c32:	1b40      	subs	r0, r0, r5
 8001c34:	2802      	cmp	r0, #2
 8001c36:	d9f5      	bls.n	8001c24 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8001c38:	2003      	movs	r0, #3
 8001c3a:	e0de      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	f013 0f04 	tst.w	r3, #4
 8001c42:	d079      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c4c:	d133      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c66:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_RCC_OscConfig+0x2b4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001c70:	d023      	beq.n	8001cba <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c72:	68a3      	ldr	r3, [r4, #8]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d034      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x29a>
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d041      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2b8>
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	671a      	str	r2, [r3, #112]	; 0x70
 8001c86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c88:	f022 0204 	bic.w	r2, r2, #4
 8001c8c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8e:	68a3      	ldr	r3, [r4, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d03f      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7fe fcd6 	bl	8000644 <HAL_GetTick>
 8001c98:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	f013 0f02 	tst.w	r3, #2
 8001ca2:	d148      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca4:	f7fe fcce 	bl	8000644 <HAL_GetTick>
 8001ca8:	1b80      	subs	r0, r0, r6
 8001caa:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cae:	4298      	cmp	r0, r3
 8001cb0:	d9f3      	bls.n	8001c9a <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8001cb2:	2003      	movs	r0, #3
 8001cb4:	e0a1      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	e7d6      	b.n	8001c68 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_RCC_OscConfig+0x2b4>)
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cc4:	f7fe fcbe 	bl	8000644 <HAL_GetTick>
 8001cc8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <HAL_RCC_OscConfig+0x2b4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cd2:	d1ce      	bne.n	8001c72 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd4:	f7fe fcb6 	bl	8000644 <HAL_GetTick>
 8001cd8:	1b80      	subs	r0, r0, r6
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9f5      	bls.n	8001cca <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
 8001ce0:	e08b      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce2:	4a03      	ldr	r2, [pc, #12]	; (8001cf0 <HAL_RCC_OscConfig+0x2a8>)
 8001ce4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	e7cf      	b.n	8001c8e <HAL_RCC_OscConfig+0x246>
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	42470000 	.word	0x42470000
 8001cf8:	42470e80 	.word	0x42470e80
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	4b40      	ldr	r3, [pc, #256]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001d02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d04:	f042 0204 	orr.w	r2, r2, #4
 8001d08:	671a      	str	r2, [r3, #112]	; 0x70
 8001d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d0c:	f042 0201 	orr.w	r2, r2, #1
 8001d10:	671a      	str	r2, [r3, #112]	; 0x70
 8001d12:	e7bc      	b.n	8001c8e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe fc96 	bl	8000644 <HAL_GetTick>
 8001d18:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	f013 0f02 	tst.w	r3, #2
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7fe fc8e 	bl	8000644 <HAL_GetTick>
 8001d28:	1b80      	subs	r0, r0, r6
 8001d2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d2e:	4298      	cmp	r0, r3
 8001d30:	d9f3      	bls.n	8001d1a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8001d32:	2003      	movs	r0, #3
 8001d34:	e061      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d36:	b9e5      	cbnz	r5, 8001d72 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d38:	69a3      	ldr	r3, [r4, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d05c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3e:	4a31      	ldr	r2, [pc, #196]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001d40:	6892      	ldr	r2, [r2, #8]
 8001d42:	f002 020c 	and.w	r2, r2, #12
 8001d46:	2a08      	cmp	r2, #8
 8001d48:	d059      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d017      	beq.n	8001d7e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <HAL_RCC_OscConfig+0x3c0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe fc76 	bl	8000644 <HAL_GetTick>
 8001d58:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d62:	d045      	beq.n	8001df0 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d64:	f7fe fc6e 	bl	8000644 <HAL_GetTick>
 8001d68:	1b00      	subs	r0, r0, r4
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d9f5      	bls.n	8001d5a <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 8001d6e:	2003      	movs	r0, #3
 8001d70:	e043      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001d74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	e7dc      	b.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_RCC_OscConfig+0x3c0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d84:	f7fe fc5e 	bl	8000644 <HAL_GetTick>
 8001d88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d92:	d006      	beq.n	8001da2 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7fe fc56 	bl	8000644 <HAL_GetTick>
 8001d98:	1b40      	subs	r0, r0, r5
 8001d9a:	2802      	cmp	r0, #2
 8001d9c:	d9f5      	bls.n	8001d8a <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 8001d9e:	2003      	movs	r0, #3
 8001da0:	e02b      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da2:	69e3      	ldr	r3, [r4, #28]
 8001da4:	6a22      	ldr	r2, [r4, #32]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001daa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001dae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001db0:	0852      	lsrs	r2, r2, #1
 8001db2:	3a01      	subs	r2, #1
 8001db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001db8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001dbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dc0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001dc6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x3c0>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001dce:	f7fe fc39 	bl	8000644 <HAL_GetTick>
 8001dd2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x3bc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ddc:	d106      	bne.n	8001dec <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fc31 	bl	8000644 <HAL_GetTick>
 8001de2:	1b00      	subs	r0, r0, r4
 8001de4:	2802      	cmp	r0, #2
 8001de6:	d9f5      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8001de8:	2003      	movs	r0, #3
 8001dea:	e006      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001dec:	2000      	movs	r0, #0
 8001dee:	e004      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
 8001df0:	2000      	movs	r0, #0
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8001df8:	2000      	movs	r0, #0
}
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e7fb      	b.n	8001dfa <HAL_RCC_OscConfig+0x3b2>
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	42470060 	.word	0x42470060

08001e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e0c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e0e:	6a03      	ldr	r3, [r0, #32]
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e16:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e18:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e1a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e1c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e20:	680b      	ldr	r3, [r1, #0]
 8001e22:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e24:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e28:	688b      	ldr	r3, [r1, #8]
 8001e2a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e2c:	4d10      	ldr	r5, [pc, #64]	; (8001e70 <TIM_OC1_SetConfig+0x64>)
 8001e2e:	42a8      	cmp	r0, r5
 8001e30:	d003      	beq.n	8001e3a <TIM_OC1_SetConfig+0x2e>
 8001e32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e36:	42a8      	cmp	r0, r5
 8001e38:	d105      	bne.n	8001e46 <TIM_OC1_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e3a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e3e:	68cd      	ldr	r5, [r1, #12]
 8001e40:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e42:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e46:	4d0a      	ldr	r5, [pc, #40]	; (8001e70 <TIM_OC1_SetConfig+0x64>)
 8001e48:	42a8      	cmp	r0, r5
 8001e4a:	d003      	beq.n	8001e54 <TIM_OC1_SetConfig+0x48>
 8001e4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e50:	42a8      	cmp	r0, r5
 8001e52:	d105      	bne.n	8001e60 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e58:	694d      	ldr	r5, [r1, #20]
 8001e5a:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e5c:	698a      	ldr	r2, [r1, #24]
 8001e5e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e60:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e62:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e64:	684a      	ldr	r2, [r1, #4]
 8001e66:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e68:	6203      	str	r3, [r0, #32]
}
 8001e6a:	bc30      	pop	{r4, r5}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40010000 	.word	0x40010000

08001e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e74:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e76:	6a03      	ldr	r3, [r0, #32]
 8001e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e7e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e80:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e82:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e84:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e88:	680d      	ldr	r5, [r1, #0]
 8001e8a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e90:	688d      	ldr	r5, [r1, #8]
 8001e92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e96:	4d12      	ldr	r5, [pc, #72]	; (8001ee0 <TIM_OC3_SetConfig+0x6c>)
 8001e98:	42a8      	cmp	r0, r5
 8001e9a:	d003      	beq.n	8001ea4 <TIM_OC3_SetConfig+0x30>
 8001e9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ea0:	42a8      	cmp	r0, r5
 8001ea2:	d106      	bne.n	8001eb2 <TIM_OC3_SetConfig+0x3e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ea8:	68cd      	ldr	r5, [r1, #12]
 8001eaa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eb2:	4d0b      	ldr	r5, [pc, #44]	; (8001ee0 <TIM_OC3_SetConfig+0x6c>)
 8001eb4:	42a8      	cmp	r0, r5
 8001eb6:	d003      	beq.n	8001ec0 <TIM_OC3_SetConfig+0x4c>
 8001eb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ebc:	42a8      	cmp	r0, r5
 8001ebe:	d107      	bne.n	8001ed0 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ec0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ec4:	694d      	ldr	r5, [r1, #20]
 8001ec6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001eca:	698d      	ldr	r5, [r1, #24]
 8001ecc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ed0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ed2:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ed4:	684a      	ldr	r2, [r1, #4]
 8001ed6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ed8:	6203      	str	r3, [r0, #32]
}
 8001eda:	bc30      	pop	{r4, r5}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ee4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ee6:	6a03      	ldr	r3, [r0, #32]
 8001ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ef2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ef4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ef8:	680d      	ldr	r5, [r1, #0]
 8001efa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f02:	688d      	ldr	r5, [r1, #8]
 8001f04:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f08:	4d09      	ldr	r5, [pc, #36]	; (8001f30 <TIM_OC4_SetConfig+0x4c>)
 8001f0a:	42a8      	cmp	r0, r5
 8001f0c:	d003      	beq.n	8001f16 <TIM_OC4_SetConfig+0x32>
 8001f0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f12:	42a8      	cmp	r0, r5
 8001f14:	d104      	bne.n	8001f20 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f16:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f1a:	694d      	ldr	r5, [r1, #20]
 8001f1c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f24:	684a      	ldr	r2, [r1, #4]
 8001f26:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f28:	6203      	str	r3, [r0, #32]
}
 8001f2a:	bc30      	pop	{r4, r5}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000

08001f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f34:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f36:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f38:	6a04      	ldr	r4, [r0, #32]
 8001f3a:	f024 0401 	bic.w	r4, r4, #1
 8001f3e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f40:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f42:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f46:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f4a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001f4e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f50:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f52:	6203      	str	r3, [r0, #32]
}
 8001f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f5a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f5c:	6a03      	ldr	r3, [r0, #32]
 8001f5e:	f023 0310 	bic.w	r3, r3, #16
 8001f62:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f64:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f66:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f68:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f6c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f74:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f78:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f7a:	6203      	str	r3, [r0, #32]
}
 8001f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f82:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f88:	4319      	orrs	r1, r3
 8001f8a:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f8e:	6081      	str	r1, [r0, #8]
}
 8001f90:	4770      	bx	lr

08001f92 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f98:	6802      	ldr	r2, [r0, #0]
 8001f9a:	6893      	ldr	r3, [r2, #8]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa0:	2b06      	cmp	r3, #6
 8001fa2:	d003      	beq.n	8001fac <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8001fa4:	6813      	ldr	r3, [r2, #0]
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_TIM_PWM_MspInit>:
}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_PeriodElapsedCallback>:
}
 8001fb8:	4770      	bx	lr

08001fba <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_IC_CaptureCallback>:
}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_TriggerCallback>:
}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_TIM_IRQHandler>:
{
 8001fc2:	b510      	push	{r4, lr}
 8001fc4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fc6:	6803      	ldr	r3, [r0, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	f012 0f02 	tst.w	r2, #2
 8001fce:	d011      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	f012 0f02 	tst.w	r2, #2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd8:	f06f 0202 	mvn.w	r2, #2
 8001fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f013 0f03 	tst.w	r3, #3
 8001fea:	d070      	beq.n	80020ce <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001fec:	f7ff ffe6 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	f012 0f04 	tst.w	r2, #4
 8001ffc:	d012      	beq.n	8002024 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	f012 0f04 	tst.w	r2, #4
 8002004:	d00e      	beq.n	8002024 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002006:	f06f 0204 	mvn.w	r2, #4
 800200a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200c:	2302      	movs	r3, #2
 800200e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002018:	d05f      	beq.n	80020da <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff ffce 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002020:	2300      	movs	r3, #0
 8002022:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	f012 0f08 	tst.w	r2, #8
 800202c:	d012      	beq.n	8002054 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	f012 0f08 	tst.w	r2, #8
 8002034:	d00e      	beq.n	8002054 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002036:	f06f 0208 	mvn.w	r2, #8
 800203a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800203c:	2304      	movs	r3, #4
 800203e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f013 0f03 	tst.w	r3, #3
 8002048:	d04e      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	4620      	mov	r0, r4
 800204c:	f7ff ffb6 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002050:	2300      	movs	r3, #0
 8002052:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	f012 0f10 	tst.w	r2, #16
 800205c:	d012      	beq.n	8002084 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	f012 0f10 	tst.w	r2, #16
 8002064:	d00e      	beq.n	8002084 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002066:	f06f 0210 	mvn.w	r2, #16
 800206a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800206c:	2308      	movs	r3, #8
 800206e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002078:	d03d      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	4620      	mov	r0, r4
 800207c:	f7ff ff9e 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002080:	2300      	movs	r3, #0
 8002082:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	f012 0f01 	tst.w	r2, #1
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	f012 0f01 	tst.w	r2, #1
 8002094:	d136      	bne.n	8002104 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800209e:	d003      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020a6:	d134      	bne.n	8002112 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020b8:	d132      	bne.n	8002120 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	f012 0f20 	tst.w	r2, #32
 80020c2:	d003      	beq.n	80020cc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	f012 0f20 	tst.w	r2, #32
 80020ca:	d130      	bne.n	800212e <HAL_TIM_IRQHandler+0x16c>
}
 80020cc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	f7ff ff74 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d2:	4620      	mov	r0, r4
 80020d4:	f7ff ff73 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
 80020d8:	e78a      	b.n	8001ff0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	4620      	mov	r0, r4
 80020dc:	f7ff ff6d 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff ff6c 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
 80020e6:	e79b      	b.n	8002020 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7ff ff66 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff ff65 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
 80020f4:	e7ac      	b.n	8002050 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7ff ff5f 	bl	8001fba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	4620      	mov	r0, r4
 80020fe:	f7ff ff5e 	bl	8001fbe <HAL_TIM_PWM_PulseFinishedCallback>
 8002102:	e7bd      	b.n	8002080 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002104:	f06f 0201 	mvn.w	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff ff54 	bl	8001fb8 <HAL_TIM_PeriodElapsedCallback>
 8002110:	e7c1      	b.n	8002096 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002112:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002116:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002118:	4620      	mov	r0, r4
 800211a:	f000 fa19 	bl	8002550 <HAL_TIMEx_BreakCallback>
 800211e:	e7c3      	b.n	80020a8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002124:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002126:	4620      	mov	r0, r4
 8002128:	f7ff ff4a 	bl	8001fc0 <HAL_TIM_TriggerCallback>
 800212c:	e7c5      	b.n	80020ba <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800212e:	f06f 0220 	mvn.w	r2, #32
 8002132:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002134:	4620      	mov	r0, r4
 8002136:	f000 fa0a 	bl	800254e <HAL_TIMEx_CommutCallback>
}
 800213a:	e7c7      	b.n	80020cc <HAL_TIM_IRQHandler+0x10a>

0800213c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800213c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213e:	4a30      	ldr	r2, [pc, #192]	; (8002200 <TIM_Base_SetConfig+0xc4>)
 8002140:	4290      	cmp	r0, r2
 8002142:	d012      	beq.n	800216a <TIM_Base_SetConfig+0x2e>
 8002144:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002148:	d00f      	beq.n	800216a <TIM_Base_SetConfig+0x2e>
 800214a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800214e:	4290      	cmp	r0, r2
 8002150:	d00b      	beq.n	800216a <TIM_Base_SetConfig+0x2e>
 8002152:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002156:	4290      	cmp	r0, r2
 8002158:	d007      	beq.n	800216a <TIM_Base_SetConfig+0x2e>
 800215a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800215e:	4290      	cmp	r0, r2
 8002160:	d003      	beq.n	800216a <TIM_Base_SetConfig+0x2e>
 8002162:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002166:	4290      	cmp	r0, r2
 8002168:	d103      	bne.n	8002172 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800216e:	684a      	ldr	r2, [r1, #4]
 8002170:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <TIM_Base_SetConfig+0xc4>)
 8002174:	4290      	cmp	r0, r2
 8002176:	d02a      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 8002178:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800217c:	d027      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 800217e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002182:	4290      	cmp	r0, r2
 8002184:	d023      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 8002186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800218a:	4290      	cmp	r0, r2
 800218c:	d01f      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 800218e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002192:	4290      	cmp	r0, r2
 8002194:	d01b      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 8002196:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800219a:	4290      	cmp	r0, r2
 800219c:	d017      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 800219e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d013      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d00f      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 80021ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021b2:	4290      	cmp	r0, r2
 80021b4:	d00b      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 80021b6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80021ba:	4290      	cmp	r0, r2
 80021bc:	d007      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 80021be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021c2:	4290      	cmp	r0, r2
 80021c4:	d003      	beq.n	80021ce <TIM_Base_SetConfig+0x92>
 80021c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ca:	4290      	cmp	r0, r2
 80021cc:	d103      	bne.n	80021d6 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d2:	68ca      	ldr	r2, [r1, #12]
 80021d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021da:	694a      	ldr	r2, [r1, #20]
 80021dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80021de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e0:	688b      	ldr	r3, [r1, #8]
 80021e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021e4:	680b      	ldr	r3, [r1, #0]
 80021e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <TIM_Base_SetConfig+0xc4>)
 80021ea:	4298      	cmp	r0, r3
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0xba>
 80021ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f2:	4298      	cmp	r0, r3
 80021f4:	d101      	bne.n	80021fa <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80021f6:	690b      	ldr	r3, [r1, #16]
 80021f8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80021fa:	2301      	movs	r3, #1
 80021fc:	6143      	str	r3, [r0, #20]
}
 80021fe:	4770      	bx	lr
 8002200:	40010000 	.word	0x40010000

08002204 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002204:	b1a8      	cbz	r0, 8002232 <HAL_TIM_Base_Init+0x2e>
{
 8002206:	b510      	push	{r4, lr}
 8002208:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800220a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800220e:	b15b      	cbz	r3, 8002228 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	2302      	movs	r3, #2
 8002212:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002216:	1d21      	adds	r1, r4, #4
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	f7ff ff8f 	bl	800213c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800221e:	2301      	movs	r3, #1
 8002220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002224:	2000      	movs	r0, #0
}
 8002226:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002228:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800222c:	f001 f91e 	bl	800346c <HAL_TIM_Base_MspInit>
 8002230:	e7ee      	b.n	8002210 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002232:	2001      	movs	r0, #1
}
 8002234:	4770      	bx	lr

08002236 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002236:	b1a8      	cbz	r0, 8002264 <HAL_TIM_PWM_Init+0x2e>
{
 8002238:	b510      	push	{r4, lr}
 800223a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800223c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002240:	b15b      	cbz	r3, 800225a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002248:	1d21      	adds	r1, r4, #4
 800224a:	6820      	ldr	r0, [r4, #0]
 800224c:	f7ff ff76 	bl	800213c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002250:	2301      	movs	r3, #1
 8002252:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002256:	2000      	movs	r0, #0
}
 8002258:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800225a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800225e:	f7ff feaa 	bl	8001fb6 <HAL_TIM_PWM_MspInit>
 8002262:	e7ee      	b.n	8002242 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
}
 8002266:	4770      	bx	lr

08002268 <TIM_OC2_SetConfig>:
{
 8002268:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800226a:	6a03      	ldr	r3, [r0, #32]
 800226c:	f023 0310 	bic.w	r3, r3, #16
 8002270:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002272:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002274:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002276:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002278:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227c:	680d      	ldr	r5, [r1, #0]
 800227e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002282:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002286:	688d      	ldr	r5, [r1, #8]
 8002288:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800228c:	4d11      	ldr	r5, [pc, #68]	; (80022d4 <TIM_OC2_SetConfig+0x6c>)
 800228e:	42a8      	cmp	r0, r5
 8002290:	d003      	beq.n	800229a <TIM_OC2_SetConfig+0x32>
 8002292:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002296:	42a8      	cmp	r0, r5
 8002298:	d106      	bne.n	80022a8 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800229a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800229e:	68cd      	ldr	r5, [r1, #12]
 80022a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80022a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a8:	4d0a      	ldr	r5, [pc, #40]	; (80022d4 <TIM_OC2_SetConfig+0x6c>)
 80022aa:	42a8      	cmp	r0, r5
 80022ac:	d003      	beq.n	80022b6 <TIM_OC2_SetConfig+0x4e>
 80022ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022b2:	42a8      	cmp	r0, r5
 80022b4:	d107      	bne.n	80022c6 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022b6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022ba:	694d      	ldr	r5, [r1, #20]
 80022bc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022c0:	698d      	ldr	r5, [r1, #24]
 80022c2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80022c6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022c8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80022ca:	684a      	ldr	r2, [r1, #4]
 80022cc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022ce:	6203      	str	r3, [r0, #32]
}
 80022d0:	bc30      	pop	{r4, r5}
 80022d2:	4770      	bx	lr
 80022d4:	40010000 	.word	0x40010000

080022d8 <HAL_TIM_PWM_ConfigChannel>:
{
 80022d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d066      	beq.n	80023b0 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80022e2:	460d      	mov	r5, r1
 80022e4:	4604      	mov	r4, r0
 80022e6:	2301      	movs	r3, #1
 80022e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80022f2:	2a0c      	cmp	r2, #12
 80022f4:	d81a      	bhi.n	800232c <HAL_TIM_PWM_ConfigChannel+0x54>
 80022f6:	e8df f002 	tbb	[pc, r2]
 80022fa:	1907      	.short	0x1907
 80022fc:	19201919 	.word	0x19201919
 8002300:	19341919 	.word	0x19341919
 8002304:	1919      	.short	0x1919
 8002306:	47          	.byte	0x47
 8002307:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002308:	6800      	ldr	r0, [r0, #0]
 800230a:	f7ff fd7f 	bl	8001e0c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	6993      	ldr	r3, [r2, #24]
 8002312:	f043 0308 	orr.w	r3, r3, #8
 8002316:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002318:	6822      	ldr	r2, [r4, #0]
 800231a:	6993      	ldr	r3, [r2, #24]
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	6993      	ldr	r3, [r2, #24]
 8002326:	6929      	ldr	r1, [r5, #16]
 8002328:	430b      	orrs	r3, r1
 800232a:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800232c:	2301      	movs	r3, #1
 800232e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002332:	2000      	movs	r0, #0
 8002334:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002338:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800233a:	6800      	ldr	r0, [r0, #0]
 800233c:	f7ff ff94 	bl	8002268 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	6993      	ldr	r3, [r2, #24]
 8002344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002348:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	6993      	ldr	r3, [r2, #24]
 800234e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002352:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002354:	6822      	ldr	r2, [r4, #0]
 8002356:	6993      	ldr	r3, [r2, #24]
 8002358:	6929      	ldr	r1, [r5, #16]
 800235a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800235e:	6193      	str	r3, [r2, #24]
      break;
 8002360:	e7e4      	b.n	800232c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002362:	6800      	ldr	r0, [r0, #0]
 8002364:	f7ff fd86 	bl	8001e74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	69d3      	ldr	r3, [r2, #28]
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002372:	6822      	ldr	r2, [r4, #0]
 8002374:	69d3      	ldr	r3, [r2, #28]
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800237c:	6822      	ldr	r2, [r4, #0]
 800237e:	69d3      	ldr	r3, [r2, #28]
 8002380:	6929      	ldr	r1, [r5, #16]
 8002382:	430b      	orrs	r3, r1
 8002384:	61d3      	str	r3, [r2, #28]
      break;
 8002386:	e7d1      	b.n	800232c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002388:	6800      	ldr	r0, [r0, #0]
 800238a:	f7ff fdab 	bl	8001ee4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800238e:	6822      	ldr	r2, [r4, #0]
 8002390:	69d3      	ldr	r3, [r2, #28]
 8002392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002396:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002398:	6822      	ldr	r2, [r4, #0]
 800239a:	69d3      	ldr	r3, [r2, #28]
 800239c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023a2:	6822      	ldr	r2, [r4, #0]
 80023a4:	69d3      	ldr	r3, [r2, #28]
 80023a6:	6929      	ldr	r1, [r5, #16]
 80023a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80023ac:	61d3      	str	r3, [r2, #28]
      break;
 80023ae:	e7bd      	b.n	800232c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80023b0:	2002      	movs	r0, #2
 80023b2:	e7c1      	b.n	8002338 <HAL_TIM_PWM_ConfigChannel+0x60>

080023b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023b4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023b6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80023c0:	430b      	orrs	r3, r1
 80023c2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c4:	6083      	str	r3, [r0, #8]
}
 80023c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80023cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d066      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0xd6>
{
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80023d8:	2301      	movs	r3, #1
 80023da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80023de:	2302      	movs	r3, #2
 80023e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80023e4:	6802      	ldr	r2, [r0, #0]
 80023e6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80023f2:	680b      	ldr	r3, [r1, #0]
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d04a      	beq.n	800248e <HAL_TIM_ConfigClockSource+0xc2>
 80023f8:	d913      	bls.n	8002422 <HAL_TIM_ConfigClockSource+0x56>
 80023fa:	2b60      	cmp	r3, #96	; 0x60
 80023fc:	d03d      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xae>
 80023fe:	d91e      	bls.n	800243e <HAL_TIM_ConfigClockSource+0x72>
 8002400:	2b70      	cmp	r3, #112	; 0x70
 8002402:	d028      	beq.n	8002456 <HAL_TIM_ConfigClockSource+0x8a>
 8002404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002408:	d130      	bne.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	68cb      	ldr	r3, [r1, #12]
 800240c:	684a      	ldr	r2, [r1, #4]
 800240e:	6889      	ldr	r1, [r1, #8]
 8002410:	6800      	ldr	r0, [r0, #0]
 8002412:	f7ff ffcf 	bl	80023b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	6893      	ldr	r3, [r2, #8]
 800241a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241e:	6093      	str	r3, [r2, #8]
      break;
 8002420:	e024      	b.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002422:	2b10      	cmp	r3, #16
 8002424:	d006      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x68>
 8002426:	d904      	bls.n	8002432 <HAL_TIM_ConfigClockSource+0x66>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d003      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x68>
 800242c:	2b30      	cmp	r3, #48	; 0x30
 800242e:	d001      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0x68>
 8002430:	e01c      	b.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
 8002432:	b9db      	cbnz	r3, 800246c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002434:	4619      	mov	r1, r3
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	f7ff fda3 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 800243c:	e016      	b.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800243e:	2b50      	cmp	r3, #80	; 0x50
 8002440:	d114      	bne.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002442:	68ca      	ldr	r2, [r1, #12]
 8002444:	6849      	ldr	r1, [r1, #4]
 8002446:	6800      	ldr	r0, [r0, #0]
 8002448:	f7ff fd74 	bl	8001f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800244c:	2150      	movs	r1, #80	; 0x50
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	f7ff fd97 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 8002454:	e00a      	b.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8002456:	68cb      	ldr	r3, [r1, #12]
 8002458:	684a      	ldr	r2, [r1, #4]
 800245a:	6889      	ldr	r1, [r1, #8]
 800245c:	6800      	ldr	r0, [r0, #0]
 800245e:	f7ff ffa9 	bl	80023b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002462:	6822      	ldr	r2, [r4, #0]
 8002464:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002466:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800246a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800246c:	2301      	movs	r3, #1
 800246e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002472:	2000      	movs	r0, #0
 8002474:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002478:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800247a:	68ca      	ldr	r2, [r1, #12]
 800247c:	6849      	ldr	r1, [r1, #4]
 800247e:	6800      	ldr	r0, [r0, #0]
 8002480:	f7ff fd6b 	bl	8001f5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002484:	2160      	movs	r1, #96	; 0x60
 8002486:	6820      	ldr	r0, [r4, #0]
 8002488:	f7ff fd7b 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 800248c:	e7ee      	b.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	68ca      	ldr	r2, [r1, #12]
 8002490:	6849      	ldr	r1, [r1, #4]
 8002492:	6800      	ldr	r0, [r0, #0]
 8002494:	f7ff fd4e 	bl	8001f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002498:	2140      	movs	r1, #64	; 0x40
 800249a:	6820      	ldr	r0, [r4, #0]
 800249c:	f7ff fd71 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 80024a0:	e7e4      	b.n	800246c <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80024a2:	2002      	movs	r0, #2
}
 80024a4:	4770      	bx	lr

080024a6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024a6:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024a8:	f001 011f 	and.w	r1, r1, #31
 80024ac:	2301      	movs	r3, #1
 80024ae:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024b2:	6a03      	ldr	r3, [r0, #32]
 80024b4:	ea23 0304 	bic.w	r3, r3, r4
 80024b8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024ba:	6a03      	ldr	r3, [r0, #32]
 80024bc:	408a      	lsls	r2, r1
 80024be:	4313      	orrs	r3, r2
 80024c0:	6203      	str	r3, [r0, #32]
}
 80024c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_PWM_Start>:
{
 80024c8:	b510      	push	{r4, lr}
 80024ca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024cc:	2201      	movs	r2, #1
 80024ce:	6800      	ldr	r0, [r0, #0]
 80024d0:	f7ff ffe9 	bl	80024a6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_TIM_PWM_Start+0x3c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d003      	beq.n	80024e4 <HAL_TIM_PWM_Start+0x1c>
 80024dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d103      	bne.n	80024ec <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80024e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	6893      	ldr	r3, [r2, #8]
 80024f0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d003      	beq.n	8002500 <HAL_TIM_PWM_Start+0x38>
    __HAL_TIM_ENABLE(htim);
 80024f8:	6813      	ldr	r3, [r2, #0]
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	2000      	movs	r0, #0
 8002502:	bd10      	pop	{r4, pc}
 8002504:	40010000 	.word	0x40010000

08002508 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002508:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d01c      	beq.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002510:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002512:	2601      	movs	r6, #1
 8002514:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800251e:	6802      	ldr	r2, [r0, #0]
 8002520:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002522:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002524:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002528:	680c      	ldr	r4, [r1, #0]
 800252a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800252c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002530:	684b      	ldr	r3, [r1, #4]
 8002532:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002534:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002536:	6802      	ldr	r2, [r0, #0]
 8002538:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800253a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800253e:	2300      	movs	r3, #0
 8002540:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002544:	4618      	mov	r0, r3
}
 8002546:	bc70      	pop	{r4, r5, r6}
 8002548:	4770      	bx	lr
  __HAL_LOCK(htim);
 800254a:	2002      	movs	r0, #2
}
 800254c:	4770      	bx	lr

0800254e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800254e:	4770      	bx	lr

08002550 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002550:	4770      	bx	lr

08002552 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002552:	6802      	ldr	r2, [r0, #0]
 8002554:	68d3      	ldr	r3, [r2, #12]
 8002556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800255a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255c:	6802      	ldr	r2, [r0, #0]
 800255e:	6953      	ldr	r3, [r2, #20]
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002566:	2320      	movs	r3, #32
 8002568:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800256c:	4770      	bx	lr

0800256e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800256e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b21      	cmp	r3, #33	; 0x21
 8002576:	d12a      	bne.n	80025ce <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002578:	6883      	ldr	r3, [r0, #8]
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257e:	d016      	beq.n	80025ae <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002580:	6a03      	ldr	r3, [r0, #32]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	6202      	str	r2, [r0, #32]
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	6803      	ldr	r3, [r0, #0]
 800258a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800258c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800258e:	3b01      	subs	r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002594:	b9eb      	cbnz	r3, 80025d2 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002596:	6802      	ldr	r2, [r0, #0]
 8002598:	68d3      	ldr	r3, [r2, #12]
 800259a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259e:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80025a0:	6802      	ldr	r2, [r0, #0]
 80025a2:	68d3      	ldr	r3, [r2, #12]
 80025a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a8:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80025aa:	2000      	movs	r0, #0
 80025ac:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80025ae:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	6802      	ldr	r2, [r0, #0]
 80025b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b8:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025ba:	6903      	ldr	r3, [r0, #16]
 80025bc:	b91b      	cbnz	r3, 80025c6 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80025be:	6a03      	ldr	r3, [r0, #32]
 80025c0:	3302      	adds	r3, #2
 80025c2:	6203      	str	r3, [r0, #32]
 80025c4:	e7e2      	b.n	800258c <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80025c6:	6a03      	ldr	r3, [r0, #32]
 80025c8:	3301      	adds	r3, #1
 80025ca:	6203      	str	r3, [r0, #32]
 80025cc:	e7de      	b.n	800258c <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80025ce:	2002      	movs	r0, #2
 80025d0:	4770      	bx	lr
    return HAL_OK;
 80025d2:	2000      	movs	r0, #0
  }
}
 80025d4:	4770      	bx	lr
	...

080025d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025dc:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025de:	6802      	ldr	r2, [r0, #0]
 80025e0:	6913      	ldr	r3, [r2, #16]
 80025e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025e6:	68c1      	ldr	r1, [r0, #12]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ec:	6883      	ldr	r3, [r0, #8]
 80025ee:	6902      	ldr	r2, [r0, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	6942      	ldr	r2, [r0, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	69c2      	ldr	r2, [r0, #28]
 80025f8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80025fa:	6801      	ldr	r1, [r0, #0]
 80025fc:	68cb      	ldr	r3, [r1, #12]
 80025fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002602:	f023 030c 	bic.w	r3, r3, #12
 8002606:	4313      	orrs	r3, r2
 8002608:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800260a:	6802      	ldr	r2, [r0, #0]
 800260c:	6953      	ldr	r3, [r2, #20]
 800260e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002612:	6981      	ldr	r1, [r0, #24]
 8002614:	430b      	orrs	r3, r1
 8002616:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002618:	69c3      	ldr	r3, [r0, #28]
 800261a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261e:	d060      	beq.n	80026e2 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002620:	6803      	ldr	r3, [r0, #0]
 8002622:	4ab8      	ldr	r2, [pc, #736]	; (8002904 <UART_SetConfig+0x32c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	f000 8114 	beq.w	8002852 <UART_SetConfig+0x27a>
 800262a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800262e:	4293      	cmp	r3, r2
 8002630:	f000 810f 	beq.w	8002852 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002634:	f7ff f956 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002638:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800263c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002640:	6865      	ldr	r5, [r4, #4]
 8002642:	00ad      	lsls	r5, r5, #2
 8002644:	fbb0 f5f5 	udiv	r5, r0, r5
 8002648:	4faf      	ldr	r7, [pc, #700]	; (8002908 <UART_SetConfig+0x330>)
 800264a:	fba7 3505 	umull	r3, r5, r7, r5
 800264e:	096d      	lsrs	r5, r5, #5
 8002650:	012e      	lsls	r6, r5, #4
 8002652:	f7ff f947 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002656:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800265a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800265e:	6865      	ldr	r5, [r4, #4]
 8002660:	00ad      	lsls	r5, r5, #2
 8002662:	fbb0 f9f5 	udiv	r9, r0, r5
 8002666:	f7ff f93d 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 800266a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800266e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002672:	6865      	ldr	r5, [r4, #4]
 8002674:	00ad      	lsls	r5, r5, #2
 8002676:	fbb0 f5f5 	udiv	r5, r0, r5
 800267a:	fba7 3505 	umull	r3, r5, r7, r5
 800267e:	096d      	lsrs	r5, r5, #5
 8002680:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002684:	fb08 9515 	mls	r5, r8, r5, r9
 8002688:	012d      	lsls	r5, r5, #4
 800268a:	3532      	adds	r5, #50	; 0x32
 800268c:	fba7 3505 	umull	r3, r5, r7, r5
 8002690:	096d      	lsrs	r5, r5, #5
 8002692:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002696:	4435      	add	r5, r6
 8002698:	f7ff f924 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 800269c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026a4:	6866      	ldr	r6, [r4, #4]
 80026a6:	00b6      	lsls	r6, r6, #2
 80026a8:	fbb0 f6f6 	udiv	r6, r0, r6
 80026ac:	f7ff f91a 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 80026b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80026c0:	fba7 3000 	umull	r3, r0, r7, r0
 80026c4:	0940      	lsrs	r0, r0, #5
 80026c6:	fb08 6810 	mls	r8, r8, r0, r6
 80026ca:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80026ce:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80026d2:	fba7 3708 	umull	r3, r7, r7, r8
 80026d6:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	442f      	add	r7, r5
 80026de:	609f      	str	r7, [r3, #8]
    }
  }
}
 80026e0:	e10d      	b.n	80028fe <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026e2:	6803      	ldr	r3, [r0, #0]
 80026e4:	4a87      	ldr	r2, [pc, #540]	; (8002904 <UART_SetConfig+0x32c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d05b      	beq.n	80027a2 <UART_SetConfig+0x1ca>
 80026ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d057      	beq.n	80027a2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026f2:	f7ff f8f7 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 80026f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026fe:	6865      	ldr	r5, [r4, #4]
 8002700:	006d      	lsls	r5, r5, #1
 8002702:	fbb0 f5f5 	udiv	r5, r0, r5
 8002706:	4f80      	ldr	r7, [pc, #512]	; (8002908 <UART_SetConfig+0x330>)
 8002708:	fba7 3505 	umull	r3, r5, r7, r5
 800270c:	096d      	lsrs	r5, r5, #5
 800270e:	012e      	lsls	r6, r5, #4
 8002710:	f7ff f8e8 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002714:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002718:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800271c:	6865      	ldr	r5, [r4, #4]
 800271e:	006d      	lsls	r5, r5, #1
 8002720:	fbb0 f9f5 	udiv	r9, r0, r5
 8002724:	f7ff f8de 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002728:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800272c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002730:	6865      	ldr	r5, [r4, #4]
 8002732:	006d      	lsls	r5, r5, #1
 8002734:	fbb0 f5f5 	udiv	r5, r0, r5
 8002738:	fba7 3505 	umull	r3, r5, r7, r5
 800273c:	096d      	lsrs	r5, r5, #5
 800273e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002742:	fb08 9515 	mls	r5, r8, r5, r9
 8002746:	00ed      	lsls	r5, r5, #3
 8002748:	3532      	adds	r5, #50	; 0x32
 800274a:	fba7 3505 	umull	r3, r5, r7, r5
 800274e:	096d      	lsrs	r5, r5, #5
 8002750:	006d      	lsls	r5, r5, #1
 8002752:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002756:	4435      	add	r5, r6
 8002758:	f7ff f8c4 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 800275c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002764:	6866      	ldr	r6, [r4, #4]
 8002766:	0076      	lsls	r6, r6, #1
 8002768:	fbb0 f6f6 	udiv	r6, r0, r6
 800276c:	f7ff f8ba 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002770:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002774:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002780:	fba7 2303 	umull	r2, r3, r7, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	fb08 6813 	mls	r8, r8, r3, r6
 800278a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800278e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002792:	fba7 3708 	umull	r3, r7, r7, r8
 8002796:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	442f      	add	r7, r5
 800279e:	609f      	str	r7, [r3, #8]
 80027a0:	e0ad      	b.n	80028fe <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027a2:	f7ff f8af 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 80027a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027ae:	6865      	ldr	r5, [r4, #4]
 80027b0:	006d      	lsls	r5, r5, #1
 80027b2:	fbb0 f5f5 	udiv	r5, r0, r5
 80027b6:	4f54      	ldr	r7, [pc, #336]	; (8002908 <UART_SetConfig+0x330>)
 80027b8:	fba7 3505 	umull	r3, r5, r7, r5
 80027bc:	096d      	lsrs	r5, r5, #5
 80027be:	012e      	lsls	r6, r5, #4
 80027c0:	f7ff f8a0 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 80027c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027cc:	6865      	ldr	r5, [r4, #4]
 80027ce:	006d      	lsls	r5, r5, #1
 80027d0:	fbb0 f9f5 	udiv	r9, r0, r5
 80027d4:	f7ff f896 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 80027d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027e0:	6865      	ldr	r5, [r4, #4]
 80027e2:	006d      	lsls	r5, r5, #1
 80027e4:	fbb0 f5f5 	udiv	r5, r0, r5
 80027e8:	fba7 3505 	umull	r3, r5, r7, r5
 80027ec:	096d      	lsrs	r5, r5, #5
 80027ee:	f04f 0864 	mov.w	r8, #100	; 0x64
 80027f2:	fb08 9515 	mls	r5, r8, r5, r9
 80027f6:	00ed      	lsls	r5, r5, #3
 80027f8:	3532      	adds	r5, #50	; 0x32
 80027fa:	fba7 3505 	umull	r3, r5, r7, r5
 80027fe:	096d      	lsrs	r5, r5, #5
 8002800:	006d      	lsls	r5, r5, #1
 8002802:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8002806:	4435      	add	r5, r6
 8002808:	f7ff f87c 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 800280c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002810:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002814:	6866      	ldr	r6, [r4, #4]
 8002816:	0076      	lsls	r6, r6, #1
 8002818:	fbb0 f6f6 	udiv	r6, r0, r6
 800281c:	f7ff f872 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8002820:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002824:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002830:	fba7 2303 	umull	r2, r3, r7, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	fb08 6813 	mls	r8, r8, r3, r6
 800283a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800283e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002842:	fba7 3708 	umull	r3, r7, r7, r8
 8002846:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	442f      	add	r7, r5
 800284e:	609f      	str	r7, [r3, #8]
 8002850:	e055      	b.n	80028fe <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002852:	f7ff f857 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8002856:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800285a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800285e:	6865      	ldr	r5, [r4, #4]
 8002860:	00ad      	lsls	r5, r5, #2
 8002862:	fbb0 f5f5 	udiv	r5, r0, r5
 8002866:	4f28      	ldr	r7, [pc, #160]	; (8002908 <UART_SetConfig+0x330>)
 8002868:	fba7 3505 	umull	r3, r5, r7, r5
 800286c:	096d      	lsrs	r5, r5, #5
 800286e:	012e      	lsls	r6, r5, #4
 8002870:	f7ff f848 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8002874:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002878:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800287c:	6865      	ldr	r5, [r4, #4]
 800287e:	00ad      	lsls	r5, r5, #2
 8002880:	fbb0 f9f5 	udiv	r9, r0, r5
 8002884:	f7ff f83e 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8002888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800288c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002890:	6865      	ldr	r5, [r4, #4]
 8002892:	00ad      	lsls	r5, r5, #2
 8002894:	fbb0 f5f5 	udiv	r5, r0, r5
 8002898:	fba7 3505 	umull	r3, r5, r7, r5
 800289c:	096d      	lsrs	r5, r5, #5
 800289e:	f04f 0864 	mov.w	r8, #100	; 0x64
 80028a2:	fb08 9515 	mls	r5, r8, r5, r9
 80028a6:	012d      	lsls	r5, r5, #4
 80028a8:	3532      	adds	r5, #50	; 0x32
 80028aa:	fba7 3505 	umull	r3, r5, r7, r5
 80028ae:	096d      	lsrs	r5, r5, #5
 80028b0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80028b4:	4435      	add	r5, r6
 80028b6:	f7ff f825 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 80028ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028c2:	6866      	ldr	r6, [r4, #4]
 80028c4:	00b6      	lsls	r6, r6, #2
 80028c6:	fbb0 f6f6 	udiv	r6, r0, r6
 80028ca:	f7ff f81b 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 80028ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	fbb0 f0f3 	udiv	r0, r0, r3
 80028de:	fba7 3000 	umull	r3, r0, r7, r0
 80028e2:	0940      	lsrs	r0, r0, #5
 80028e4:	fb08 6810 	mls	r8, r8, r0, r6
 80028e8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80028ec:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80028f0:	fba7 3708 	umull	r3, r7, r7, r8
 80028f4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	442f      	add	r7, r5
 80028fc:	609f      	str	r7, [r3, #8]
}
 80028fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002902:	bf00      	nop
 8002904:	40011000 	.word	0x40011000
 8002908:	51eb851f 	.word	0x51eb851f

0800290c <UART_WaitOnFlagUntilTimeout>:
{
 800290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002910:	4605      	mov	r5, r0
 8002912:	460f      	mov	r7, r1
 8002914:	4616      	mov	r6, r2
 8002916:	4698      	mov	r8, r3
 8002918:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	ea37 0303 	bics.w	r3, r7, r3
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	42b3      	cmp	r3, r6
 800292a:	d11d      	bne.n	8002968 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800292c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002930:	d0f3      	beq.n	800291a <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002932:	b12c      	cbz	r4, 8002940 <UART_WaitOnFlagUntilTimeout+0x34>
 8002934:	f7fd fe86 	bl	8000644 <HAL_GetTick>
 8002938:	eba0 0008 	sub.w	r0, r0, r8
 800293c:	42a0      	cmp	r0, r4
 800293e:	d9ec      	bls.n	800291a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002940:	682a      	ldr	r2, [r5, #0]
 8002942:	68d3      	ldr	r3, [r2, #12]
 8002944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002948:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294a:	682a      	ldr	r2, [r5, #0]
 800294c:	6953      	ldr	r3, [r2, #20]
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002954:	2320      	movs	r3, #32
 8002956:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800295a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800295e:	2300      	movs	r3, #0
 8002960:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002964:	2003      	movs	r0, #3
 8002966:	e000      	b.n	800296a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8002968:	2000      	movs	r0, #0
}
 800296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800296e <HAL_UART_Init>:
  if (huart == NULL)
 800296e:	b358      	cbz	r0, 80029c8 <HAL_UART_Init+0x5a>
{
 8002970:	b510      	push	{r4, lr}
 8002972:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002974:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002978:	b30b      	cbz	r3, 80029be <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800297a:	2324      	movs	r3, #36	; 0x24
 800297c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002980:	6822      	ldr	r2, [r4, #0]
 8002982:	68d3      	ldr	r3, [r2, #12]
 8002984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002988:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff fe24 	bl	80025d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002990:	6822      	ldr	r2, [r4, #0]
 8002992:	6913      	ldr	r3, [r2, #16]
 8002994:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002998:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	6953      	ldr	r3, [r2, #20]
 800299e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80029a2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80029a4:	6822      	ldr	r2, [r4, #0]
 80029a6:	68d3      	ldr	r3, [r2, #12]
 80029a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ac:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ae:	2000      	movs	r0, #0
 80029b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029b2:	2320      	movs	r3, #32
 80029b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80029bc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80029be:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80029c2:	f000 fdaf 	bl	8003524 <HAL_UART_MspInit>
 80029c6:	e7d8      	b.n	800297a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
}
 80029ca:	4770      	bx	lr

080029cc <HAL_UART_Transmit>:
{
 80029cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80029d4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d155      	bne.n	8002a8a <HAL_UART_Transmit+0xbe>
 80029de:	4604      	mov	r4, r0
 80029e0:	460d      	mov	r5, r1
 80029e2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80029e4:	2900      	cmp	r1, #0
 80029e6:	d055      	beq.n	8002a94 <HAL_UART_Transmit+0xc8>
 80029e8:	2a00      	cmp	r2, #0
 80029ea:	d055      	beq.n	8002a98 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80029ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d053      	beq.n	8002a9c <HAL_UART_Transmit+0xd0>
 80029f4:	2301      	movs	r3, #1
 80029f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029fe:	2321      	movs	r3, #33	; 0x21
 8002a00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002a04:	f7fd fe1e 	bl	8000644 <HAL_GetTick>
 8002a08:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002a0a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a0e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a12:	e010      	b.n	8002a36 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a14:	9600      	str	r6, [sp, #0]
 8002a16:	463b      	mov	r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7ff ff75 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d13c      	bne.n	8002aa0 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a26:	882b      	ldrh	r3, [r5, #0]
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a30:	6923      	ldr	r3, [r4, #16]
 8002a32:	b9c3      	cbnz	r3, 8002a66 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8002a34:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8002a36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	b1b3      	cbz	r3, 8002a6a <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8002a3c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a44:	68a3      	ldr	r3, [r4, #8]
 8002a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4a:	d0e3      	beq.n	8002a14 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	9600      	str	r6, [sp, #0]
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	; 0x80
 8002a54:	4620      	mov	r0, r4
 8002a56:	f7ff ff59 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002a5a:	bb18      	cbnz	r0, 8002aa4 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a5c:	782a      	ldrb	r2, [r5, #0]
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	3501      	adds	r5, #1
 8002a64:	e7e7      	b.n	8002a36 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8002a66:	3501      	adds	r5, #1
 8002a68:	e7e5      	b.n	8002a36 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	9600      	str	r6, [sp, #0]
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2140      	movs	r1, #64	; 0x40
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff ff4a 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	b9a8      	cbnz	r0, 8002aa8 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002a88:	e000      	b.n	8002a8c <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	b002      	add	sp, #8
 8002a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e7f9      	b.n	8002a8c <HAL_UART_Transmit+0xc0>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e7f7      	b.n	8002a8c <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e7f5      	b.n	8002a8c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e7f3      	b.n	8002a8c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e7f1      	b.n	8002a8c <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e7ef      	b.n	8002a8c <HAL_UART_Transmit+0xc0>

08002aac <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aac:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d120      	bne.n	8002af8 <HAL_UART_Receive_IT+0x4c>
    if ((pData == NULL) || (Size == 0U))
 8002ab6:	b309      	cbz	r1, 8002afc <HAL_UART_Receive_IT+0x50>
 8002ab8:	b312      	cbz	r2, 8002b00 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8002aba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d020      	beq.n	8002b04 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8002ac2:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8002ac4:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ac6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002acc:	2222      	movs	r2, #34	; 0x22
 8002ace:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002ad2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ad6:	6801      	ldr	r1, [r0, #0]
 8002ad8:	68ca      	ldr	r2, [r1, #12]
 8002ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ade:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ae0:	6801      	ldr	r1, [r0, #0]
 8002ae2:	694a      	ldr	r2, [r1, #20]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002aea:	6801      	ldr	r1, [r0, #0]
 8002aec:	68ca      	ldr	r2, [r1, #12]
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8002af4:	4618      	mov	r0, r3
 8002af6:	4770      	bx	lr
    return HAL_BUSY;
 8002af8:	2002      	movs	r0, #2
 8002afa:	4770      	bx	lr
      return HAL_ERROR;
 8002afc:	2001      	movs	r0, #1
 8002afe:	4770      	bx	lr
 8002b00:	2001      	movs	r0, #1
 8002b02:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002b04:	2002      	movs	r0, #2
}
 8002b06:	4770      	bx	lr

08002b08 <HAL_UART_TxCpltCallback>:
}
 8002b08:	4770      	bx	lr

08002b0a <UART_EndTransmit_IT>:
{
 8002b0a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b0c:	6801      	ldr	r1, [r0, #0]
 8002b0e:	68cb      	ldr	r3, [r1, #12]
 8002b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b14:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002b16:	2320      	movs	r3, #32
 8002b18:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002b1c:	f7ff fff4 	bl	8002b08 <HAL_UART_TxCpltCallback>
}
 8002b20:	2000      	movs	r0, #0
 8002b22:	bd08      	pop	{r3, pc}

08002b24 <UART_Receive_IT>:
{
 8002b24:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b26:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b22      	cmp	r3, #34	; 0x22
 8002b2e:	d145      	bne.n	8002bbc <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b30:	6883      	ldr	r3, [r0, #8]
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b36:	d00e      	beq.n	8002b56 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b38:	6903      	ldr	r3, [r0, #16]
 8002b3a:	bb03      	cbnz	r3, 8002b7e <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b42:	1c59      	adds	r1, r3, #1
 8002b44:	6281      	str	r1, [r0, #40]	; 0x28
 8002b46:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002b48:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002b50:	b1f3      	cbz	r3, 8002b90 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8002b52:	2000      	movs	r0, #0
 8002b54:	e033      	b.n	8002bbe <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002b56:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b58:	6903      	ldr	r3, [r0, #16]
 8002b5a:	b943      	cbnz	r3, 8002b6e <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b5c:	6803      	ldr	r3, [r0, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002b66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b68:	3302      	adds	r3, #2
 8002b6a:	6283      	str	r3, [r0, #40]	; 0x28
 8002b6c:	e7ec      	b.n	8002b48 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b6e:	6803      	ldr	r3, [r0, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002b76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b78:	3301      	adds	r3, #1
 8002b7a:	6283      	str	r3, [r0, #40]	; 0x28
 8002b7c:	e7e4      	b.n	8002b48 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b7e:	6803      	ldr	r3, [r0, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002b84:	1c51      	adds	r1, r2, #1
 8002b86:	6281      	str	r1, [r0, #40]	; 0x28
 8002b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b8c:	7013      	strb	r3, [r2, #0]
 8002b8e:	e7db      	b.n	8002b48 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b90:	6802      	ldr	r2, [r0, #0]
 8002b92:	68d3      	ldr	r3, [r2, #12]
 8002b94:	f023 0320 	bic.w	r3, r3, #32
 8002b98:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b9a:	6802      	ldr	r2, [r0, #0]
 8002b9c:	68d3      	ldr	r3, [r2, #12]
 8002b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ba4:	6802      	ldr	r2, [r0, #0]
 8002ba6:	6953      	ldr	r3, [r2, #20]
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002bb4:	f000 f946 	bl	8002e44 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002bb8:	2000      	movs	r0, #0
 8002bba:	e000      	b.n	8002bbe <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8002bbc:	2002      	movs	r0, #2
}
 8002bbe:	bd08      	pop	{r3, pc}

08002bc0 <HAL_UART_ErrorCallback>:
}
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_UART_IRQHandler>:
{
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bc8:	6802      	ldr	r2, [r0, #0]
 8002bca:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bcc:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bce:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002bd0:	f013 000f 	ands.w	r0, r3, #15
 8002bd4:	d105      	bne.n	8002be2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd6:	f013 0f20 	tst.w	r3, #32
 8002bda:	d002      	beq.n	8002be2 <HAL_UART_IRQHandler+0x1e>
 8002bdc:	f011 0f20 	tst.w	r1, #32
 8002be0:	d153      	bne.n	8002c8a <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002be2:	2800      	cmp	r0, #0
 8002be4:	d067      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xf2>
 8002be6:	f012 0201 	ands.w	r2, r2, #1
 8002bea:	d102      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x2e>
 8002bec:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002bf0:	d061      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bf2:	f013 0f01 	tst.w	r3, #1
 8002bf6:	d006      	beq.n	8002c06 <HAL_UART_IRQHandler+0x42>
 8002bf8:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002bfc:	d003      	beq.n	8002c06 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c00:	f040 0001 	orr.w	r0, r0, #1
 8002c04:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c06:	f013 0f04 	tst.w	r3, #4
 8002c0a:	d004      	beq.n	8002c16 <HAL_UART_IRQHandler+0x52>
 8002c0c:	b11a      	cbz	r2, 8002c16 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c10:	f040 0002 	orr.w	r0, r0, #2
 8002c14:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c16:	f013 0f02 	tst.w	r3, #2
 8002c1a:	d004      	beq.n	8002c26 <HAL_UART_IRQHandler+0x62>
 8002c1c:	b11a      	cbz	r2, 8002c26 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c20:	f040 0004 	orr.w	r0, r0, #4
 8002c24:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c26:	f013 0f08 	tst.w	r3, #8
 8002c2a:	d004      	beq.n	8002c36 <HAL_UART_IRQHandler+0x72>
 8002c2c:	b11a      	cbz	r2, 8002c36 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c30:	f042 0208 	orr.w	r2, r2, #8
 8002c34:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	d048      	beq.n	8002cce <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c3c:	f013 0f20 	tst.w	r3, #32
 8002c40:	d002      	beq.n	8002c48 <HAL_UART_IRQHandler+0x84>
 8002c42:	f011 0f20 	tst.w	r1, #32
 8002c46:	d124      	bne.n	8002c92 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c52:	f012 0f08 	tst.w	r2, #8
 8002c56:	d100      	bne.n	8002c5a <HAL_UART_IRQHandler+0x96>
 8002c58:	b33b      	cbz	r3, 8002caa <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7ff fc79 	bl	8002552 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c68:	d01b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c70:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c74:	b18b      	cbz	r3, 8002c9a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c76:	4a1a      	ldr	r2, [pc, #104]	; (8002ce0 <HAL_UART_IRQHandler+0x11c>)
 8002c78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c7c:	f7fd fe32 	bl	80008e4 <HAL_DMA_Abort_IT>
 8002c80:	b328      	cbz	r0, 8002cce <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c82:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002c84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c86:	4798      	blx	r3
 8002c88:	e021      	b.n	8002cce <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f7ff ff4a 	bl	8002b24 <UART_Receive_IT>
      return;
 8002c90:	e01d      	b.n	8002cce <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8002c92:	4620      	mov	r0, r4
 8002c94:	f7ff ff46 	bl	8002b24 <UART_Receive_IT>
 8002c98:	e7d6      	b.n	8002c48 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7ff ff90 	bl	8002bc0 <HAL_UART_ErrorCallback>
 8002ca0:	e015      	b.n	8002cce <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff ff8c 	bl	8002bc0 <HAL_UART_ErrorCallback>
 8002ca8:	e011      	b.n	8002cce <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8002caa:	4620      	mov	r0, r4
 8002cac:	f7ff ff88 	bl	8002bc0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002cb4:	e00b      	b.n	8002cce <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002cba:	d002      	beq.n	8002cc2 <HAL_UART_IRQHandler+0xfe>
 8002cbc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002cc0:	d106      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cc2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002cc6:	d002      	beq.n	8002cce <HAL_UART_IRQHandler+0x10a>
 8002cc8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x114>
}
 8002cce:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff fc4c 	bl	800256e <UART_Transmit_IT>
    return;
 8002cd6:	e7fa      	b.n	8002cce <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f7ff ff16 	bl	8002b0a <UART_EndTransmit_IT>
    return;
 8002cde:	e7f6      	b.n	8002cce <HAL_UART_IRQHandler+0x10a>
 8002ce0:	08002ce5 	.word	0x08002ce5

08002ce4 <UART_DMAAbortOnError>:
{
 8002ce4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002cee:	f7ff ff67 	bl	8002bc0 <HAL_UART_ErrorCallback>
}
 8002cf2:	bd08      	pop	{r3, pc}

08002cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	2400      	movs	r4, #0
 8002cfa:	9403      	str	r4, [sp, #12]
 8002cfc:	9404      	str	r4, [sp, #16]
 8002cfe:	9405      	str	r4, [sp, #20]
 8002d00:	9406      	str	r4, [sp, #24]
 8002d02:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d04:	9400      	str	r4, [sp, #0]
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <MX_GPIO_Init+0xa8>)
 8002d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0a:	f042 0204 	orr.w	r2, r2, #4
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	f002 0204 	and.w	r2, r2, #4
 8002d16:	9200      	str	r2, [sp, #0]
 8002d18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	9401      	str	r4, [sp, #4]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
 8002d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d26:	f002 0201 	and.w	r2, r2, #1
 8002d2a:	9201      	str	r2, [sp, #4]
 8002d2c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	9402      	str	r4, [sp, #8]
 8002d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d32:	f042 0202 	orr.w	r2, r2, #2
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	9302      	str	r3, [sp, #8]
 8002d40:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002d42:	4f17      	ldr	r7, [pc, #92]	; (8002da0 <MX_GPIO_Init+0xac>)
 8002d44:	4622      	mov	r2, r4
 8002d46:	2120      	movs	r1, #32
 8002d48:	4638      	mov	r0, r7
 8002d4a:	f7fd ffb2 	bl	8000cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002d4e:	4d15      	ldr	r5, [pc, #84]	; (8002da4 <MX_GPIO_Init+0xb0>)
 8002d50:	4622      	mov	r2, r4
 8002d52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d56:	4628      	mov	r0, r5
 8002d58:	f7fd ffab 	bl	8000cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 
                           PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002d5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002d60:	9303      	str	r3, [sp, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d62:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	a903      	add	r1, sp, #12
 8002d68:	4628      	mov	r0, r5
 8002d6a:	f7fd febd 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d72:	2601      	movs	r6, #1
 8002d74:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	a903      	add	r1, sp, #12
 8002d7c:	4638      	mov	r0, r7
 8002d7e:	f7fd feb3 	bl	8000ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d86:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d88:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8e:	a903      	add	r1, sp, #12
 8002d90:	4628      	mov	r0, r5
 8002d92:	f7fd fea9 	bl	8000ae8 <HAL_GPIO_Init>

}
 8002d96:	b009      	add	sp, #36	; 0x24
 8002d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020800 	.word	0x40020800

08002da8 <MX_DMA_Init>:
{
 8002da8:	b500      	push	{lr}
 8002daa:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dac:	2100      	movs	r1, #0
 8002dae:	9101      	str	r1, [sp, #4]
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <MX_DMA_Init+0x30>)
 8002db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	2011      	movs	r0, #17
 8002dc8:	f7fd fc68 	bl	800069c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002dcc:	2011      	movs	r0, #17
 8002dce:	f7fd fc99 	bl	8000704 <HAL_NVIC_EnableIRQ>
}
 8002dd2:	b003      	add	sp, #12
 8002dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd8:	40023800 	.word	0x40023800

08002ddc <init>:
void init() {
 8002ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de0:	b084      	sub	sp, #16
	for(int i = 0; i < 198 ; i ++){
 8002de2:	2500      	movs	r5, #0
 8002de4:	e022      	b.n	8002e2c <init+0x50>
		HAL_I2C_Mem_Write(&hi2c2, (0x21<<1), OV7670_reg[i][0], 1, &OV7670_reg[i][1], 1, 100);
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <init+0x5c>)
 8002de8:	f813 7015 	ldrb.w	r7, [r3, r5, lsl #1]
 8002dec:	006a      	lsls	r2, r5, #1
 8002dee:	3201      	adds	r2, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	4e12      	ldr	r6, [pc, #72]	; (8002e3c <init+0x60>)
 8002df4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002df8:	f8cd 8008 	str.w	r8, [sp, #8]
 8002dfc:	2401      	movs	r4, #1
 8002dfe:	9401      	str	r4, [sp, #4]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	4623      	mov	r3, r4
 8002e04:	463a      	mov	r2, r7
 8002e06:	2142      	movs	r1, #66	; 0x42
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f7fe fa5d 	bl	80012c8 <HAL_I2C_Mem_Write>
		HAL_Delay(1);
 8002e0e:	4620      	mov	r0, r4
 8002e10:	f7fd fc1e 	bl	8000650 <HAL_Delay>
		HAL_I2C_Mem_Read(&hi2c2, (0x21<<1), OV7670_reg[i][0], 1, &data, 1, 100);
 8002e14:	f8cd 8008 	str.w	r8, [sp, #8]
 8002e18:	9401      	str	r4, [sp, #4]
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <init+0x64>)
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	4623      	mov	r3, r4
 8002e20:	463a      	mov	r2, r7
 8002e22:	2142      	movs	r1, #66	; 0x42
 8002e24:	4630      	mov	r0, r6
 8002e26:	f7fe fb03 	bl	8001430 <HAL_I2C_Mem_Read>
	for(int i = 0; i < 198 ; i ++){
 8002e2a:	4425      	add	r5, r4
 8002e2c:	2dc5      	cmp	r5, #197	; 0xc5
 8002e2e:	ddda      	ble.n	8002de6 <init+0xa>
}
 8002e30:	b004      	add	sp, #16
 8002e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e36:	bf00      	nop
 8002e38:	08004ca0 	.word	0x08004ca0
 8002e3c:	20000218 	.word	0x20000218
 8002e40:	20012f10 	.word	0x20012f10

08002e44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e48:	b08d      	sub	sp, #52	; 0x34
	char * token = strtok(Received, ",");
 8002e4a:	4c33      	ldr	r4, [pc, #204]	; (8002f18 <HAL_UART_RxCpltCallback+0xd4>)
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	4833      	ldr	r0, [pc, #204]	; (8002f1c <HAL_UART_RxCpltCallback+0xd8>)
 8002e50:	f000 fdae 	bl	80039b0 <strtok>
	uint8_t reg = atoi(token,10);
 8002e54:	210a      	movs	r1, #10
 8002e56:	f000 fcbe 	bl	80037d6 <atoi>
 8002e5a:	b2c7      	uxtb	r7, r0
	token = strtok(NULL, ",");
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f000 fda6 	bl	80039b0 <strtok>
	uint8_t val = atoi(token, 10);
 8002e64:	210a      	movs	r1, #10
 8002e66:	f000 fcb6 	bl	80037d6 <atoi>
 8002e6a:	fa5f fb80 	uxtb.w	fp, r0

	uint8_t string_size;

	uint8_t string_to_send[32];
	string_size = sprintf(string_to_send, "reg: %d, val: %d\n\r", reg, val);
 8002e6e:	465b      	mov	r3, fp
 8002e70:	463a      	mov	r2, r7
 8002e72:	492b      	ldr	r1, [pc, #172]	; (8002f20 <HAL_UART_RxCpltCallback+0xdc>)
 8002e74:	a804      	add	r0, sp, #16
 8002e76:	f000 fd7b 	bl	8003970 <siprintf>
	HAL_UART_Transmit(&huart1, string_to_send, string_size, 100);
 8002e7a:	4e2a      	ldr	r6, [pc, #168]	; (8002f24 <HAL_UART_RxCpltCallback+0xe0>)
 8002e7c:	2364      	movs	r3, #100	; 0x64
 8002e7e:	b2c2      	uxtb	r2, r0
 8002e80:	a904      	add	r1, sp, #16
 8002e82:	4630      	mov	r0, r6
 8002e84:	f7ff fda2 	bl	80029cc <HAL_UART_Transmit>

	HAL_I2C_Mem_Read(&hi2c2, (0x21<<1), reg, 1, &data, 1, 100);
 8002e88:	fa1f fa87 	uxth.w	sl, r7
 8002e8c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8002f30 <HAL_UART_RxCpltCallback+0xec>
 8002e90:	2564      	movs	r5, #100	; 0x64
 8002e92:	9502      	str	r5, [sp, #8]
 8002e94:	2401      	movs	r4, #1
 8002e96:	9401      	str	r4, [sp, #4]
 8002e98:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002f34 <HAL_UART_RxCpltCallback+0xf0>
 8002e9c:	f8cd 8000 	str.w	r8, [sp]
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	4652      	mov	r2, sl
 8002ea4:	2142      	movs	r1, #66	; 0x42
 8002ea6:	4648      	mov	r0, r9
 8002ea8:	f7fe fac2 	bl	8001430 <HAL_I2C_Mem_Read>
	string_size = sprintf(string_to_send, "before reg: %d, val: %d\n\r", reg, data);
 8002eac:	f898 3000 	ldrb.w	r3, [r8]
 8002eb0:	463a      	mov	r2, r7
 8002eb2:	491d      	ldr	r1, [pc, #116]	; (8002f28 <HAL_UART_RxCpltCallback+0xe4>)
 8002eb4:	a804      	add	r0, sp, #16
 8002eb6:	f000 fd5b 	bl	8003970 <siprintf>
	HAL_UART_Transmit(&huart1, string_to_send, string_size, 100);
 8002eba:	462b      	mov	r3, r5
 8002ebc:	b2c2      	uxtb	r2, r0
 8002ebe:	a904      	add	r1, sp, #16
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f7ff fd83 	bl	80029cc <HAL_UART_Transmit>

	HAL_I2C_Mem_Write(&hi2c2, (0x21<<1), reg, 1, val, 1, 100);
 8002ec6:	9502      	str	r5, [sp, #8]
 8002ec8:	9401      	str	r4, [sp, #4]
 8002eca:	f8cd b000 	str.w	fp, [sp]
 8002ece:	4623      	mov	r3, r4
 8002ed0:	4652      	mov	r2, sl
 8002ed2:	2142      	movs	r1, #66	; 0x42
 8002ed4:	4648      	mov	r0, r9
 8002ed6:	f7fe f9f7 	bl	80012c8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c2, (0x21<<1), reg, 1, &data, 1, 100);
 8002eda:	9502      	str	r5, [sp, #8]
 8002edc:	9401      	str	r4, [sp, #4]
 8002ede:	f8cd 8000 	str.w	r8, [sp]
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	4652      	mov	r2, sl
 8002ee6:	2142      	movs	r1, #66	; 0x42
 8002ee8:	4648      	mov	r0, r9
 8002eea:	f7fe faa1 	bl	8001430 <HAL_I2C_Mem_Read>
	string_size = sprintf(string_to_send, "after reg: %d, val: %d\n\r", reg, data);
 8002eee:	f898 3000 	ldrb.w	r3, [r8]
 8002ef2:	463a      	mov	r2, r7
 8002ef4:	490d      	ldr	r1, [pc, #52]	; (8002f2c <HAL_UART_RxCpltCallback+0xe8>)
 8002ef6:	a804      	add	r0, sp, #16
 8002ef8:	f000 fd3a 	bl	8003970 <siprintf>
	HAL_UART_Transmit(&huart1, string_to_send, string_size, 100);
 8002efc:	462b      	mov	r3, r5
 8002efe:	b2c2      	uxtb	r2, r0
 8002f00:	a904      	add	r1, sp, #16
 8002f02:	4630      	mov	r0, r6
 8002f04:	f7ff fd62 	bl	80029cc <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart1, &Received, UART_BUFFER_SIZE); // Ponowne włączenie nasłuchiwania
 8002f08:	2207      	movs	r2, #7
 8002f0a:	4904      	ldr	r1, [pc, #16]	; (8002f1c <HAL_UART_RxCpltCallback+0xd8>)
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f7ff fdcd 	bl	8002aac <HAL_UART_Receive_IT>
}
 8002f12:	b00d      	add	sp, #52	; 0x34
 8002f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f18:	08005044 	.word	0x08005044
 8002f1c:	2000020c 	.word	0x2000020c
 8002f20:	08004fd0 	.word	0x08004fd0
 8002f24:	20012ed0 	.word	0x20012ed0
 8002f28:	08004fe4 	.word	0x08004fe4
 8002f2c:	08005000 	.word	0x08005000
 8002f30:	20000218 	.word	0x20000218
 8002f34:	20012f10 	.word	0x20012f10

08002f38 <__io_putchar>:
    while (DWT->CYCCNT - startTick < delayTicks);
}


PUTCHAR_PROTOTYPE
{
 8002f38:	b500      	push	{lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	a902      	add	r1, sp, #8
 8002f3e:	f841 0d04 	str.w	r0, [r1, #-4]!
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 8002f42:	2301      	movs	r3, #1
 8002f44:	461a      	mov	r2, r3
 8002f46:	4803      	ldr	r0, [pc, #12]	; (8002f54 <__io_putchar+0x1c>)
 8002f48:	f7ff fd40 	bl	80029cc <HAL_UART_Transmit>

return ch;
}
 8002f4c:	9801      	ldr	r0, [sp, #4]
 8002f4e:	b003      	add	sp, #12
 8002f50:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f54:	20012f94 	.word	0x20012f94

08002f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("ERROR!");
 8002f5a:	4802      	ldr	r0, [pc, #8]	; (8002f64 <Error_Handler+0xc>)
 8002f5c:	f000 fc8c 	bl	8003878 <iprintf>

  /* USER CODE END Error_Handler_Debug */
}
 8002f60:	bd08      	pop	{r3, pc}
 8002f62:	bf00      	nop
 8002f64:	0800501c 	.word	0x0800501c

08002f68 <MX_I2C2_Init>:
{
 8002f68:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8002f6a:	480b      	ldr	r0, [pc, #44]	; (8002f98 <MX_I2C2_Init+0x30>)
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <MX_I2C2_Init+0x34>)
 8002f6e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <MX_I2C2_Init+0x38>)
 8002f72:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f74:	2300      	movs	r3, #0
 8002f76:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002f78:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f7e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f80:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002f82:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f84:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f86:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f88:	f7fe f8ce 	bl	8001128 <HAL_I2C_Init>
 8002f8c:	b900      	cbnz	r0, 8002f90 <MX_I2C2_Init+0x28>
}
 8002f8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f90:	f7ff ffe2 	bl	8002f58 <Error_Handler>
}
 8002f94:	e7fb      	b.n	8002f8e <MX_I2C2_Init+0x26>
 8002f96:	bf00      	nop
 8002f98:	20000218 	.word	0x20000218
 8002f9c:	40005800 	.word	0x40005800
 8002fa0:	000186a0 	.word	0x000186a0

08002fa4 <MX_USART2_UART_Init>:
{
 8002fa4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002fa6:	480a      	ldr	r0, [pc, #40]	; (8002fd0 <MX_USART2_UART_Init+0x2c>)
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <MX_USART2_UART_Init+0x30>)
 8002faa:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 1000000;
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <MX_USART2_UART_Init+0x34>)
 8002fae:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fb6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fb8:	220c      	movs	r2, #12
 8002fba:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fbc:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fbe:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fc0:	f7ff fcd5 	bl	800296e <HAL_UART_Init>
 8002fc4:	b900      	cbnz	r0, 8002fc8 <MX_USART2_UART_Init+0x24>
}
 8002fc6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002fc8:	f7ff ffc6 	bl	8002f58 <Error_Handler>
}
 8002fcc:	e7fb      	b.n	8002fc6 <MX_USART2_UART_Init+0x22>
 8002fce:	bf00      	nop
 8002fd0:	20012f94 	.word	0x20012f94
 8002fd4:	40004400 	.word	0x40004400
 8002fd8:	000f4240 	.word	0x000f4240

08002fdc <MX_TIM2_Init>:
{
 8002fdc:	b500      	push	{lr}
 8002fde:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8002fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8002fe8:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fea:	9308      	str	r3, [sp, #32]
 8002fec:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	9302      	str	r3, [sp, #8]
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	9304      	str	r3, [sp, #16]
 8002ff6:	9305      	str	r3, [sp, #20]
 8002ff8:	9306      	str	r3, [sp, #24]
 8002ffa:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8002ffc:	4822      	ldr	r0, [pc, #136]	; (8003088 <MX_TIM2_Init+0xac>)
 8002ffe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003002:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 9;
 8003004:	2209      	movs	r2, #9
 8003006:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003008:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1;
 800300a:	2201      	movs	r2, #1
 800300c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003010:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003012:	f7ff f8f7 	bl	8002204 <HAL_TIM_Base_Init>
 8003016:	bb40      	cbnz	r0, 800306a <MX_TIM2_Init+0x8e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003018:	a90e      	add	r1, sp, #56	; 0x38
 800301a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301e:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003022:	4819      	ldr	r0, [pc, #100]	; (8003088 <MX_TIM2_Init+0xac>)
 8003024:	f7ff f9d2 	bl	80023cc <HAL_TIM_ConfigClockSource>
 8003028:	bb10      	cbnz	r0, 8003070 <MX_TIM2_Init+0x94>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800302a:	4817      	ldr	r0, [pc, #92]	; (8003088 <MX_TIM2_Init+0xac>)
 800302c:	f7ff f903 	bl	8002236 <HAL_TIM_PWM_Init>
 8003030:	bb08      	cbnz	r0, 8003076 <MX_TIM2_Init+0x9a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003036:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003038:	a908      	add	r1, sp, #32
 800303a:	4813      	ldr	r0, [pc, #76]	; (8003088 <MX_TIM2_Init+0xac>)
 800303c:	f7ff fa64 	bl	8002508 <HAL_TIMEx_MasterConfigSynchronization>
 8003040:	b9e0      	cbnz	r0, 800307c <MX_TIM2_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003042:	2370      	movs	r3, #112	; 0x70
 8003044:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800304a:	2200      	movs	r2, #0
 800304c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800304e:	2304      	movs	r3, #4
 8003050:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003052:	eb0d 0103 	add.w	r1, sp, r3
 8003056:	480c      	ldr	r0, [pc, #48]	; (8003088 <MX_TIM2_Init+0xac>)
 8003058:	f7ff f93e 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
 800305c:	b988      	cbnz	r0, 8003082 <MX_TIM2_Init+0xa6>
  HAL_TIM_MspPostInit(&htim2);
 800305e:	480a      	ldr	r0, [pc, #40]	; (8003088 <MX_TIM2_Init+0xac>)
 8003060:	f000 fa36 	bl	80034d0 <HAL_TIM_MspPostInit>
}
 8003064:	b00f      	add	sp, #60	; 0x3c
 8003066:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800306a:	f7ff ff75 	bl	8002f58 <Error_Handler>
 800306e:	e7d3      	b.n	8003018 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8003070:	f7ff ff72 	bl	8002f58 <Error_Handler>
 8003074:	e7d9      	b.n	800302a <MX_TIM2_Init+0x4e>
    Error_Handler();
 8003076:	f7ff ff6f 	bl	8002f58 <Error_Handler>
 800307a:	e7da      	b.n	8003032 <MX_TIM2_Init+0x56>
    Error_Handler();
 800307c:	f7ff ff6c 	bl	8002f58 <Error_Handler>
 8003080:	e7df      	b.n	8003042 <MX_TIM2_Init+0x66>
    Error_Handler();
 8003082:	f7ff ff69 	bl	8002f58 <Error_Handler>
 8003086:	e7ea      	b.n	800305e <MX_TIM2_Init+0x82>
 8003088:	20012f54 	.word	0x20012f54

0800308c <MX_TIM6_Init>:
{
 800308c:	b500      	push	{lr}
 800308e:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003090:	2300      	movs	r3, #0
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	9301      	str	r3, [sp, #4]
  htim6.Instance = TIM6;
 8003096:	4811      	ldr	r0, [pc, #68]	; (80030dc <MX_TIM6_Init+0x50>)
 8003098:	4a11      	ldr	r2, [pc, #68]	; (80030e0 <MX_TIM6_Init+0x54>)
 800309a:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 9000;
 800309c:	f242 3228 	movw	r2, #9000	; 0x2328
 80030a0:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a2:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 10000;
 80030a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80030a8:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030aa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80030ac:	f7ff f8aa 	bl	8002204 <HAL_TIM_Base_Init>
 80030b0:	b968      	cbnz	r0, 80030ce <MX_TIM6_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80030b8:	4669      	mov	r1, sp
 80030ba:	4808      	ldr	r0, [pc, #32]	; (80030dc <MX_TIM6_Init+0x50>)
 80030bc:	f7ff fa24 	bl	8002508 <HAL_TIMEx_MasterConfigSynchronization>
 80030c0:	b940      	cbnz	r0, 80030d4 <MX_TIM6_Init+0x48>
  printf("tim setup done 6\r\n");
 80030c2:	4808      	ldr	r0, [pc, #32]	; (80030e4 <MX_TIM6_Init+0x58>)
 80030c4:	f000 fc4c 	bl	8003960 <puts>
}
 80030c8:	b003      	add	sp, #12
 80030ca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80030ce:	f7ff ff43 	bl	8002f58 <Error_Handler>
 80030d2:	e7ee      	b.n	80030b2 <MX_TIM6_Init+0x26>
    Error_Handler();
 80030d4:	f7ff ff40 	bl	8002f58 <Error_Handler>
 80030d8:	e7f3      	b.n	80030c2 <MX_TIM6_Init+0x36>
 80030da:	bf00      	nop
 80030dc:	20012f14 	.word	0x20012f14
 80030e0:	40001000 	.word	0x40001000
 80030e4:	08005024 	.word	0x08005024

080030e8 <MX_USART1_UART_Init>:
{
 80030e8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80030ea:	480a      	ldr	r0, [pc, #40]	; (8003114 <MX_USART1_UART_Init+0x2c>)
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <MX_USART1_UART_Init+0x30>)
 80030ee:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80030f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80030f4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030f6:	2300      	movs	r3, #0
 80030f8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030fa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030fc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030fe:	220c      	movs	r2, #12
 8003100:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003102:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003104:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003106:	f7ff fc32 	bl	800296e <HAL_UART_Init>
 800310a:	b900      	cbnz	r0, 800310e <MX_USART1_UART_Init+0x26>
}
 800310c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800310e:	f7ff ff23 	bl	8002f58 <Error_Handler>
}
 8003112:	e7fb      	b.n	800310c <MX_USART1_UART_Init+0x24>
 8003114:	20012ed0 	.word	0x20012ed0
 8003118:	40011000 	.word	0x40011000

0800311c <SystemClock_Config>:
{
 800311c:	b500      	push	{lr}
 800311e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003120:	2234      	movs	r2, #52	; 0x34
 8003122:	2100      	movs	r1, #0
 8003124:	a807      	add	r0, sp, #28
 8003126:	f000 fb9e 	bl	8003866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800312a:	2300      	movs	r3, #0
 800312c:	9302      	str	r3, [sp, #8]
 800312e:	9303      	str	r3, [sp, #12]
 8003130:	9304      	str	r3, [sp, #16]
 8003132:	9305      	str	r3, [sp, #20]
 8003134:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <SystemClock_Config+0xac>)
 800313a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800313c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003140:	6411      	str	r1, [r2, #64]	; 0x40
 8003142:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003144:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003148:	9200      	str	r2, [sp, #0]
 800314a:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <SystemClock_Config+0xb0>)
 8003150:	6811      	ldr	r1, [r2, #0]
 8003152:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8003156:	6011      	str	r1, [r2, #0]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800315e:	9201      	str	r2, [sp, #4]
 8003160:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003162:	2202      	movs	r2, #2
 8003164:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003166:	2101      	movs	r1, #1
 8003168:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800316a:	2110      	movs	r1, #16
 800316c:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800316e:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003170:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003172:	2308      	movs	r3, #8
 8003174:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003176:	23b4      	movs	r3, #180	; 0xb4
 8003178:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800317a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800317c:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800317e:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003180:	a807      	add	r0, sp, #28
 8003182:	f7fe fc61 	bl	8001a48 <HAL_RCC_OscConfig>
 8003186:	b9b0      	cbnz	r0, 80031b6 <SystemClock_Config+0x9a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003188:	f7fe faba 	bl	8001700 <HAL_PWREx_EnableOverDrive>
 800318c:	b9b0      	cbnz	r0, 80031bc <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800318e:	230f      	movs	r3, #15
 8003190:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003192:	2302      	movs	r3, #2
 8003194:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800319a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800319e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a4:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031a6:	2105      	movs	r1, #5
 80031a8:	a802      	add	r0, sp, #8
 80031aa:	f7fe fae9 	bl	8001780 <HAL_RCC_ClockConfig>
 80031ae:	b940      	cbnz	r0, 80031c2 <SystemClock_Config+0xa6>
}
 80031b0:	b015      	add	sp, #84	; 0x54
 80031b2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80031b6:	f7ff fecf 	bl	8002f58 <Error_Handler>
 80031ba:	e7e5      	b.n	8003188 <SystemClock_Config+0x6c>
    Error_Handler();
 80031bc:	f7ff fecc 	bl	8002f58 <Error_Handler>
 80031c0:	e7e5      	b.n	800318e <SystemClock_Config+0x72>
    Error_Handler();
 80031c2:	f7ff fec9 	bl	8002f58 <Error_Handler>
}
 80031c6:	e7f3      	b.n	80031b0 <SystemClock_Config+0x94>
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000

080031d0 <main>:
{
 80031d0:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 80031d2:	f7fd fa11 	bl	80005f8 <HAL_Init>
  SystemClock_Config();
 80031d6:	f7ff ffa1 	bl	800311c <SystemClock_Config>
  MX_GPIO_Init();
 80031da:	f7ff fd8b 	bl	8002cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80031de:	f7ff fde3 	bl	8002da8 <MX_DMA_Init>
  MX_I2C2_Init();
 80031e2:	f7ff fec1 	bl	8002f68 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80031e6:	f7ff fedd 	bl	8002fa4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80031ea:	f7ff fef7 	bl	8002fdc <MX_TIM2_Init>
  MX_TIM6_Init();
 80031ee:	f7ff ff4d 	bl	800308c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80031f2:	f7ff ff79 	bl	80030e8 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start(&htim2);
 80031f6:	4c58      	ldr	r4, [pc, #352]	; (8003358 <main+0x188>)
 80031f8:	4620      	mov	r0, r4
 80031fa:	f7fe feca 	bl	8001f92 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80031fe:	2100      	movs	r1, #0
 8003200:	4620      	mov	r0, r4
 8003202:	f7ff f961 	bl	80024c8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &Received, UART_BUFFER_SIZE);
 8003206:	2207      	movs	r2, #7
 8003208:	4954      	ldr	r1, [pc, #336]	; (800335c <main+0x18c>)
 800320a:	4855      	ldr	r0, [pc, #340]	; (8003360 <main+0x190>)
 800320c:	f7ff fc4e 	bl	8002aac <HAL_UART_Receive_IT>
  HAL_Delay(100);
 8003210:	2064      	movs	r0, #100	; 0x64
 8003212:	f7fd fa1d 	bl	8000650 <HAL_Delay>
  init();
 8003216:	f7ff fde1 	bl	8002ddc <init>
 800321a:	e08e      	b.n	800333a <main+0x16a>
			 while( (GPIOC->IDR & GPIO_PIN_8) == 0 );
 800321c:	4b51      	ldr	r3, [pc, #324]	; (8003364 <main+0x194>)
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003224:	d0fa      	beq.n	800321c <main+0x4c>
			 while( (GPIOC->IDR & GPIO_PIN_8) == GPIO_PIN_8 );
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <main+0x194>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800322e:	d1fa      	bne.n	8003226 <main+0x56>
			 while( (GPIOC->IDR & GPIO_PIN_8) == 0 );
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <main+0x194>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003238:	d0fa      	beq.n	8003230 <main+0x60>
			 tab[line][pxCnt++] = (GPIOC->IDR & 0xff);
 800323a:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <main+0x194>)
 800323c:	691c      	ldr	r4, [r3, #16]
 800323e:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <main+0x198>)
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	484a      	ldr	r0, [pc, #296]	; (800336c <main+0x19c>)
 8003244:	8802      	ldrh	r2, [r0, #0]
 8003246:	b292      	uxth	r2, r2
 8003248:	1c51      	adds	r1, r2, #1
 800324a:	b289      	uxth	r1, r1
 800324c:	8001      	strh	r1, [r0, #0]
 800324e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003252:	0199      	lsls	r1, r3, #6
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <main+0x1a0>)
 8003256:	440b      	add	r3, r1
 8003258:	549c      	strb	r4, [r3, r2]
			 while( (GPIOC->IDR & GPIO_PIN_8) == GPIO_PIN_8 );
 800325a:	4b42      	ldr	r3, [pc, #264]	; (8003364 <main+0x194>)
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003262:	d1fa      	bne.n	800325a <main+0x8a>
		 while( (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET ) ){
 8003264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003268:	483e      	ldr	r0, [pc, #248]	; (8003364 <main+0x194>)
 800326a:	f7fd fd1b 	bl	8000ca4 <HAL_GPIO_ReadPin>
 800326e:	2801      	cmp	r0, #1
 8003270:	d0d4      	beq.n	800321c <main+0x4c>
		 pxCnt = 0;
 8003272:	4b3e      	ldr	r3, [pc, #248]	; (800336c <main+0x19c>)
 8003274:	2200      	movs	r2, #0
 8003276:	801a      	strh	r2, [r3, #0]
		 if(line == 0){
 8003278:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <main+0x198>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	b29b      	uxth	r3, r3
 800327e:	b1fb      	cbz	r3, 80032c0 <main+0xf0>
		 if(++line > ROWS){
 8003280:	4a39      	ldr	r2, [pc, #228]	; (8003368 <main+0x198>)
 8003282:	8813      	ldrh	r3, [r2, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	b29b      	uxth	r3, r3
 8003288:	8013      	strh	r3, [r2, #0]
 800328a:	2bf0      	cmp	r3, #240	; 0xf0
 800328c:	d811      	bhi.n	80032b2 <main+0xe2>
		 while( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET && (line < ROWS));
 800328e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003292:	4834      	ldr	r0, [pc, #208]	; (8003364 <main+0x194>)
 8003294:	f7fd fd06 	bl	8000ca4 <HAL_GPIO_ReadPin>
 8003298:	b920      	cbnz	r0, 80032a4 <main+0xd4>
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <main+0x198>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2bef      	cmp	r3, #239	; 0xef
 80032a2:	d9f4      	bls.n	800328e <main+0xbe>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET ){
 80032a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032a8:	482e      	ldr	r0, [pc, #184]	; (8003364 <main+0x194>)
 80032aa:	f7fd fcfb 	bl	8000ca4 <HAL_GPIO_ReadPin>
 80032ae:	2801      	cmp	r0, #1
 80032b0:	d0d8      	beq.n	8003264 <main+0x94>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80032b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032b6:	482b      	ldr	r0, [pc, #172]	; (8003364 <main+0x194>)
 80032b8:	f7fd fd01 	bl	8000cbe <HAL_GPIO_TogglePin>
			for(uint8_t i = 0; i < ROWS; i++){
 80032bc:	2600      	movs	r6, #0
 80032be:	e02b      	b.n	8003318 <main+0x148>
			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80032c0:	4c28      	ldr	r4, [pc, #160]	; (8003364 <main+0x194>)
 80032c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7fd fcf9 	bl	8000cbe <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 80032cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7fd fcf4 	bl	8000cbe <HAL_GPIO_TogglePin>
 80032d6:	e7d3      	b.n	8003280 <main+0xb0>
					uint32_t n = (tab[i][j] << 24) | (tab[i][j+1] << 16) | (tab[i][j+2] << 8) | tab[i][j+3];
 80032d8:	00ab      	lsls	r3, r5, #2
 80032da:	442b      	add	r3, r5
 80032dc:	0199      	lsls	r1, r3, #6
 80032de:	4a24      	ldr	r2, [pc, #144]	; (8003370 <main+0x1a0>)
 80032e0:	440a      	add	r2, r1
 80032e2:	5d11      	ldrb	r1, [r2, r4]
 80032e4:	1c63      	adds	r3, r4, #1
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80032ee:	1ca1      	adds	r1, r4, #2
 80032f0:	5c51      	ldrb	r1, [r2, r1]
 80032f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032f6:	1ce1      	adds	r1, r4, #3
 80032f8:	5c51      	ldrb	r1, [r2, r1]
					printf("%08x,", n);
 80032fa:	4319      	orrs	r1, r3
 80032fc:	481d      	ldr	r0, [pc, #116]	; (8003374 <main+0x1a4>)
 80032fe:	f000 fabb 	bl	8003878 <iprintf>
				for(uint16_t j = 0; j < PIXS; j += 4){
 8003302:	3404      	adds	r4, #4
 8003304:	b2a4      	uxth	r4, r4
 8003306:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 800330a:	d3e5      	bcc.n	80032d8 <main+0x108>
				printf("%d\r\n", i);
 800330c:	4629      	mov	r1, r5
 800330e:	481a      	ldr	r0, [pc, #104]	; (8003378 <main+0x1a8>)
 8003310:	f000 fab2 	bl	8003878 <iprintf>
			for(uint8_t i = 0; i < ROWS; i++){
 8003314:	3601      	adds	r6, #1
 8003316:	b2f6      	uxtb	r6, r6
 8003318:	2eef      	cmp	r6, #239	; 0xef
 800331a:	d806      	bhi.n	800332a <main+0x15a>
				printf("[%d,", i);
 800331c:	4635      	mov	r5, r6
 800331e:	4631      	mov	r1, r6
 8003320:	4816      	ldr	r0, [pc, #88]	; (800337c <main+0x1ac>)
 8003322:	f000 faa9 	bl	8003878 <iprintf>
				for(uint16_t j = 0; j < PIXS; j += 4){
 8003326:	2400      	movs	r4, #0
 8003328:	e7ed      	b.n	8003306 <main+0x136>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 800332a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800332e:	480d      	ldr	r0, [pc, #52]	; (8003364 <main+0x194>)
 8003330:	f7fd fcc5 	bl	8000cbe <HAL_GPIO_TogglePin>
		line = 0;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <main+0x198>)
 8003336:	2200      	movs	r2, #0
 8003338:	801a      	strh	r2, [r3, #0]
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET );
 800333a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800333e:	4809      	ldr	r0, [pc, #36]	; (8003364 <main+0x194>)
 8003340:	f7fd fcb0 	bl	8000ca4 <HAL_GPIO_ReadPin>
 8003344:	2801      	cmp	r0, #1
 8003346:	d0f8      	beq.n	800333a <main+0x16a>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_RESET );
 8003348:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800334c:	4805      	ldr	r0, [pc, #20]	; (8003364 <main+0x194>)
 800334e:	f7fd fca9 	bl	8000ca4 <HAL_GPIO_ReadPin>
 8003352:	2800      	cmp	r0, #0
 8003354:	d0f8      	beq.n	8003348 <main+0x178>
 8003356:	e7a5      	b.n	80032a4 <main+0xd4>
 8003358:	20012f54 	.word	0x20012f54
 800335c:	2000020c 	.word	0x2000020c
 8003360:	20012ed0 	.word	0x20012ed0
 8003364:	40020800 	.word	0x40020800
 8003368:	2000026c 	.word	0x2000026c
 800336c:	20000216 	.word	0x20000216
 8003370:	20000270 	.word	0x20000270
 8003374:	08005040 	.word	0x08005040
 8003378:	08005048 	.word	0x08005048
 800337c:	08005038 	.word	0x08005038

08003380 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003380:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	2100      	movs	r1, #0
 8003384:	9100      	str	r1, [sp, #0]
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_MspInit+0x34>)
 8003388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
 8003390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003392:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003396:	9200      	str	r2, [sp, #0]
 8003398:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	9101      	str	r1, [sp, #4]
 800339c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	b002      	add	sp, #8
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033bc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033be:	2300      	movs	r3, #0
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	9304      	str	r3, [sp, #16]
 80033c4:	9305      	str	r3, [sp, #20]
 80033c6:	9306      	str	r3, [sp, #24]
 80033c8:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 80033ca:	6802      	ldr	r2, [r0, #0]
 80033cc:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_I2C_MspInit+0xa4>)
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d002      	beq.n	80033d8 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80033d2:	b009      	add	sp, #36	; 0x24
 80033d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d8:	2500      	movs	r5, #0
 80033da:	9500      	str	r5, [sp, #0]
 80033dc:	4c20      	ldr	r4, [pc, #128]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 80033de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6323      	str	r3, [r4, #48]	; 0x30
 80033e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f0:	9501      	str	r5, [sp, #4]
 80033f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6323      	str	r3, [r4, #48]	; 0x30
 80033fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003408:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800340a:	f04f 0912 	mov.w	r9, #18
 800340e:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003412:	f04f 0801 	mov.w	r8, #1
 8003416:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341a:	2703      	movs	r7, #3
 800341c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800341e:	2604      	movs	r6, #4
 8003420:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	a903      	add	r1, sp, #12
 8003424:	480f      	ldr	r0, [pc, #60]	; (8003464 <HAL_I2C_MspInit+0xac>)
 8003426:	f7fd fb5f 	bl	8000ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800342a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003430:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003434:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800343a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343c:	a903      	add	r1, sp, #12
 800343e:	480a      	ldr	r0, [pc, #40]	; (8003468 <HAL_I2C_MspInit+0xb0>)
 8003440:	f7fd fb52 	bl	8000ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003444:	9502      	str	r5, [sp, #8]
 8003446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800344c:	6423      	str	r3, [r4, #64]	; 0x40
 800344e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	9b02      	ldr	r3, [sp, #8]
}
 8003458:	e7bb      	b.n	80033d2 <HAL_I2C_MspInit+0x1a>
 800345a:	bf00      	nop
 800345c:	40005800 	.word	0x40005800
 8003460:	40023800 	.word	0x40023800
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800

0800346c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800346c:	b500      	push	{lr}
 800346e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8003470:	6803      	ldr	r3, [r0, #0]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003476:	d005      	beq.n	8003484 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8003478:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <HAL_TIM_Base_MspInit+0x5c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00f      	beq.n	800349e <HAL_TIM_Base_MspInit+0x32>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800347e:	b003      	add	sp, #12
 8003480:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003484:	2300      	movs	r3, #0
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <HAL_TIM_Base_MspInit+0x60>)
 800348a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	9b00      	ldr	r3, [sp, #0]
 800349c:	e7ef      	b.n	800347e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800349e:	2100      	movs	r1, #0
 80034a0:	9101      	str	r1, [sp, #4]
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_TIM_Base_MspInit+0x60>)
 80034a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a6:	f042 0210 	orr.w	r2, r2, #16
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80034b6:	460a      	mov	r2, r1
 80034b8:	2036      	movs	r0, #54	; 0x36
 80034ba:	f7fd f8ef 	bl	800069c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034be:	2036      	movs	r0, #54	; 0x36
 80034c0:	f7fd f920 	bl	8000704 <HAL_NVIC_EnableIRQ>
}
 80034c4:	e7db      	b.n	800347e <HAL_TIM_Base_MspInit+0x12>
 80034c6:	bf00      	nop
 80034c8:	40001000 	.word	0x40001000
 80034cc:	40023800 	.word	0x40023800

080034d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d0:	b500      	push	{lr}
 80034d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	2300      	movs	r3, #0
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	9302      	str	r3, [sp, #8]
 80034da:	9303      	str	r3, [sp, #12]
 80034dc:	9304      	str	r3, [sp, #16]
 80034de:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 80034e0:	6803      	ldr	r3, [r0, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d002      	beq.n	80034ee <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034e8:	b007      	add	sp, #28
 80034ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_TIM_MspPostInit+0x4c>)
 80034f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003506:	2301      	movs	r3, #1
 8003508:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2202      	movs	r2, #2
 800350c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800350e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003510:	a901      	add	r1, sp, #4
 8003512:	4803      	ldr	r0, [pc, #12]	; (8003520 <HAL_TIM_MspPostInit+0x50>)
 8003514:	f7fd fae8 	bl	8000ae8 <HAL_GPIO_Init>
}
 8003518:	e7e6      	b.n	80034e8 <HAL_TIM_MspPostInit+0x18>
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	40020000 	.word	0x40020000

08003524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003524:	b530      	push	{r4, r5, lr}
 8003526:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	2300      	movs	r3, #0
 800352a:	9305      	str	r3, [sp, #20]
 800352c:	9306      	str	r3, [sp, #24]
 800352e:	9307      	str	r3, [sp, #28]
 8003530:	9308      	str	r3, [sp, #32]
 8003532:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8003534:	6803      	ldr	r3, [r0, #0]
 8003536:	4a3f      	ldr	r2, [pc, #252]	; (8003634 <HAL_UART_MspInit+0x110>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d005      	beq.n	8003548 <HAL_UART_MspInit+0x24>
 800353c:	4604      	mov	r4, r0
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800353e:	4a3e      	ldr	r2, [pc, #248]	; (8003638 <HAL_UART_MspInit+0x114>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d02f      	beq.n	80035a4 <HAL_UART_MspInit+0x80>


  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003544:	b00b      	add	sp, #44	; 0x2c
 8003546:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003548:	2400      	movs	r4, #0
 800354a:	9401      	str	r4, [sp, #4]
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_UART_MspInit+0x118>)
 800354e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003550:	f042 0210 	orr.w	r2, r2, #16
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
 8003556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003558:	f002 0210 	and.w	r2, r2, #16
 800355c:	9201      	str	r2, [sp, #4]
 800355e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003560:	9402      	str	r4, [sp, #8]
 8003562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003574:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003578:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357a:	2302      	movs	r3, #2
 800357c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800357e:	2301      	movs	r3, #1
 8003580:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003586:	2307      	movs	r3, #7
 8003588:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	a905      	add	r1, sp, #20
 800358c:	482c      	ldr	r0, [pc, #176]	; (8003640 <HAL_UART_MspInit+0x11c>)
 800358e:	f7fd faab 	bl	8000ae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003592:	4622      	mov	r2, r4
 8003594:	4621      	mov	r1, r4
 8003596:	2025      	movs	r0, #37	; 0x25
 8003598:	f7fd f880 	bl	800069c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800359c:	2025      	movs	r0, #37	; 0x25
 800359e:	f7fd f8b1 	bl	8000704 <HAL_NVIC_EnableIRQ>
 80035a2:	e7cf      	b.n	8003544 <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035a4:	2500      	movs	r5, #0
 80035a6:	9503      	str	r5, [sp, #12]
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_UART_MspInit+0x118>)
 80035aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
 80035b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80035b8:	9203      	str	r2, [sp, #12]
 80035ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035bc:	9504      	str	r5, [sp, #16]
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	9304      	str	r3, [sp, #16]
 80035ce:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035d0:	230c      	movs	r3, #12
 80035d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035d8:	2301      	movs	r3, #1
 80035da:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035dc:	2303      	movs	r3, #3
 80035de:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035e0:	2307      	movs	r3, #7
 80035e2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e4:	a905      	add	r1, sp, #20
 80035e6:	4816      	ldr	r0, [pc, #88]	; (8003640 <HAL_UART_MspInit+0x11c>)
 80035e8:	f7fd fa7e 	bl	8000ae8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80035ec:	4815      	ldr	r0, [pc, #84]	; (8003644 <HAL_UART_MspInit+0x120>)
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_UART_MspInit+0x124>)
 80035f0:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80035f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035f6:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035f8:	2340      	movs	r3, #64	; 0x40
 80035fa:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fc:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003602:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003604:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003606:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003608:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800360a:	6205      	str	r5, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800360c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800360e:	f7fd f903 	bl	8000818 <HAL_DMA_Init>
 8003612:	b958      	cbnz	r0, 800362c <HAL_UART_MspInit+0x108>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_UART_MspInit+0x120>)
 8003616:	6323      	str	r3, [r4, #48]	; 0x30
 8003618:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	4611      	mov	r1, r2
 800361e:	2026      	movs	r0, #38	; 0x26
 8003620:	f7fd f83c 	bl	800069c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003624:	2026      	movs	r0, #38	; 0x26
 8003626:	f7fd f86d 	bl	8000704 <HAL_NVIC_EnableIRQ>
}
 800362a:	e78b      	b.n	8003544 <HAL_UART_MspInit+0x20>
      Error_Handler();
 800362c:	f7ff fc94 	bl	8002f58 <Error_Handler>
 8003630:	e7f0      	b.n	8003614 <HAL_UART_MspInit+0xf0>
 8003632:	bf00      	nop
 8003634:	40011000 	.word	0x40011000
 8003638:	40004400 	.word	0x40004400
 800363c:	40023800 	.word	0x40023800
 8003640:	40020000 	.word	0x40020000
 8003644:	20012e70 	.word	0x20012e70
 8003648:	400260a0 	.word	0x400260a0

0800364c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800364c:	4770      	bx	lr

0800364e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800364e:	e7fe      	b.n	800364e <HardFault_Handler>

08003650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003650:	e7fe      	b.n	8003650 <MemManage_Handler>

08003652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003652:	e7fe      	b.n	8003652 <BusFault_Handler>

08003654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003654:	e7fe      	b.n	8003654 <UsageFault_Handler>

08003656 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003656:	4770      	bx	lr

08003658 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003658:	4770      	bx	lr

0800365a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800365a:	4770      	bx	lr

0800365c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800365c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800365e:	f7fc ffe5 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003662:	bd08      	pop	{r3, pc}

08003664 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003664:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003666:	4802      	ldr	r0, [pc, #8]	; (8003670 <DMA1_Stream6_IRQHandler+0xc>)
 8003668:	f7fd f950 	bl	800090c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800366c:	bd08      	pop	{r3, pc}
 800366e:	bf00      	nop
 8003670:	20012e70 	.word	0x20012e70

08003674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003676:	4802      	ldr	r0, [pc, #8]	; (8003680 <USART1_IRQHandler+0xc>)
 8003678:	f7ff faa4 	bl	8002bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800367c:	bd08      	pop	{r3, pc}
 800367e:	bf00      	nop
 8003680:	20012ed0 	.word	0x20012ed0

08003684 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003684:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003686:	4802      	ldr	r0, [pc, #8]	; (8003690 <USART2_IRQHandler+0xc>)
 8003688:	f7ff fa9c 	bl	8002bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800368c:	bd08      	pop	{r3, pc}
 800368e:	bf00      	nop
 8003690:	20012f94 	.word	0x20012f94

08003694 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003694:	b508      	push	{r3, lr}
//	if( (cr & DCMI_CR_ENABLE) == DCMI_CR_ENABLE)
//		DCMI->CR &= ~(uint32_t) DCMI_CR_ENABLE;
//	else
//		DCMI->CR |= (uint32_t) DCMI_CR_ENABLE;

	printf("tim6int\r\n");
 8003696:	4803      	ldr	r0, [pc, #12]	; (80036a4 <TIM6_DAC_IRQHandler+0x10>)
 8003698:	f000 f962 	bl	8003960 <puts>


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <TIM6_DAC_IRQHandler+0x14>)
 800369e:	f7fe fc90 	bl	8001fc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036a2:	bd08      	pop	{r3, pc}
 80036a4:	08005050 	.word	0x08005050
 80036a8:	20012f14 	.word	0x20012f14

080036ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	460d      	mov	r5, r1
 80036b0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b2:	2400      	movs	r4, #0
 80036b4:	e004      	b.n	80036c0 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 80036b6:	f3af 8000 	nop.w
 80036ba:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036bc:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 80036be:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c0:	42b4      	cmp	r4, r6
 80036c2:	dbf8      	blt.n	80036b6 <_read+0xa>
	}

return len;
}
 80036c4:	4630      	mov	r0, r6
 80036c6:	bd70      	pop	{r4, r5, r6, pc}

080036c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036cc:	2400      	movs	r4, #0
 80036ce:	e005      	b.n	80036dc <_write+0x14>
	{
		__io_putchar(*ptr++);
 80036d0:	1c4d      	adds	r5, r1, #1
 80036d2:	7808      	ldrb	r0, [r1, #0]
 80036d4:	f7ff fc30 	bl	8002f38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d8:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80036da:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036dc:	42b4      	cmp	r4, r6
 80036de:	dbf7      	blt.n	80036d0 <_write+0x8>
	}
	return len;
}
 80036e0:	4630      	mov	r0, r6
 80036e2:	bd70      	pop	{r4, r5, r6, pc}

080036e4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80036e4:	b508      	push	{r3, lr}
 80036e6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036e8:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <_sbrk+0x34>)
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	b142      	cbz	r2, 8003700 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <_sbrk+0x34>)
 80036f0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80036f2:	4403      	add	r3, r0
 80036f4:	466a      	mov	r2, sp
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d806      	bhi.n	8003708 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <_sbrk+0x34>)
 80036fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80036fe:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003700:	4a05      	ldr	r2, [pc, #20]	; (8003718 <_sbrk+0x34>)
 8003702:	4906      	ldr	r1, [pc, #24]	; (800371c <_sbrk+0x38>)
 8003704:	6011      	str	r1, [r2, #0]
 8003706:	e7f2      	b.n	80036ee <_sbrk+0xa>
		errno = ENOMEM;
 8003708:	f000 f86a 	bl	80037e0 <__errno>
 800370c:	230c      	movs	r3, #12
 800370e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	e7f3      	b.n	80036fe <_sbrk+0x1a>
 8003716:	bf00      	nop
 8003718:	200001f8 	.word	0x200001f8
 800371c:	20012fd8 	.word	0x20012fd8

08003720 <_close>:

int _close(int file)
{
	return -1;
}
 8003720:	f04f 30ff 	mov.w	r0, #4294967295
 8003724:	4770      	bx	lr

08003726 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800372a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800372c:	2000      	movs	r0, #0
 800372e:	4770      	bx	lr

08003730 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003730:	2001      	movs	r0, #1
 8003732:	4770      	bx	lr

08003734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003734:	2000      	movs	r0, #0
 8003736:	4770      	bx	lr

08003738 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003738:	490f      	ldr	r1, [pc, #60]	; (8003778 <SystemInit+0x40>)
 800373a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800373e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <SystemInit+0x44>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003750:	2000      	movs	r0, #0
 8003752:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800375a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800375e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003760:	4a07      	ldr	r2, [pc, #28]	; (8003780 <SystemInit+0x48>)
 8003762:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800376a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800376c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800376e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003772:	608b      	str	r3, [r1, #8]
#endif
}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000ed00 	.word	0xe000ed00
 800377c:	40023800 	.word	0x40023800
 8003780:	24003010 	.word	0x24003010

08003784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003788:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800378a:	e003      	b.n	8003794 <LoopCopyDataInit>

0800378c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800378e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003790:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003792:	3104      	adds	r1, #4

08003794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003794:	480b      	ldr	r0, [pc, #44]	; (80037c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003798:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800379a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800379c:	d3f6      	bcc.n	800378c <CopyDataInit>
  ldr  r2, =_sbss
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037a0:	e002      	b.n	80037a8 <LoopFillZerobss>

080037a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037a4:	f842 3b04 	str.w	r3, [r2], #4

080037a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037ac:	d3f9      	bcc.n	80037a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037ae:	f7ff ffc3 	bl	8003738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b2:	f000 f81b 	bl	80037ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b6:	f7ff fd0b 	bl	80031d0 <main>
  bx  lr    
 80037ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80037c0:	08005210 	.word	0x08005210
  ldr  r0, =_sdata
 80037c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037c8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80037cc:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80037d0:	20012fd8 	.word	0x20012fd8

080037d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC_IRQHandler>

080037d6 <atoi>:
 80037d6:	220a      	movs	r2, #10
 80037d8:	2100      	movs	r1, #0
 80037da:	f000 b9b9 	b.w	8003b50 <strtol>
	...

080037e0 <__errno>:
 80037e0:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <__errno+0x8>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	2000000c 	.word	0x2000000c

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	4e0d      	ldr	r6, [pc, #52]	; (8003824 <__libc_init_array+0x38>)
 80037f0:	4c0d      	ldr	r4, [pc, #52]	; (8003828 <__libc_init_array+0x3c>)
 80037f2:	1ba4      	subs	r4, r4, r6
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	2500      	movs	r5, #0
 80037f8:	42a5      	cmp	r5, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	4e0b      	ldr	r6, [pc, #44]	; (800382c <__libc_init_array+0x40>)
 80037fe:	4c0c      	ldr	r4, [pc, #48]	; (8003830 <__libc_init_array+0x44>)
 8003800:	f001 fa3e 	bl	8004c80 <_init>
 8003804:	1ba4      	subs	r4, r4, r6
 8003806:	10a4      	asrs	r4, r4, #2
 8003808:	2500      	movs	r5, #0
 800380a:	42a5      	cmp	r5, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003814:	4798      	blx	r3
 8003816:	3501      	adds	r5, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800381e:	4798      	blx	r3
 8003820:	3501      	adds	r5, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	08005208 	.word	0x08005208
 8003828:	08005208 	.word	0x08005208
 800382c:	08005208 	.word	0x08005208
 8003830:	0800520c 	.word	0x0800520c

08003834 <memmove>:
 8003834:	4288      	cmp	r0, r1
 8003836:	b510      	push	{r4, lr}
 8003838:	eb01 0302 	add.w	r3, r1, r2
 800383c:	d807      	bhi.n	800384e <memmove+0x1a>
 800383e:	1e42      	subs	r2, r0, #1
 8003840:	4299      	cmp	r1, r3
 8003842:	d00a      	beq.n	800385a <memmove+0x26>
 8003844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003848:	f802 4f01 	strb.w	r4, [r2, #1]!
 800384c:	e7f8      	b.n	8003840 <memmove+0xc>
 800384e:	4283      	cmp	r3, r0
 8003850:	d9f5      	bls.n	800383e <memmove+0xa>
 8003852:	1881      	adds	r1, r0, r2
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	42d3      	cmn	r3, r2
 8003858:	d100      	bne.n	800385c <memmove+0x28>
 800385a:	bd10      	pop	{r4, pc}
 800385c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003860:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003864:	e7f7      	b.n	8003856 <memmove+0x22>

08003866 <memset>:
 8003866:	4402      	add	r2, r0
 8003868:	4603      	mov	r3, r0
 800386a:	4293      	cmp	r3, r2
 800386c:	d100      	bne.n	8003870 <memset+0xa>
 800386e:	4770      	bx	lr
 8003870:	f803 1b01 	strb.w	r1, [r3], #1
 8003874:	e7f9      	b.n	800386a <memset+0x4>
	...

08003878 <iprintf>:
 8003878:	b40f      	push	{r0, r1, r2, r3}
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <iprintf+0x2c>)
 800387c:	b513      	push	{r0, r1, r4, lr}
 800387e:	681c      	ldr	r4, [r3, #0]
 8003880:	b124      	cbz	r4, 800388c <iprintf+0x14>
 8003882:	69a3      	ldr	r3, [r4, #24]
 8003884:	b913      	cbnz	r3, 800388c <iprintf+0x14>
 8003886:	4620      	mov	r0, r4
 8003888:	f000 fb28 	bl	8003edc <__sinit>
 800388c:	ab05      	add	r3, sp, #20
 800388e:	9a04      	ldr	r2, [sp, #16]
 8003890:	68a1      	ldr	r1, [r4, #8]
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	4620      	mov	r0, r4
 8003896:	f000 fe51 	bl	800453c <_vfiprintf_r>
 800389a:	b002      	add	sp, #8
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a0:	b004      	add	sp, #16
 80038a2:	4770      	bx	lr
 80038a4:	2000000c 	.word	0x2000000c

080038a8 <_puts_r>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	460e      	mov	r6, r1
 80038ac:	4605      	mov	r5, r0
 80038ae:	b118      	cbz	r0, 80038b8 <_puts_r+0x10>
 80038b0:	6983      	ldr	r3, [r0, #24]
 80038b2:	b90b      	cbnz	r3, 80038b8 <_puts_r+0x10>
 80038b4:	f000 fb12 	bl	8003edc <__sinit>
 80038b8:	69ab      	ldr	r3, [r5, #24]
 80038ba:	68ac      	ldr	r4, [r5, #8]
 80038bc:	b913      	cbnz	r3, 80038c4 <_puts_r+0x1c>
 80038be:	4628      	mov	r0, r5
 80038c0:	f000 fb0c 	bl	8003edc <__sinit>
 80038c4:	4b23      	ldr	r3, [pc, #140]	; (8003954 <_puts_r+0xac>)
 80038c6:	429c      	cmp	r4, r3
 80038c8:	d117      	bne.n	80038fa <_puts_r+0x52>
 80038ca:	686c      	ldr	r4, [r5, #4]
 80038cc:	89a3      	ldrh	r3, [r4, #12]
 80038ce:	071b      	lsls	r3, r3, #28
 80038d0:	d51d      	bpl.n	800390e <_puts_r+0x66>
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	b1db      	cbz	r3, 800390e <_puts_r+0x66>
 80038d6:	3e01      	subs	r6, #1
 80038d8:	68a3      	ldr	r3, [r4, #8]
 80038da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038de:	3b01      	subs	r3, #1
 80038e0:	60a3      	str	r3, [r4, #8]
 80038e2:	b9e9      	cbnz	r1, 8003920 <_puts_r+0x78>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	da2e      	bge.n	8003946 <_puts_r+0x9e>
 80038e8:	4622      	mov	r2, r4
 80038ea:	210a      	movs	r1, #10
 80038ec:	4628      	mov	r0, r5
 80038ee:	f000 f945 	bl	8003b7c <__swbuf_r>
 80038f2:	3001      	adds	r0, #1
 80038f4:	d011      	beq.n	800391a <_puts_r+0x72>
 80038f6:	200a      	movs	r0, #10
 80038f8:	e011      	b.n	800391e <_puts_r+0x76>
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <_puts_r+0xb0>)
 80038fc:	429c      	cmp	r4, r3
 80038fe:	d101      	bne.n	8003904 <_puts_r+0x5c>
 8003900:	68ac      	ldr	r4, [r5, #8]
 8003902:	e7e3      	b.n	80038cc <_puts_r+0x24>
 8003904:	4b15      	ldr	r3, [pc, #84]	; (800395c <_puts_r+0xb4>)
 8003906:	429c      	cmp	r4, r3
 8003908:	bf08      	it	eq
 800390a:	68ec      	ldreq	r4, [r5, #12]
 800390c:	e7de      	b.n	80038cc <_puts_r+0x24>
 800390e:	4621      	mov	r1, r4
 8003910:	4628      	mov	r0, r5
 8003912:	f000 f985 	bl	8003c20 <__swsetup_r>
 8003916:	2800      	cmp	r0, #0
 8003918:	d0dd      	beq.n	80038d6 <_puts_r+0x2e>
 800391a:	f04f 30ff 	mov.w	r0, #4294967295
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	2b00      	cmp	r3, #0
 8003922:	da04      	bge.n	800392e <_puts_r+0x86>
 8003924:	69a2      	ldr	r2, [r4, #24]
 8003926:	429a      	cmp	r2, r3
 8003928:	dc06      	bgt.n	8003938 <_puts_r+0x90>
 800392a:	290a      	cmp	r1, #10
 800392c:	d004      	beq.n	8003938 <_puts_r+0x90>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	6022      	str	r2, [r4, #0]
 8003934:	7019      	strb	r1, [r3, #0]
 8003936:	e7cf      	b.n	80038d8 <_puts_r+0x30>
 8003938:	4622      	mov	r2, r4
 800393a:	4628      	mov	r0, r5
 800393c:	f000 f91e 	bl	8003b7c <__swbuf_r>
 8003940:	3001      	adds	r0, #1
 8003942:	d1c9      	bne.n	80038d8 <_puts_r+0x30>
 8003944:	e7e9      	b.n	800391a <_puts_r+0x72>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	200a      	movs	r0, #10
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	6022      	str	r2, [r4, #0]
 800394e:	7018      	strb	r0, [r3, #0]
 8003950:	e7e5      	b.n	800391e <_puts_r+0x76>
 8003952:	bf00      	nop
 8003954:	08005080 	.word	0x08005080
 8003958:	080050a0 	.word	0x080050a0
 800395c:	08005060 	.word	0x08005060

08003960 <puts>:
 8003960:	4b02      	ldr	r3, [pc, #8]	; (800396c <puts+0xc>)
 8003962:	4601      	mov	r1, r0
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	f7ff bf9f 	b.w	80038a8 <_puts_r>
 800396a:	bf00      	nop
 800396c:	2000000c 	.word	0x2000000c

08003970 <siprintf>:
 8003970:	b40e      	push	{r1, r2, r3}
 8003972:	b500      	push	{lr}
 8003974:	b09c      	sub	sp, #112	; 0x70
 8003976:	ab1d      	add	r3, sp, #116	; 0x74
 8003978:	9002      	str	r0, [sp, #8]
 800397a:	9006      	str	r0, [sp, #24]
 800397c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003980:	4809      	ldr	r0, [pc, #36]	; (80039a8 <siprintf+0x38>)
 8003982:	9107      	str	r1, [sp, #28]
 8003984:	9104      	str	r1, [sp, #16]
 8003986:	4909      	ldr	r1, [pc, #36]	; (80039ac <siprintf+0x3c>)
 8003988:	f853 2b04 	ldr.w	r2, [r3], #4
 800398c:	9105      	str	r1, [sp, #20]
 800398e:	6800      	ldr	r0, [r0, #0]
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	a902      	add	r1, sp, #8
 8003994:	f000 fcb0 	bl	80042f8 <_svfiprintf_r>
 8003998:	9b02      	ldr	r3, [sp, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	b01c      	add	sp, #112	; 0x70
 80039a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039a4:	b003      	add	sp, #12
 80039a6:	4770      	bx	lr
 80039a8:	2000000c 	.word	0x2000000c
 80039ac:	ffff0208 	.word	0xffff0208

080039b0 <strtok>:
 80039b0:	4b13      	ldr	r3, [pc, #76]	; (8003a00 <strtok+0x50>)
 80039b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b6:	681d      	ldr	r5, [r3, #0]
 80039b8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80039ba:	4606      	mov	r6, r0
 80039bc:	460f      	mov	r7, r1
 80039be:	b9b4      	cbnz	r4, 80039ee <strtok+0x3e>
 80039c0:	2050      	movs	r0, #80	; 0x50
 80039c2:	f000 fb7d 	bl	80040c0 <malloc>
 80039c6:	65a8      	str	r0, [r5, #88]	; 0x58
 80039c8:	e9c0 4400 	strd	r4, r4, [r0]
 80039cc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80039d0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80039d4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80039d8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80039dc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80039e0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80039e4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80039e8:	6184      	str	r4, [r0, #24]
 80039ea:	7704      	strb	r4, [r0, #28]
 80039ec:	6244      	str	r4, [r0, #36]	; 0x24
 80039ee:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80039f0:	4639      	mov	r1, r7
 80039f2:	4630      	mov	r0, r6
 80039f4:	2301      	movs	r3, #1
 80039f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039fa:	f000 b803 	b.w	8003a04 <__strtok_r>
 80039fe:	bf00      	nop
 8003a00:	2000000c 	.word	0x2000000c

08003a04 <__strtok_r>:
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	b918      	cbnz	r0, 8003a10 <__strtok_r+0xc>
 8003a08:	6810      	ldr	r0, [r2, #0]
 8003a0a:	b908      	cbnz	r0, 8003a10 <__strtok_r+0xc>
 8003a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4604      	mov	r4, r0
 8003a12:	460f      	mov	r7, r1
 8003a14:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003a18:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003a1c:	b91e      	cbnz	r6, 8003a26 <__strtok_r+0x22>
 8003a1e:	b96d      	cbnz	r5, 8003a3c <__strtok_r+0x38>
 8003a20:	6015      	str	r5, [r2, #0]
 8003a22:	4628      	mov	r0, r5
 8003a24:	e7f2      	b.n	8003a0c <__strtok_r+0x8>
 8003a26:	42b5      	cmp	r5, r6
 8003a28:	d1f6      	bne.n	8003a18 <__strtok_r+0x14>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1ef      	bne.n	8003a0e <__strtok_r+0xa>
 8003a2e:	6014      	str	r4, [r2, #0]
 8003a30:	7003      	strb	r3, [r0, #0]
 8003a32:	e7eb      	b.n	8003a0c <__strtok_r+0x8>
 8003a34:	462b      	mov	r3, r5
 8003a36:	e00d      	b.n	8003a54 <__strtok_r+0x50>
 8003a38:	b926      	cbnz	r6, 8003a44 <__strtok_r+0x40>
 8003a3a:	461c      	mov	r4, r3
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	460f      	mov	r7, r1
 8003a40:	f813 5b01 	ldrb.w	r5, [r3], #1
 8003a44:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003a48:	42b5      	cmp	r5, r6
 8003a4a:	d1f5      	bne.n	8003a38 <__strtok_r+0x34>
 8003a4c:	2d00      	cmp	r5, #0
 8003a4e:	d0f1      	beq.n	8003a34 <__strtok_r+0x30>
 8003a50:	2100      	movs	r1, #0
 8003a52:	7021      	strb	r1, [r4, #0]
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e7d9      	b.n	8003a0c <__strtok_r+0x8>

08003a58 <_strtol_l.isra.0>:
 8003a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	4680      	mov	r8, r0
 8003a5e:	4689      	mov	r9, r1
 8003a60:	4692      	mov	sl, r2
 8003a62:	461e      	mov	r6, r3
 8003a64:	460f      	mov	r7, r1
 8003a66:	463d      	mov	r5, r7
 8003a68:	9808      	ldr	r0, [sp, #32]
 8003a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a6e:	f000 fabf 	bl	8003ff0 <__locale_ctype_ptr_l>
 8003a72:	4420      	add	r0, r4
 8003a74:	7843      	ldrb	r3, [r0, #1]
 8003a76:	f013 0308 	ands.w	r3, r3, #8
 8003a7a:	d132      	bne.n	8003ae2 <_strtol_l.isra.0+0x8a>
 8003a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8003a7e:	d132      	bne.n	8003ae6 <_strtol_l.isra.0+0x8e>
 8003a80:	787c      	ldrb	r4, [r7, #1]
 8003a82:	1cbd      	adds	r5, r7, #2
 8003a84:	2201      	movs	r2, #1
 8003a86:	2e00      	cmp	r6, #0
 8003a88:	d05d      	beq.n	8003b46 <_strtol_l.isra.0+0xee>
 8003a8a:	2e10      	cmp	r6, #16
 8003a8c:	d109      	bne.n	8003aa2 <_strtol_l.isra.0+0x4a>
 8003a8e:	2c30      	cmp	r4, #48	; 0x30
 8003a90:	d107      	bne.n	8003aa2 <_strtol_l.isra.0+0x4a>
 8003a92:	782b      	ldrb	r3, [r5, #0]
 8003a94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003a98:	2b58      	cmp	r3, #88	; 0x58
 8003a9a:	d14f      	bne.n	8003b3c <_strtol_l.isra.0+0xe4>
 8003a9c:	786c      	ldrb	r4, [r5, #1]
 8003a9e:	2610      	movs	r6, #16
 8003aa0:	3502      	adds	r5, #2
 8003aa2:	2a00      	cmp	r2, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003aaa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003aae:	2700      	movs	r7, #0
 8003ab0:	fbb1 fcf6 	udiv	ip, r1, r6
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003aba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003abe:	2b09      	cmp	r3, #9
 8003ac0:	d817      	bhi.n	8003af2 <_strtol_l.isra.0+0x9a>
 8003ac2:	461c      	mov	r4, r3
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	dd23      	ble.n	8003b10 <_strtol_l.isra.0+0xb8>
 8003ac8:	1c7b      	adds	r3, r7, #1
 8003aca:	d007      	beq.n	8003adc <_strtol_l.isra.0+0x84>
 8003acc:	4584      	cmp	ip, r0
 8003ace:	d31c      	bcc.n	8003b0a <_strtol_l.isra.0+0xb2>
 8003ad0:	d101      	bne.n	8003ad6 <_strtol_l.isra.0+0x7e>
 8003ad2:	45a6      	cmp	lr, r4
 8003ad4:	db19      	blt.n	8003b0a <_strtol_l.isra.0+0xb2>
 8003ad6:	fb00 4006 	mla	r0, r0, r6, r4
 8003ada:	2701      	movs	r7, #1
 8003adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ae0:	e7eb      	b.n	8003aba <_strtol_l.isra.0+0x62>
 8003ae2:	462f      	mov	r7, r5
 8003ae4:	e7bf      	b.n	8003a66 <_strtol_l.isra.0+0xe>
 8003ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8003ae8:	bf04      	itt	eq
 8003aea:	1cbd      	addeq	r5, r7, #2
 8003aec:	787c      	ldrbeq	r4, [r7, #1]
 8003aee:	461a      	mov	r2, r3
 8003af0:	e7c9      	b.n	8003a86 <_strtol_l.isra.0+0x2e>
 8003af2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003af6:	2b19      	cmp	r3, #25
 8003af8:	d801      	bhi.n	8003afe <_strtol_l.isra.0+0xa6>
 8003afa:	3c37      	subs	r4, #55	; 0x37
 8003afc:	e7e2      	b.n	8003ac4 <_strtol_l.isra.0+0x6c>
 8003afe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003b02:	2b19      	cmp	r3, #25
 8003b04:	d804      	bhi.n	8003b10 <_strtol_l.isra.0+0xb8>
 8003b06:	3c57      	subs	r4, #87	; 0x57
 8003b08:	e7dc      	b.n	8003ac4 <_strtol_l.isra.0+0x6c>
 8003b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8003b0e:	e7e5      	b.n	8003adc <_strtol_l.isra.0+0x84>
 8003b10:	1c7b      	adds	r3, r7, #1
 8003b12:	d108      	bne.n	8003b26 <_strtol_l.isra.0+0xce>
 8003b14:	2322      	movs	r3, #34	; 0x22
 8003b16:	f8c8 3000 	str.w	r3, [r8]
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	f1ba 0f00 	cmp.w	sl, #0
 8003b20:	d107      	bne.n	8003b32 <_strtol_l.isra.0+0xda>
 8003b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b26:	b102      	cbz	r2, 8003b2a <_strtol_l.isra.0+0xd2>
 8003b28:	4240      	negs	r0, r0
 8003b2a:	f1ba 0f00 	cmp.w	sl, #0
 8003b2e:	d0f8      	beq.n	8003b22 <_strtol_l.isra.0+0xca>
 8003b30:	b10f      	cbz	r7, 8003b36 <_strtol_l.isra.0+0xde>
 8003b32:	f105 39ff 	add.w	r9, r5, #4294967295
 8003b36:	f8ca 9000 	str.w	r9, [sl]
 8003b3a:	e7f2      	b.n	8003b22 <_strtol_l.isra.0+0xca>
 8003b3c:	2430      	movs	r4, #48	; 0x30
 8003b3e:	2e00      	cmp	r6, #0
 8003b40:	d1af      	bne.n	8003aa2 <_strtol_l.isra.0+0x4a>
 8003b42:	2608      	movs	r6, #8
 8003b44:	e7ad      	b.n	8003aa2 <_strtol_l.isra.0+0x4a>
 8003b46:	2c30      	cmp	r4, #48	; 0x30
 8003b48:	d0a3      	beq.n	8003a92 <_strtol_l.isra.0+0x3a>
 8003b4a:	260a      	movs	r6, #10
 8003b4c:	e7a9      	b.n	8003aa2 <_strtol_l.isra.0+0x4a>
	...

08003b50 <strtol>:
 8003b50:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <strtol+0x24>)
 8003b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b54:	681c      	ldr	r4, [r3, #0]
 8003b56:	4d08      	ldr	r5, [pc, #32]	; (8003b78 <strtol+0x28>)
 8003b58:	6a23      	ldr	r3, [r4, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf08      	it	eq
 8003b5e:	462b      	moveq	r3, r5
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	4613      	mov	r3, r2
 8003b64:	460a      	mov	r2, r1
 8003b66:	4601      	mov	r1, r0
 8003b68:	4620      	mov	r0, r4
 8003b6a:	f7ff ff75 	bl	8003a58 <_strtol_l.isra.0>
 8003b6e:	b003      	add	sp, #12
 8003b70:	bd30      	pop	{r4, r5, pc}
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c
 8003b78:	20000070 	.word	0x20000070

08003b7c <__swbuf_r>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	460e      	mov	r6, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	4605      	mov	r5, r0
 8003b84:	b118      	cbz	r0, 8003b8e <__swbuf_r+0x12>
 8003b86:	6983      	ldr	r3, [r0, #24]
 8003b88:	b90b      	cbnz	r3, 8003b8e <__swbuf_r+0x12>
 8003b8a:	f000 f9a7 	bl	8003edc <__sinit>
 8003b8e:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <__swbuf_r+0x98>)
 8003b90:	429c      	cmp	r4, r3
 8003b92:	d12a      	bne.n	8003bea <__swbuf_r+0x6e>
 8003b94:	686c      	ldr	r4, [r5, #4]
 8003b96:	69a3      	ldr	r3, [r4, #24]
 8003b98:	60a3      	str	r3, [r4, #8]
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	071a      	lsls	r2, r3, #28
 8003b9e:	d52e      	bpl.n	8003bfe <__swbuf_r+0x82>
 8003ba0:	6923      	ldr	r3, [r4, #16]
 8003ba2:	b363      	cbz	r3, 8003bfe <__swbuf_r+0x82>
 8003ba4:	6923      	ldr	r3, [r4, #16]
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	1ac0      	subs	r0, r0, r3
 8003baa:	6963      	ldr	r3, [r4, #20]
 8003bac:	b2f6      	uxtb	r6, r6
 8003bae:	4283      	cmp	r3, r0
 8003bb0:	4637      	mov	r7, r6
 8003bb2:	dc04      	bgt.n	8003bbe <__swbuf_r+0x42>
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f000 f926 	bl	8003e08 <_fflush_r>
 8003bbc:	bb28      	cbnz	r0, 8003c0a <__swbuf_r+0x8e>
 8003bbe:	68a3      	ldr	r3, [r4, #8]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	60a3      	str	r3, [r4, #8]
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	6022      	str	r2, [r4, #0]
 8003bca:	701e      	strb	r6, [r3, #0]
 8003bcc:	6963      	ldr	r3, [r4, #20]
 8003bce:	3001      	adds	r0, #1
 8003bd0:	4283      	cmp	r3, r0
 8003bd2:	d004      	beq.n	8003bde <__swbuf_r+0x62>
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	07db      	lsls	r3, r3, #31
 8003bd8:	d519      	bpl.n	8003c0e <__swbuf_r+0x92>
 8003bda:	2e0a      	cmp	r6, #10
 8003bdc:	d117      	bne.n	8003c0e <__swbuf_r+0x92>
 8003bde:	4621      	mov	r1, r4
 8003be0:	4628      	mov	r0, r5
 8003be2:	f000 f911 	bl	8003e08 <_fflush_r>
 8003be6:	b190      	cbz	r0, 8003c0e <__swbuf_r+0x92>
 8003be8:	e00f      	b.n	8003c0a <__swbuf_r+0x8e>
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <__swbuf_r+0x9c>)
 8003bec:	429c      	cmp	r4, r3
 8003bee:	d101      	bne.n	8003bf4 <__swbuf_r+0x78>
 8003bf0:	68ac      	ldr	r4, [r5, #8]
 8003bf2:	e7d0      	b.n	8003b96 <__swbuf_r+0x1a>
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <__swbuf_r+0xa0>)
 8003bf6:	429c      	cmp	r4, r3
 8003bf8:	bf08      	it	eq
 8003bfa:	68ec      	ldreq	r4, [r5, #12]
 8003bfc:	e7cb      	b.n	8003b96 <__swbuf_r+0x1a>
 8003bfe:	4621      	mov	r1, r4
 8003c00:	4628      	mov	r0, r5
 8003c02:	f000 f80d 	bl	8003c20 <__swsetup_r>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d0cc      	beq.n	8003ba4 <__swbuf_r+0x28>
 8003c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8003c0e:	4638      	mov	r0, r7
 8003c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c12:	bf00      	nop
 8003c14:	08005080 	.word	0x08005080
 8003c18:	080050a0 	.word	0x080050a0
 8003c1c:	08005060 	.word	0x08005060

08003c20 <__swsetup_r>:
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <__swsetup_r+0xcc>)
 8003c22:	b570      	push	{r4, r5, r6, lr}
 8003c24:	681d      	ldr	r5, [r3, #0]
 8003c26:	4606      	mov	r6, r0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	b125      	cbz	r5, 8003c36 <__swsetup_r+0x16>
 8003c2c:	69ab      	ldr	r3, [r5, #24]
 8003c2e:	b913      	cbnz	r3, 8003c36 <__swsetup_r+0x16>
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 f953 	bl	8003edc <__sinit>
 8003c36:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <__swsetup_r+0xd0>)
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	d10f      	bne.n	8003c5c <__swsetup_r+0x3c>
 8003c3c:	686c      	ldr	r4, [r5, #4]
 8003c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	0715      	lsls	r5, r2, #28
 8003c46:	d42c      	bmi.n	8003ca2 <__swsetup_r+0x82>
 8003c48:	06d0      	lsls	r0, r2, #27
 8003c4a:	d411      	bmi.n	8003c70 <__swsetup_r+0x50>
 8003c4c:	2209      	movs	r2, #9
 8003c4e:	6032      	str	r2, [r6, #0]
 8003c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5a:	e03e      	b.n	8003cda <__swsetup_r+0xba>
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <__swsetup_r+0xd4>)
 8003c5e:	429c      	cmp	r4, r3
 8003c60:	d101      	bne.n	8003c66 <__swsetup_r+0x46>
 8003c62:	68ac      	ldr	r4, [r5, #8]
 8003c64:	e7eb      	b.n	8003c3e <__swsetup_r+0x1e>
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <__swsetup_r+0xd8>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	bf08      	it	eq
 8003c6c:	68ec      	ldreq	r4, [r5, #12]
 8003c6e:	e7e6      	b.n	8003c3e <__swsetup_r+0x1e>
 8003c70:	0751      	lsls	r1, r2, #29
 8003c72:	d512      	bpl.n	8003c9a <__swsetup_r+0x7a>
 8003c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c76:	b141      	cbz	r1, 8003c8a <__swsetup_r+0x6a>
 8003c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c7c:	4299      	cmp	r1, r3
 8003c7e:	d002      	beq.n	8003c86 <__swsetup_r+0x66>
 8003c80:	4630      	mov	r0, r6
 8003c82:	f000 fa37 	bl	80040f4 <_free_r>
 8003c86:	2300      	movs	r3, #0
 8003c88:	6363      	str	r3, [r4, #52]	; 0x34
 8003c8a:	89a3      	ldrh	r3, [r4, #12]
 8003c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c90:	81a3      	strh	r3, [r4, #12]
 8003c92:	2300      	movs	r3, #0
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	6923      	ldr	r3, [r4, #16]
 8003c98:	6023      	str	r3, [r4, #0]
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	f043 0308 	orr.w	r3, r3, #8
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	6923      	ldr	r3, [r4, #16]
 8003ca4:	b94b      	cbnz	r3, 8003cba <__swsetup_r+0x9a>
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb0:	d003      	beq.n	8003cba <__swsetup_r+0x9a>
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f000 f9c3 	bl	8004040 <__smakebuf_r>
 8003cba:	89a2      	ldrh	r2, [r4, #12]
 8003cbc:	f012 0301 	ands.w	r3, r2, #1
 8003cc0:	d00c      	beq.n	8003cdc <__swsetup_r+0xbc>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60a3      	str	r3, [r4, #8]
 8003cc6:	6963      	ldr	r3, [r4, #20]
 8003cc8:	425b      	negs	r3, r3
 8003cca:	61a3      	str	r3, [r4, #24]
 8003ccc:	6923      	ldr	r3, [r4, #16]
 8003cce:	b953      	cbnz	r3, 8003ce6 <__swsetup_r+0xc6>
 8003cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003cd8:	d1ba      	bne.n	8003c50 <__swsetup_r+0x30>
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	0792      	lsls	r2, r2, #30
 8003cde:	bf58      	it	pl
 8003ce0:	6963      	ldrpl	r3, [r4, #20]
 8003ce2:	60a3      	str	r3, [r4, #8]
 8003ce4:	e7f2      	b.n	8003ccc <__swsetup_r+0xac>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e7f7      	b.n	8003cda <__swsetup_r+0xba>
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c
 8003cf0:	08005080 	.word	0x08005080
 8003cf4:	080050a0 	.word	0x080050a0
 8003cf8:	08005060 	.word	0x08005060

08003cfc <__sflush_r>:
 8003cfc:	898a      	ldrh	r2, [r1, #12]
 8003cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	0710      	lsls	r0, r2, #28
 8003d06:	460c      	mov	r4, r1
 8003d08:	d458      	bmi.n	8003dbc <__sflush_r+0xc0>
 8003d0a:	684b      	ldr	r3, [r1, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	dc05      	bgt.n	8003d1c <__sflush_r+0x20>
 8003d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	dc02      	bgt.n	8003d1c <__sflush_r+0x20>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d1e:	2e00      	cmp	r6, #0
 8003d20:	d0f9      	beq.n	8003d16 <__sflush_r+0x1a>
 8003d22:	2300      	movs	r3, #0
 8003d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d28:	682f      	ldr	r7, [r5, #0]
 8003d2a:	6a21      	ldr	r1, [r4, #32]
 8003d2c:	602b      	str	r3, [r5, #0]
 8003d2e:	d032      	beq.n	8003d96 <__sflush_r+0x9a>
 8003d30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	075a      	lsls	r2, r3, #29
 8003d36:	d505      	bpl.n	8003d44 <__sflush_r+0x48>
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	1ac0      	subs	r0, r0, r3
 8003d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d3e:	b10b      	cbz	r3, 8003d44 <__sflush_r+0x48>
 8003d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d42:	1ac0      	subs	r0, r0, r3
 8003d44:	2300      	movs	r3, #0
 8003d46:	4602      	mov	r2, r0
 8003d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d4a:	6a21      	ldr	r1, [r4, #32]
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b0      	blx	r6
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	89a3      	ldrh	r3, [r4, #12]
 8003d54:	d106      	bne.n	8003d64 <__sflush_r+0x68>
 8003d56:	6829      	ldr	r1, [r5, #0]
 8003d58:	291d      	cmp	r1, #29
 8003d5a:	d848      	bhi.n	8003dee <__sflush_r+0xf2>
 8003d5c:	4a29      	ldr	r2, [pc, #164]	; (8003e04 <__sflush_r+0x108>)
 8003d5e:	40ca      	lsrs	r2, r1
 8003d60:	07d6      	lsls	r6, r2, #31
 8003d62:	d544      	bpl.n	8003dee <__sflush_r+0xf2>
 8003d64:	2200      	movs	r2, #0
 8003d66:	6062      	str	r2, [r4, #4]
 8003d68:	04d9      	lsls	r1, r3, #19
 8003d6a:	6922      	ldr	r2, [r4, #16]
 8003d6c:	6022      	str	r2, [r4, #0]
 8003d6e:	d504      	bpl.n	8003d7a <__sflush_r+0x7e>
 8003d70:	1c42      	adds	r2, r0, #1
 8003d72:	d101      	bne.n	8003d78 <__sflush_r+0x7c>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b903      	cbnz	r3, 8003d7a <__sflush_r+0x7e>
 8003d78:	6560      	str	r0, [r4, #84]	; 0x54
 8003d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d7c:	602f      	str	r7, [r5, #0]
 8003d7e:	2900      	cmp	r1, #0
 8003d80:	d0c9      	beq.n	8003d16 <__sflush_r+0x1a>
 8003d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d86:	4299      	cmp	r1, r3
 8003d88:	d002      	beq.n	8003d90 <__sflush_r+0x94>
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	f000 f9b2 	bl	80040f4 <_free_r>
 8003d90:	2000      	movs	r0, #0
 8003d92:	6360      	str	r0, [r4, #52]	; 0x34
 8003d94:	e7c0      	b.n	8003d18 <__sflush_r+0x1c>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4628      	mov	r0, r5
 8003d9a:	47b0      	blx	r6
 8003d9c:	1c41      	adds	r1, r0, #1
 8003d9e:	d1c8      	bne.n	8003d32 <__sflush_r+0x36>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0c5      	beq.n	8003d32 <__sflush_r+0x36>
 8003da6:	2b1d      	cmp	r3, #29
 8003da8:	d001      	beq.n	8003dae <__sflush_r+0xb2>
 8003daa:	2b16      	cmp	r3, #22
 8003dac:	d101      	bne.n	8003db2 <__sflush_r+0xb6>
 8003dae:	602f      	str	r7, [r5, #0]
 8003db0:	e7b1      	b.n	8003d16 <__sflush_r+0x1a>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db8:	81a3      	strh	r3, [r4, #12]
 8003dba:	e7ad      	b.n	8003d18 <__sflush_r+0x1c>
 8003dbc:	690f      	ldr	r7, [r1, #16]
 8003dbe:	2f00      	cmp	r7, #0
 8003dc0:	d0a9      	beq.n	8003d16 <__sflush_r+0x1a>
 8003dc2:	0793      	lsls	r3, r2, #30
 8003dc4:	680e      	ldr	r6, [r1, #0]
 8003dc6:	bf08      	it	eq
 8003dc8:	694b      	ldreq	r3, [r1, #20]
 8003dca:	600f      	str	r7, [r1, #0]
 8003dcc:	bf18      	it	ne
 8003dce:	2300      	movne	r3, #0
 8003dd0:	eba6 0807 	sub.w	r8, r6, r7
 8003dd4:	608b      	str	r3, [r1, #8]
 8003dd6:	f1b8 0f00 	cmp.w	r8, #0
 8003dda:	dd9c      	ble.n	8003d16 <__sflush_r+0x1a>
 8003ddc:	4643      	mov	r3, r8
 8003dde:	463a      	mov	r2, r7
 8003de0:	6a21      	ldr	r1, [r4, #32]
 8003de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b0      	blx	r6
 8003de8:	2800      	cmp	r0, #0
 8003dea:	dc06      	bgt.n	8003dfa <__sflush_r+0xfe>
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	e78e      	b.n	8003d18 <__sflush_r+0x1c>
 8003dfa:	4407      	add	r7, r0
 8003dfc:	eba8 0800 	sub.w	r8, r8, r0
 8003e00:	e7e9      	b.n	8003dd6 <__sflush_r+0xda>
 8003e02:	bf00      	nop
 8003e04:	20400001 	.word	0x20400001

08003e08 <_fflush_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	690b      	ldr	r3, [r1, #16]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	b1db      	cbz	r3, 8003e4a <_fflush_r+0x42>
 8003e12:	b118      	cbz	r0, 8003e1c <_fflush_r+0x14>
 8003e14:	6983      	ldr	r3, [r0, #24]
 8003e16:	b90b      	cbnz	r3, 8003e1c <_fflush_r+0x14>
 8003e18:	f000 f860 	bl	8003edc <__sinit>
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <_fflush_r+0x48>)
 8003e1e:	429c      	cmp	r4, r3
 8003e20:	d109      	bne.n	8003e36 <_fflush_r+0x2e>
 8003e22:	686c      	ldr	r4, [r5, #4]
 8003e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e28:	b17b      	cbz	r3, 8003e4a <_fflush_r+0x42>
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e32:	f7ff bf63 	b.w	8003cfc <__sflush_r>
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <_fflush_r+0x4c>)
 8003e38:	429c      	cmp	r4, r3
 8003e3a:	d101      	bne.n	8003e40 <_fflush_r+0x38>
 8003e3c:	68ac      	ldr	r4, [r5, #8]
 8003e3e:	e7f1      	b.n	8003e24 <_fflush_r+0x1c>
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <_fflush_r+0x50>)
 8003e42:	429c      	cmp	r4, r3
 8003e44:	bf08      	it	eq
 8003e46:	68ec      	ldreq	r4, [r5, #12]
 8003e48:	e7ec      	b.n	8003e24 <_fflush_r+0x1c>
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	bd38      	pop	{r3, r4, r5, pc}
 8003e4e:	bf00      	nop
 8003e50:	08005080 	.word	0x08005080
 8003e54:	080050a0 	.word	0x080050a0
 8003e58:	08005060 	.word	0x08005060

08003e5c <std>:
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	4604      	mov	r4, r0
 8003e62:	e9c0 3300 	strd	r3, r3, [r0]
 8003e66:	6083      	str	r3, [r0, #8]
 8003e68:	8181      	strh	r1, [r0, #12]
 8003e6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003e6c:	81c2      	strh	r2, [r0, #14]
 8003e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e72:	6183      	str	r3, [r0, #24]
 8003e74:	4619      	mov	r1, r3
 8003e76:	2208      	movs	r2, #8
 8003e78:	305c      	adds	r0, #92	; 0x5c
 8003e7a:	f7ff fcf4 	bl	8003866 <memset>
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <std+0x38>)
 8003e80:	6263      	str	r3, [r4, #36]	; 0x24
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <std+0x3c>)
 8003e84:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <std+0x40>)
 8003e88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <std+0x44>)
 8003e8c:	6224      	str	r4, [r4, #32]
 8003e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	bf00      	nop
 8003e94:	08004a99 	.word	0x08004a99
 8003e98:	08004abb 	.word	0x08004abb
 8003e9c:	08004af3 	.word	0x08004af3
 8003ea0:	08004b17 	.word	0x08004b17

08003ea4 <_cleanup_r>:
 8003ea4:	4901      	ldr	r1, [pc, #4]	; (8003eac <_cleanup_r+0x8>)
 8003ea6:	f000 b885 	b.w	8003fb4 <_fwalk_reent>
 8003eaa:	bf00      	nop
 8003eac:	08003e09 	.word	0x08003e09

08003eb0 <__sfmoreglue>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	1e4a      	subs	r2, r1, #1
 8003eb4:	2568      	movs	r5, #104	; 0x68
 8003eb6:	4355      	muls	r5, r2
 8003eb8:	460e      	mov	r6, r1
 8003eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ebe:	f000 f967 	bl	8004190 <_malloc_r>
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	b140      	cbz	r0, 8003ed8 <__sfmoreglue+0x28>
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	e9c0 1600 	strd	r1, r6, [r0]
 8003ecc:	300c      	adds	r0, #12
 8003ece:	60a0      	str	r0, [r4, #8]
 8003ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ed4:	f7ff fcc7 	bl	8003866 <memset>
 8003ed8:	4620      	mov	r0, r4
 8003eda:	bd70      	pop	{r4, r5, r6, pc}

08003edc <__sinit>:
 8003edc:	6983      	ldr	r3, [r0, #24]
 8003ede:	b510      	push	{r4, lr}
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	bb33      	cbnz	r3, 8003f32 <__sinit+0x56>
 8003ee4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003ee8:	6503      	str	r3, [r0, #80]	; 0x50
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <__sinit+0x58>)
 8003eec:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <__sinit+0x5c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6282      	str	r2, [r0, #40]	; 0x28
 8003ef2:	4298      	cmp	r0, r3
 8003ef4:	bf04      	itt	eq
 8003ef6:	2301      	moveq	r3, #1
 8003ef8:	6183      	streq	r3, [r0, #24]
 8003efa:	f000 f81f 	bl	8003f3c <__sfp>
 8003efe:	6060      	str	r0, [r4, #4]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 f81b 	bl	8003f3c <__sfp>
 8003f06:	60a0      	str	r0, [r4, #8]
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 f817 	bl	8003f3c <__sfp>
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60e0      	str	r0, [r4, #12]
 8003f12:	2104      	movs	r1, #4
 8003f14:	6860      	ldr	r0, [r4, #4]
 8003f16:	f7ff ffa1 	bl	8003e5c <std>
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	2109      	movs	r1, #9
 8003f1e:	68a0      	ldr	r0, [r4, #8]
 8003f20:	f7ff ff9c 	bl	8003e5c <std>
 8003f24:	2202      	movs	r2, #2
 8003f26:	2112      	movs	r1, #18
 8003f28:	68e0      	ldr	r0, [r4, #12]
 8003f2a:	f7ff ff97 	bl	8003e5c <std>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61a3      	str	r3, [r4, #24]
 8003f32:	bd10      	pop	{r4, pc}
 8003f34:	0800505c 	.word	0x0800505c
 8003f38:	08003ea5 	.word	0x08003ea5

08003f3c <__sfp>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <__sfp+0x70>)
 8003f40:	681e      	ldr	r6, [r3, #0]
 8003f42:	69b3      	ldr	r3, [r6, #24]
 8003f44:	4607      	mov	r7, r0
 8003f46:	b913      	cbnz	r3, 8003f4e <__sfp+0x12>
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f7ff ffc7 	bl	8003edc <__sinit>
 8003f4e:	3648      	adds	r6, #72	; 0x48
 8003f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	d503      	bpl.n	8003f60 <__sfp+0x24>
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	b133      	cbz	r3, 8003f6a <__sfp+0x2e>
 8003f5c:	6836      	ldr	r6, [r6, #0]
 8003f5e:	e7f7      	b.n	8003f50 <__sfp+0x14>
 8003f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f64:	b16d      	cbz	r5, 8003f82 <__sfp+0x46>
 8003f66:	3468      	adds	r4, #104	; 0x68
 8003f68:	e7f4      	b.n	8003f54 <__sfp+0x18>
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ff9f 	bl	8003eb0 <__sfmoreglue>
 8003f72:	6030      	str	r0, [r6, #0]
 8003f74:	2800      	cmp	r0, #0
 8003f76:	d1f1      	bne.n	8003f5c <__sfp+0x20>
 8003f78:	230c      	movs	r3, #12
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	4620      	mov	r0, r4
 8003f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <__sfp+0x74>)
 8003f84:	6665      	str	r5, [r4, #100]	; 0x64
 8003f86:	e9c4 5500 	strd	r5, r5, [r4]
 8003f8a:	60a5      	str	r5, [r4, #8]
 8003f8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003f90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003f94:	2208      	movs	r2, #8
 8003f96:	4629      	mov	r1, r5
 8003f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f9c:	f7ff fc63 	bl	8003866 <memset>
 8003fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fa8:	e7e9      	b.n	8003f7e <__sfp+0x42>
 8003faa:	bf00      	nop
 8003fac:	0800505c 	.word	0x0800505c
 8003fb0:	ffff0001 	.word	0xffff0001

08003fb4 <_fwalk_reent>:
 8003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	4680      	mov	r8, r0
 8003fba:	4689      	mov	r9, r1
 8003fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	b914      	cbnz	r4, 8003fca <_fwalk_reent+0x16>
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003fce:	3f01      	subs	r7, #1
 8003fd0:	d501      	bpl.n	8003fd6 <_fwalk_reent+0x22>
 8003fd2:	6824      	ldr	r4, [r4, #0]
 8003fd4:	e7f5      	b.n	8003fc2 <_fwalk_reent+0xe>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d907      	bls.n	8003fec <_fwalk_reent+0x38>
 8003fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	d003      	beq.n	8003fec <_fwalk_reent+0x38>
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	47c8      	blx	r9
 8003fea:	4306      	orrs	r6, r0
 8003fec:	3568      	adds	r5, #104	; 0x68
 8003fee:	e7ee      	b.n	8003fce <_fwalk_reent+0x1a>

08003ff0 <__locale_ctype_ptr_l>:
 8003ff0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003ff4:	4770      	bx	lr

08003ff6 <__swhatbuf_r>:
 8003ff6:	b570      	push	{r4, r5, r6, lr}
 8003ff8:	460e      	mov	r6, r1
 8003ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffe:	2900      	cmp	r1, #0
 8004000:	b096      	sub	sp, #88	; 0x58
 8004002:	4614      	mov	r4, r2
 8004004:	461d      	mov	r5, r3
 8004006:	da07      	bge.n	8004018 <__swhatbuf_r+0x22>
 8004008:	2300      	movs	r3, #0
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	89b3      	ldrh	r3, [r6, #12]
 800400e:	061a      	lsls	r2, r3, #24
 8004010:	d410      	bmi.n	8004034 <__swhatbuf_r+0x3e>
 8004012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004016:	e00e      	b.n	8004036 <__swhatbuf_r+0x40>
 8004018:	466a      	mov	r2, sp
 800401a:	f000 fdaf 	bl	8004b7c <_fstat_r>
 800401e:	2800      	cmp	r0, #0
 8004020:	dbf2      	blt.n	8004008 <__swhatbuf_r+0x12>
 8004022:	9a01      	ldr	r2, [sp, #4]
 8004024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800402c:	425a      	negs	r2, r3
 800402e:	415a      	adcs	r2, r3
 8004030:	602a      	str	r2, [r5, #0]
 8004032:	e7ee      	b.n	8004012 <__swhatbuf_r+0x1c>
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	2000      	movs	r0, #0
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	b016      	add	sp, #88	; 0x58
 800403c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004040 <__smakebuf_r>:
 8004040:	898b      	ldrh	r3, [r1, #12]
 8004042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004044:	079d      	lsls	r5, r3, #30
 8004046:	4606      	mov	r6, r0
 8004048:	460c      	mov	r4, r1
 800404a:	d507      	bpl.n	800405c <__smakebuf_r+0x1c>
 800404c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	6123      	str	r3, [r4, #16]
 8004054:	2301      	movs	r3, #1
 8004056:	6163      	str	r3, [r4, #20]
 8004058:	b002      	add	sp, #8
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	ab01      	add	r3, sp, #4
 800405e:	466a      	mov	r2, sp
 8004060:	f7ff ffc9 	bl	8003ff6 <__swhatbuf_r>
 8004064:	9900      	ldr	r1, [sp, #0]
 8004066:	4605      	mov	r5, r0
 8004068:	4630      	mov	r0, r6
 800406a:	f000 f891 	bl	8004190 <_malloc_r>
 800406e:	b948      	cbnz	r0, 8004084 <__smakebuf_r+0x44>
 8004070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004074:	059a      	lsls	r2, r3, #22
 8004076:	d4ef      	bmi.n	8004058 <__smakebuf_r+0x18>
 8004078:	f023 0303 	bic.w	r3, r3, #3
 800407c:	f043 0302 	orr.w	r3, r3, #2
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	e7e3      	b.n	800404c <__smakebuf_r+0xc>
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <__smakebuf_r+0x7c>)
 8004086:	62b3      	str	r3, [r6, #40]	; 0x28
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	6020      	str	r0, [r4, #0]
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	9b00      	ldr	r3, [sp, #0]
 8004094:	6163      	str	r3, [r4, #20]
 8004096:	9b01      	ldr	r3, [sp, #4]
 8004098:	6120      	str	r0, [r4, #16]
 800409a:	b15b      	cbz	r3, 80040b4 <__smakebuf_r+0x74>
 800409c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 fd7d 	bl	8004ba0 <_isatty_r>
 80040a6:	b128      	cbz	r0, 80040b4 <__smakebuf_r+0x74>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	f023 0303 	bic.w	r3, r3, #3
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	81a3      	strh	r3, [r4, #12]
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	431d      	orrs	r5, r3
 80040b8:	81a5      	strh	r5, [r4, #12]
 80040ba:	e7cd      	b.n	8004058 <__smakebuf_r+0x18>
 80040bc:	08003ea5 	.word	0x08003ea5

080040c0 <malloc>:
 80040c0:	4b02      	ldr	r3, [pc, #8]	; (80040cc <malloc+0xc>)
 80040c2:	4601      	mov	r1, r0
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	f000 b863 	b.w	8004190 <_malloc_r>
 80040ca:	bf00      	nop
 80040cc:	2000000c 	.word	0x2000000c

080040d0 <__ascii_mbtowc>:
 80040d0:	b082      	sub	sp, #8
 80040d2:	b901      	cbnz	r1, 80040d6 <__ascii_mbtowc+0x6>
 80040d4:	a901      	add	r1, sp, #4
 80040d6:	b142      	cbz	r2, 80040ea <__ascii_mbtowc+0x1a>
 80040d8:	b14b      	cbz	r3, 80040ee <__ascii_mbtowc+0x1e>
 80040da:	7813      	ldrb	r3, [r2, #0]
 80040dc:	600b      	str	r3, [r1, #0]
 80040de:	7812      	ldrb	r2, [r2, #0]
 80040e0:	1c10      	adds	r0, r2, #0
 80040e2:	bf18      	it	ne
 80040e4:	2001      	movne	r0, #1
 80040e6:	b002      	add	sp, #8
 80040e8:	4770      	bx	lr
 80040ea:	4610      	mov	r0, r2
 80040ec:	e7fb      	b.n	80040e6 <__ascii_mbtowc+0x16>
 80040ee:	f06f 0001 	mvn.w	r0, #1
 80040f2:	e7f8      	b.n	80040e6 <__ascii_mbtowc+0x16>

080040f4 <_free_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4605      	mov	r5, r0
 80040f8:	2900      	cmp	r1, #0
 80040fa:	d045      	beq.n	8004188 <_free_r+0x94>
 80040fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004100:	1f0c      	subs	r4, r1, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	bfb8      	it	lt
 8004106:	18e4      	addlt	r4, r4, r3
 8004108:	f000 fd77 	bl	8004bfa <__malloc_lock>
 800410c:	4a1f      	ldr	r2, [pc, #124]	; (800418c <_free_r+0x98>)
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	4610      	mov	r0, r2
 8004112:	b933      	cbnz	r3, 8004122 <_free_r+0x2e>
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	6014      	str	r4, [r2, #0]
 8004118:	4628      	mov	r0, r5
 800411a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800411e:	f000 bd6d 	b.w	8004bfc <__malloc_unlock>
 8004122:	42a3      	cmp	r3, r4
 8004124:	d90c      	bls.n	8004140 <_free_r+0x4c>
 8004126:	6821      	ldr	r1, [r4, #0]
 8004128:	1862      	adds	r2, r4, r1
 800412a:	4293      	cmp	r3, r2
 800412c:	bf04      	itt	eq
 800412e:	681a      	ldreq	r2, [r3, #0]
 8004130:	685b      	ldreq	r3, [r3, #4]
 8004132:	6063      	str	r3, [r4, #4]
 8004134:	bf04      	itt	eq
 8004136:	1852      	addeq	r2, r2, r1
 8004138:	6022      	streq	r2, [r4, #0]
 800413a:	6004      	str	r4, [r0, #0]
 800413c:	e7ec      	b.n	8004118 <_free_r+0x24>
 800413e:	4613      	mov	r3, r2
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	b10a      	cbz	r2, 8004148 <_free_r+0x54>
 8004144:	42a2      	cmp	r2, r4
 8004146:	d9fa      	bls.n	800413e <_free_r+0x4a>
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	1858      	adds	r0, r3, r1
 800414c:	42a0      	cmp	r0, r4
 800414e:	d10b      	bne.n	8004168 <_free_r+0x74>
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	4401      	add	r1, r0
 8004154:	1858      	adds	r0, r3, r1
 8004156:	4282      	cmp	r2, r0
 8004158:	6019      	str	r1, [r3, #0]
 800415a:	d1dd      	bne.n	8004118 <_free_r+0x24>
 800415c:	6810      	ldr	r0, [r2, #0]
 800415e:	6852      	ldr	r2, [r2, #4]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	4401      	add	r1, r0
 8004164:	6019      	str	r1, [r3, #0]
 8004166:	e7d7      	b.n	8004118 <_free_r+0x24>
 8004168:	d902      	bls.n	8004170 <_free_r+0x7c>
 800416a:	230c      	movs	r3, #12
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	e7d3      	b.n	8004118 <_free_r+0x24>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	1821      	adds	r1, r4, r0
 8004174:	428a      	cmp	r2, r1
 8004176:	bf04      	itt	eq
 8004178:	6811      	ldreq	r1, [r2, #0]
 800417a:	6852      	ldreq	r2, [r2, #4]
 800417c:	6062      	str	r2, [r4, #4]
 800417e:	bf04      	itt	eq
 8004180:	1809      	addeq	r1, r1, r0
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	605c      	str	r4, [r3, #4]
 8004186:	e7c7      	b.n	8004118 <_free_r+0x24>
 8004188:	bd38      	pop	{r3, r4, r5, pc}
 800418a:	bf00      	nop
 800418c:	20000200 	.word	0x20000200

08004190 <_malloc_r>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	1ccd      	adds	r5, r1, #3
 8004194:	f025 0503 	bic.w	r5, r5, #3
 8004198:	3508      	adds	r5, #8
 800419a:	2d0c      	cmp	r5, #12
 800419c:	bf38      	it	cc
 800419e:	250c      	movcc	r5, #12
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	4606      	mov	r6, r0
 80041a4:	db01      	blt.n	80041aa <_malloc_r+0x1a>
 80041a6:	42a9      	cmp	r1, r5
 80041a8:	d903      	bls.n	80041b2 <_malloc_r+0x22>
 80041aa:	230c      	movs	r3, #12
 80041ac:	6033      	str	r3, [r6, #0]
 80041ae:	2000      	movs	r0, #0
 80041b0:	bd70      	pop	{r4, r5, r6, pc}
 80041b2:	f000 fd22 	bl	8004bfa <__malloc_lock>
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <_malloc_r+0xac>)
 80041b8:	6814      	ldr	r4, [r2, #0]
 80041ba:	4621      	mov	r1, r4
 80041bc:	b991      	cbnz	r1, 80041e4 <_malloc_r+0x54>
 80041be:	4c20      	ldr	r4, [pc, #128]	; (8004240 <_malloc_r+0xb0>)
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	b91b      	cbnz	r3, 80041cc <_malloc_r+0x3c>
 80041c4:	4630      	mov	r0, r6
 80041c6:	f000 fc57 	bl	8004a78 <_sbrk_r>
 80041ca:	6020      	str	r0, [r4, #0]
 80041cc:	4629      	mov	r1, r5
 80041ce:	4630      	mov	r0, r6
 80041d0:	f000 fc52 	bl	8004a78 <_sbrk_r>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	d124      	bne.n	8004222 <_malloc_r+0x92>
 80041d8:	230c      	movs	r3, #12
 80041da:	6033      	str	r3, [r6, #0]
 80041dc:	4630      	mov	r0, r6
 80041de:	f000 fd0d 	bl	8004bfc <__malloc_unlock>
 80041e2:	e7e4      	b.n	80041ae <_malloc_r+0x1e>
 80041e4:	680b      	ldr	r3, [r1, #0]
 80041e6:	1b5b      	subs	r3, r3, r5
 80041e8:	d418      	bmi.n	800421c <_malloc_r+0x8c>
 80041ea:	2b0b      	cmp	r3, #11
 80041ec:	d90f      	bls.n	800420e <_malloc_r+0x7e>
 80041ee:	600b      	str	r3, [r1, #0]
 80041f0:	50cd      	str	r5, [r1, r3]
 80041f2:	18cc      	adds	r4, r1, r3
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 fd01 	bl	8004bfc <__malloc_unlock>
 80041fa:	f104 000b 	add.w	r0, r4, #11
 80041fe:	1d23      	adds	r3, r4, #4
 8004200:	f020 0007 	bic.w	r0, r0, #7
 8004204:	1ac3      	subs	r3, r0, r3
 8004206:	d0d3      	beq.n	80041b0 <_malloc_r+0x20>
 8004208:	425a      	negs	r2, r3
 800420a:	50e2      	str	r2, [r4, r3]
 800420c:	e7d0      	b.n	80041b0 <_malloc_r+0x20>
 800420e:	428c      	cmp	r4, r1
 8004210:	684b      	ldr	r3, [r1, #4]
 8004212:	bf16      	itet	ne
 8004214:	6063      	strne	r3, [r4, #4]
 8004216:	6013      	streq	r3, [r2, #0]
 8004218:	460c      	movne	r4, r1
 800421a:	e7eb      	b.n	80041f4 <_malloc_r+0x64>
 800421c:	460c      	mov	r4, r1
 800421e:	6849      	ldr	r1, [r1, #4]
 8004220:	e7cc      	b.n	80041bc <_malloc_r+0x2c>
 8004222:	1cc4      	adds	r4, r0, #3
 8004224:	f024 0403 	bic.w	r4, r4, #3
 8004228:	42a0      	cmp	r0, r4
 800422a:	d005      	beq.n	8004238 <_malloc_r+0xa8>
 800422c:	1a21      	subs	r1, r4, r0
 800422e:	4630      	mov	r0, r6
 8004230:	f000 fc22 	bl	8004a78 <_sbrk_r>
 8004234:	3001      	adds	r0, #1
 8004236:	d0cf      	beq.n	80041d8 <_malloc_r+0x48>
 8004238:	6025      	str	r5, [r4, #0]
 800423a:	e7db      	b.n	80041f4 <_malloc_r+0x64>
 800423c:	20000200 	.word	0x20000200
 8004240:	20000204 	.word	0x20000204

08004244 <__ssputs_r>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	688e      	ldr	r6, [r1, #8]
 800424a:	429e      	cmp	r6, r3
 800424c:	4682      	mov	sl, r0
 800424e:	460c      	mov	r4, r1
 8004250:	4690      	mov	r8, r2
 8004252:	4699      	mov	r9, r3
 8004254:	d837      	bhi.n	80042c6 <__ssputs_r+0x82>
 8004256:	898a      	ldrh	r2, [r1, #12]
 8004258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800425c:	d031      	beq.n	80042c2 <__ssputs_r+0x7e>
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	6909      	ldr	r1, [r1, #16]
 8004262:	1a6f      	subs	r7, r5, r1
 8004264:	6965      	ldr	r5, [r4, #20]
 8004266:	2302      	movs	r3, #2
 8004268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800426c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004270:	f109 0301 	add.w	r3, r9, #1
 8004274:	443b      	add	r3, r7
 8004276:	429d      	cmp	r5, r3
 8004278:	bf38      	it	cc
 800427a:	461d      	movcc	r5, r3
 800427c:	0553      	lsls	r3, r2, #21
 800427e:	d530      	bpl.n	80042e2 <__ssputs_r+0x9e>
 8004280:	4629      	mov	r1, r5
 8004282:	f7ff ff85 	bl	8004190 <_malloc_r>
 8004286:	4606      	mov	r6, r0
 8004288:	b950      	cbnz	r0, 80042a0 <__ssputs_r+0x5c>
 800428a:	230c      	movs	r3, #12
 800428c:	f8ca 3000 	str.w	r3, [sl]
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a0:	463a      	mov	r2, r7
 80042a2:	6921      	ldr	r1, [r4, #16]
 80042a4:	f000 fc9e 	bl	8004be4 <memcpy>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	6126      	str	r6, [r4, #16]
 80042b6:	6165      	str	r5, [r4, #20]
 80042b8:	443e      	add	r6, r7
 80042ba:	1bed      	subs	r5, r5, r7
 80042bc:	6026      	str	r6, [r4, #0]
 80042be:	60a5      	str	r5, [r4, #8]
 80042c0:	464e      	mov	r6, r9
 80042c2:	454e      	cmp	r6, r9
 80042c4:	d900      	bls.n	80042c8 <__ssputs_r+0x84>
 80042c6:	464e      	mov	r6, r9
 80042c8:	4632      	mov	r2, r6
 80042ca:	4641      	mov	r1, r8
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	f7ff fab1 	bl	8003834 <memmove>
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	1b9b      	subs	r3, r3, r6
 80042d6:	60a3      	str	r3, [r4, #8]
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	441e      	add	r6, r3
 80042dc:	6026      	str	r6, [r4, #0]
 80042de:	2000      	movs	r0, #0
 80042e0:	e7dc      	b.n	800429c <__ssputs_r+0x58>
 80042e2:	462a      	mov	r2, r5
 80042e4:	f000 fc8b 	bl	8004bfe <_realloc_r>
 80042e8:	4606      	mov	r6, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1e2      	bne.n	80042b4 <__ssputs_r+0x70>
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	4650      	mov	r0, sl
 80042f2:	f7ff feff 	bl	80040f4 <_free_r>
 80042f6:	e7c8      	b.n	800428a <__ssputs_r+0x46>

080042f8 <_svfiprintf_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	461d      	mov	r5, r3
 80042fe:	898b      	ldrh	r3, [r1, #12]
 8004300:	061f      	lsls	r7, r3, #24
 8004302:	b09d      	sub	sp, #116	; 0x74
 8004304:	4680      	mov	r8, r0
 8004306:	460c      	mov	r4, r1
 8004308:	4616      	mov	r6, r2
 800430a:	d50f      	bpl.n	800432c <_svfiprintf_r+0x34>
 800430c:	690b      	ldr	r3, [r1, #16]
 800430e:	b96b      	cbnz	r3, 800432c <_svfiprintf_r+0x34>
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	f7ff ff3d 	bl	8004190 <_malloc_r>
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	6120      	str	r0, [r4, #16]
 800431a:	b928      	cbnz	r0, 8004328 <_svfiprintf_r+0x30>
 800431c:	230c      	movs	r3, #12
 800431e:	f8c8 3000 	str.w	r3, [r8]
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	e0c8      	b.n	80044ba <_svfiprintf_r+0x1c2>
 8004328:	2340      	movs	r3, #64	; 0x40
 800432a:	6163      	str	r3, [r4, #20]
 800432c:	2300      	movs	r3, #0
 800432e:	9309      	str	r3, [sp, #36]	; 0x24
 8004330:	2320      	movs	r3, #32
 8004332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004336:	2330      	movs	r3, #48	; 0x30
 8004338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800433c:	9503      	str	r5, [sp, #12]
 800433e:	f04f 0b01 	mov.w	fp, #1
 8004342:	4637      	mov	r7, r6
 8004344:	463d      	mov	r5, r7
 8004346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800434a:	b10b      	cbz	r3, 8004350 <_svfiprintf_r+0x58>
 800434c:	2b25      	cmp	r3, #37	; 0x25
 800434e:	d13e      	bne.n	80043ce <_svfiprintf_r+0xd6>
 8004350:	ebb7 0a06 	subs.w	sl, r7, r6
 8004354:	d00b      	beq.n	800436e <_svfiprintf_r+0x76>
 8004356:	4653      	mov	r3, sl
 8004358:	4632      	mov	r2, r6
 800435a:	4621      	mov	r1, r4
 800435c:	4640      	mov	r0, r8
 800435e:	f7ff ff71 	bl	8004244 <__ssputs_r>
 8004362:	3001      	adds	r0, #1
 8004364:	f000 80a4 	beq.w	80044b0 <_svfiprintf_r+0x1b8>
 8004368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436a:	4453      	add	r3, sl
 800436c:	9309      	str	r3, [sp, #36]	; 0x24
 800436e:	783b      	ldrb	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 809d 	beq.w	80044b0 <_svfiprintf_r+0x1b8>
 8004376:	2300      	movs	r3, #0
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004380:	9304      	str	r3, [sp, #16]
 8004382:	9307      	str	r3, [sp, #28]
 8004384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004388:	931a      	str	r3, [sp, #104]	; 0x68
 800438a:	462f      	mov	r7, r5
 800438c:	2205      	movs	r2, #5
 800438e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004392:	4850      	ldr	r0, [pc, #320]	; (80044d4 <_svfiprintf_r+0x1dc>)
 8004394:	f7fb ff3c 	bl	8000210 <memchr>
 8004398:	9b04      	ldr	r3, [sp, #16]
 800439a:	b9d0      	cbnz	r0, 80043d2 <_svfiprintf_r+0xda>
 800439c:	06d9      	lsls	r1, r3, #27
 800439e:	bf44      	itt	mi
 80043a0:	2220      	movmi	r2, #32
 80043a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043a6:	071a      	lsls	r2, r3, #28
 80043a8:	bf44      	itt	mi
 80043aa:	222b      	movmi	r2, #43	; 0x2b
 80043ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043b0:	782a      	ldrb	r2, [r5, #0]
 80043b2:	2a2a      	cmp	r2, #42	; 0x2a
 80043b4:	d015      	beq.n	80043e2 <_svfiprintf_r+0xea>
 80043b6:	9a07      	ldr	r2, [sp, #28]
 80043b8:	462f      	mov	r7, r5
 80043ba:	2000      	movs	r0, #0
 80043bc:	250a      	movs	r5, #10
 80043be:	4639      	mov	r1, r7
 80043c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043c4:	3b30      	subs	r3, #48	; 0x30
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d94d      	bls.n	8004466 <_svfiprintf_r+0x16e>
 80043ca:	b1b8      	cbz	r0, 80043fc <_svfiprintf_r+0x104>
 80043cc:	e00f      	b.n	80043ee <_svfiprintf_r+0xf6>
 80043ce:	462f      	mov	r7, r5
 80043d0:	e7b8      	b.n	8004344 <_svfiprintf_r+0x4c>
 80043d2:	4a40      	ldr	r2, [pc, #256]	; (80044d4 <_svfiprintf_r+0x1dc>)
 80043d4:	1a80      	subs	r0, r0, r2
 80043d6:	fa0b f000 	lsl.w	r0, fp, r0
 80043da:	4318      	orrs	r0, r3
 80043dc:	9004      	str	r0, [sp, #16]
 80043de:	463d      	mov	r5, r7
 80043e0:	e7d3      	b.n	800438a <_svfiprintf_r+0x92>
 80043e2:	9a03      	ldr	r2, [sp, #12]
 80043e4:	1d11      	adds	r1, r2, #4
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	9103      	str	r1, [sp, #12]
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	db01      	blt.n	80043f2 <_svfiprintf_r+0xfa>
 80043ee:	9207      	str	r2, [sp, #28]
 80043f0:	e004      	b.n	80043fc <_svfiprintf_r+0x104>
 80043f2:	4252      	negs	r2, r2
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	9207      	str	r2, [sp, #28]
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	783b      	ldrb	r3, [r7, #0]
 80043fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004400:	d10c      	bne.n	800441c <_svfiprintf_r+0x124>
 8004402:	787b      	ldrb	r3, [r7, #1]
 8004404:	2b2a      	cmp	r3, #42	; 0x2a
 8004406:	d133      	bne.n	8004470 <_svfiprintf_r+0x178>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	9203      	str	r2, [sp, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	bfb8      	it	lt
 8004414:	f04f 33ff 	movlt.w	r3, #4294967295
 8004418:	3702      	adds	r7, #2
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	4d2e      	ldr	r5, [pc, #184]	; (80044d8 <_svfiprintf_r+0x1e0>)
 800441e:	7839      	ldrb	r1, [r7, #0]
 8004420:	2203      	movs	r2, #3
 8004422:	4628      	mov	r0, r5
 8004424:	f7fb fef4 	bl	8000210 <memchr>
 8004428:	b138      	cbz	r0, 800443a <_svfiprintf_r+0x142>
 800442a:	2340      	movs	r3, #64	; 0x40
 800442c:	1b40      	subs	r0, r0, r5
 800442e:	fa03 f000 	lsl.w	r0, r3, r0
 8004432:	9b04      	ldr	r3, [sp, #16]
 8004434:	4303      	orrs	r3, r0
 8004436:	3701      	adds	r7, #1
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	7839      	ldrb	r1, [r7, #0]
 800443c:	4827      	ldr	r0, [pc, #156]	; (80044dc <_svfiprintf_r+0x1e4>)
 800443e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004442:	2206      	movs	r2, #6
 8004444:	1c7e      	adds	r6, r7, #1
 8004446:	f7fb fee3 	bl	8000210 <memchr>
 800444a:	2800      	cmp	r0, #0
 800444c:	d038      	beq.n	80044c0 <_svfiprintf_r+0x1c8>
 800444e:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <_svfiprintf_r+0x1e8>)
 8004450:	bb13      	cbnz	r3, 8004498 <_svfiprintf_r+0x1a0>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	3307      	adds	r3, #7
 8004456:	f023 0307 	bic.w	r3, r3, #7
 800445a:	3308      	adds	r3, #8
 800445c:	9303      	str	r3, [sp, #12]
 800445e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004460:	444b      	add	r3, r9
 8004462:	9309      	str	r3, [sp, #36]	; 0x24
 8004464:	e76d      	b.n	8004342 <_svfiprintf_r+0x4a>
 8004466:	fb05 3202 	mla	r2, r5, r2, r3
 800446a:	2001      	movs	r0, #1
 800446c:	460f      	mov	r7, r1
 800446e:	e7a6      	b.n	80043be <_svfiprintf_r+0xc6>
 8004470:	2300      	movs	r3, #0
 8004472:	3701      	adds	r7, #1
 8004474:	9305      	str	r3, [sp, #20]
 8004476:	4619      	mov	r1, r3
 8004478:	250a      	movs	r5, #10
 800447a:	4638      	mov	r0, r7
 800447c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004480:	3a30      	subs	r2, #48	; 0x30
 8004482:	2a09      	cmp	r2, #9
 8004484:	d903      	bls.n	800448e <_svfiprintf_r+0x196>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0c8      	beq.n	800441c <_svfiprintf_r+0x124>
 800448a:	9105      	str	r1, [sp, #20]
 800448c:	e7c6      	b.n	800441c <_svfiprintf_r+0x124>
 800448e:	fb05 2101 	mla	r1, r5, r1, r2
 8004492:	2301      	movs	r3, #1
 8004494:	4607      	mov	r7, r0
 8004496:	e7f0      	b.n	800447a <_svfiprintf_r+0x182>
 8004498:	ab03      	add	r3, sp, #12
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	4622      	mov	r2, r4
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <_svfiprintf_r+0x1ec>)
 80044a0:	a904      	add	r1, sp, #16
 80044a2:	4640      	mov	r0, r8
 80044a4:	f3af 8000 	nop.w
 80044a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80044ac:	4681      	mov	r9, r0
 80044ae:	d1d6      	bne.n	800445e <_svfiprintf_r+0x166>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	065b      	lsls	r3, r3, #25
 80044b4:	f53f af35 	bmi.w	8004322 <_svfiprintf_r+0x2a>
 80044b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ba:	b01d      	add	sp, #116	; 0x74
 80044bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c0:	ab03      	add	r3, sp, #12
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4622      	mov	r2, r4
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <_svfiprintf_r+0x1ec>)
 80044c8:	a904      	add	r1, sp, #16
 80044ca:	4640      	mov	r0, r8
 80044cc:	f000 f9c2 	bl	8004854 <_printf_i>
 80044d0:	e7ea      	b.n	80044a8 <_svfiprintf_r+0x1b0>
 80044d2:	bf00      	nop
 80044d4:	080050ca 	.word	0x080050ca
 80044d8:	080050d0 	.word	0x080050d0
 80044dc:	080050d4 	.word	0x080050d4
 80044e0:	00000000 	.word	0x00000000
 80044e4:	08004245 	.word	0x08004245

080044e8 <__sfputc_r>:
 80044e8:	6893      	ldr	r3, [r2, #8]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	b410      	push	{r4}
 80044f0:	6093      	str	r3, [r2, #8]
 80044f2:	da08      	bge.n	8004506 <__sfputc_r+0x1e>
 80044f4:	6994      	ldr	r4, [r2, #24]
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	db01      	blt.n	80044fe <__sfputc_r+0x16>
 80044fa:	290a      	cmp	r1, #10
 80044fc:	d103      	bne.n	8004506 <__sfputc_r+0x1e>
 80044fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004502:	f7ff bb3b 	b.w	8003b7c <__swbuf_r>
 8004506:	6813      	ldr	r3, [r2, #0]
 8004508:	1c58      	adds	r0, r3, #1
 800450a:	6010      	str	r0, [r2, #0]
 800450c:	7019      	strb	r1, [r3, #0]
 800450e:	4608      	mov	r0, r1
 8004510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004514:	4770      	bx	lr

08004516 <__sfputs_r>:
 8004516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	4614      	mov	r4, r2
 800451e:	18d5      	adds	r5, r2, r3
 8004520:	42ac      	cmp	r4, r5
 8004522:	d101      	bne.n	8004528 <__sfputs_r+0x12>
 8004524:	2000      	movs	r0, #0
 8004526:	e007      	b.n	8004538 <__sfputs_r+0x22>
 8004528:	463a      	mov	r2, r7
 800452a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800452e:	4630      	mov	r0, r6
 8004530:	f7ff ffda 	bl	80044e8 <__sfputc_r>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d1f3      	bne.n	8004520 <__sfputs_r+0xa>
 8004538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800453c <_vfiprintf_r>:
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	460c      	mov	r4, r1
 8004542:	b09d      	sub	sp, #116	; 0x74
 8004544:	4617      	mov	r7, r2
 8004546:	461d      	mov	r5, r3
 8004548:	4606      	mov	r6, r0
 800454a:	b118      	cbz	r0, 8004554 <_vfiprintf_r+0x18>
 800454c:	6983      	ldr	r3, [r0, #24]
 800454e:	b90b      	cbnz	r3, 8004554 <_vfiprintf_r+0x18>
 8004550:	f7ff fcc4 	bl	8003edc <__sinit>
 8004554:	4b7c      	ldr	r3, [pc, #496]	; (8004748 <_vfiprintf_r+0x20c>)
 8004556:	429c      	cmp	r4, r3
 8004558:	d158      	bne.n	800460c <_vfiprintf_r+0xd0>
 800455a:	6874      	ldr	r4, [r6, #4]
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	0718      	lsls	r0, r3, #28
 8004560:	d55e      	bpl.n	8004620 <_vfiprintf_r+0xe4>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05b      	beq.n	8004620 <_vfiprintf_r+0xe4>
 8004568:	2300      	movs	r3, #0
 800456a:	9309      	str	r3, [sp, #36]	; 0x24
 800456c:	2320      	movs	r3, #32
 800456e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004572:	2330      	movs	r3, #48	; 0x30
 8004574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004578:	9503      	str	r5, [sp, #12]
 800457a:	f04f 0b01 	mov.w	fp, #1
 800457e:	46b8      	mov	r8, r7
 8004580:	4645      	mov	r5, r8
 8004582:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004586:	b10b      	cbz	r3, 800458c <_vfiprintf_r+0x50>
 8004588:	2b25      	cmp	r3, #37	; 0x25
 800458a:	d154      	bne.n	8004636 <_vfiprintf_r+0xfa>
 800458c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004590:	d00b      	beq.n	80045aa <_vfiprintf_r+0x6e>
 8004592:	4653      	mov	r3, sl
 8004594:	463a      	mov	r2, r7
 8004596:	4621      	mov	r1, r4
 8004598:	4630      	mov	r0, r6
 800459a:	f7ff ffbc 	bl	8004516 <__sfputs_r>
 800459e:	3001      	adds	r0, #1
 80045a0:	f000 80c2 	beq.w	8004728 <_vfiprintf_r+0x1ec>
 80045a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a6:	4453      	add	r3, sl
 80045a8:	9309      	str	r3, [sp, #36]	; 0x24
 80045aa:	f898 3000 	ldrb.w	r3, [r8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80ba 	beq.w	8004728 <_vfiprintf_r+0x1ec>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045be:	9304      	str	r3, [sp, #16]
 80045c0:	9307      	str	r3, [sp, #28]
 80045c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045c6:	931a      	str	r3, [sp, #104]	; 0x68
 80045c8:	46a8      	mov	r8, r5
 80045ca:	2205      	movs	r2, #5
 80045cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80045d0:	485e      	ldr	r0, [pc, #376]	; (800474c <_vfiprintf_r+0x210>)
 80045d2:	f7fb fe1d 	bl	8000210 <memchr>
 80045d6:	9b04      	ldr	r3, [sp, #16]
 80045d8:	bb78      	cbnz	r0, 800463a <_vfiprintf_r+0xfe>
 80045da:	06d9      	lsls	r1, r3, #27
 80045dc:	bf44      	itt	mi
 80045de:	2220      	movmi	r2, #32
 80045e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045e4:	071a      	lsls	r2, r3, #28
 80045e6:	bf44      	itt	mi
 80045e8:	222b      	movmi	r2, #43	; 0x2b
 80045ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045ee:	782a      	ldrb	r2, [r5, #0]
 80045f0:	2a2a      	cmp	r2, #42	; 0x2a
 80045f2:	d02a      	beq.n	800464a <_vfiprintf_r+0x10e>
 80045f4:	9a07      	ldr	r2, [sp, #28]
 80045f6:	46a8      	mov	r8, r5
 80045f8:	2000      	movs	r0, #0
 80045fa:	250a      	movs	r5, #10
 80045fc:	4641      	mov	r1, r8
 80045fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004602:	3b30      	subs	r3, #48	; 0x30
 8004604:	2b09      	cmp	r3, #9
 8004606:	d969      	bls.n	80046dc <_vfiprintf_r+0x1a0>
 8004608:	b360      	cbz	r0, 8004664 <_vfiprintf_r+0x128>
 800460a:	e024      	b.n	8004656 <_vfiprintf_r+0x11a>
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <_vfiprintf_r+0x214>)
 800460e:	429c      	cmp	r4, r3
 8004610:	d101      	bne.n	8004616 <_vfiprintf_r+0xda>
 8004612:	68b4      	ldr	r4, [r6, #8]
 8004614:	e7a2      	b.n	800455c <_vfiprintf_r+0x20>
 8004616:	4b4f      	ldr	r3, [pc, #316]	; (8004754 <_vfiprintf_r+0x218>)
 8004618:	429c      	cmp	r4, r3
 800461a:	bf08      	it	eq
 800461c:	68f4      	ldreq	r4, [r6, #12]
 800461e:	e79d      	b.n	800455c <_vfiprintf_r+0x20>
 8004620:	4621      	mov	r1, r4
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff fafc 	bl	8003c20 <__swsetup_r>
 8004628:	2800      	cmp	r0, #0
 800462a:	d09d      	beq.n	8004568 <_vfiprintf_r+0x2c>
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	b01d      	add	sp, #116	; 0x74
 8004632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004636:	46a8      	mov	r8, r5
 8004638:	e7a2      	b.n	8004580 <_vfiprintf_r+0x44>
 800463a:	4a44      	ldr	r2, [pc, #272]	; (800474c <_vfiprintf_r+0x210>)
 800463c:	1a80      	subs	r0, r0, r2
 800463e:	fa0b f000 	lsl.w	r0, fp, r0
 8004642:	4318      	orrs	r0, r3
 8004644:	9004      	str	r0, [sp, #16]
 8004646:	4645      	mov	r5, r8
 8004648:	e7be      	b.n	80045c8 <_vfiprintf_r+0x8c>
 800464a:	9a03      	ldr	r2, [sp, #12]
 800464c:	1d11      	adds	r1, r2, #4
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	9103      	str	r1, [sp, #12]
 8004652:	2a00      	cmp	r2, #0
 8004654:	db01      	blt.n	800465a <_vfiprintf_r+0x11e>
 8004656:	9207      	str	r2, [sp, #28]
 8004658:	e004      	b.n	8004664 <_vfiprintf_r+0x128>
 800465a:	4252      	negs	r2, r2
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	9207      	str	r2, [sp, #28]
 8004662:	9304      	str	r3, [sp, #16]
 8004664:	f898 3000 	ldrb.w	r3, [r8]
 8004668:	2b2e      	cmp	r3, #46	; 0x2e
 800466a:	d10e      	bne.n	800468a <_vfiprintf_r+0x14e>
 800466c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004670:	2b2a      	cmp	r3, #42	; 0x2a
 8004672:	d138      	bne.n	80046e6 <_vfiprintf_r+0x1aa>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	1d1a      	adds	r2, r3, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	9203      	str	r2, [sp, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	bfb8      	it	lt
 8004680:	f04f 33ff 	movlt.w	r3, #4294967295
 8004684:	f108 0802 	add.w	r8, r8, #2
 8004688:	9305      	str	r3, [sp, #20]
 800468a:	4d33      	ldr	r5, [pc, #204]	; (8004758 <_vfiprintf_r+0x21c>)
 800468c:	f898 1000 	ldrb.w	r1, [r8]
 8004690:	2203      	movs	r2, #3
 8004692:	4628      	mov	r0, r5
 8004694:	f7fb fdbc 	bl	8000210 <memchr>
 8004698:	b140      	cbz	r0, 80046ac <_vfiprintf_r+0x170>
 800469a:	2340      	movs	r3, #64	; 0x40
 800469c:	1b40      	subs	r0, r0, r5
 800469e:	fa03 f000 	lsl.w	r0, r3, r0
 80046a2:	9b04      	ldr	r3, [sp, #16]
 80046a4:	4303      	orrs	r3, r0
 80046a6:	f108 0801 	add.w	r8, r8, #1
 80046aa:	9304      	str	r3, [sp, #16]
 80046ac:	f898 1000 	ldrb.w	r1, [r8]
 80046b0:	482a      	ldr	r0, [pc, #168]	; (800475c <_vfiprintf_r+0x220>)
 80046b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b6:	2206      	movs	r2, #6
 80046b8:	f108 0701 	add.w	r7, r8, #1
 80046bc:	f7fb fda8 	bl	8000210 <memchr>
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d037      	beq.n	8004734 <_vfiprintf_r+0x1f8>
 80046c4:	4b26      	ldr	r3, [pc, #152]	; (8004760 <_vfiprintf_r+0x224>)
 80046c6:	bb1b      	cbnz	r3, 8004710 <_vfiprintf_r+0x1d4>
 80046c8:	9b03      	ldr	r3, [sp, #12]
 80046ca:	3307      	adds	r3, #7
 80046cc:	f023 0307 	bic.w	r3, r3, #7
 80046d0:	3308      	adds	r3, #8
 80046d2:	9303      	str	r3, [sp, #12]
 80046d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d6:	444b      	add	r3, r9
 80046d8:	9309      	str	r3, [sp, #36]	; 0x24
 80046da:	e750      	b.n	800457e <_vfiprintf_r+0x42>
 80046dc:	fb05 3202 	mla	r2, r5, r2, r3
 80046e0:	2001      	movs	r0, #1
 80046e2:	4688      	mov	r8, r1
 80046e4:	e78a      	b.n	80045fc <_vfiprintf_r+0xc0>
 80046e6:	2300      	movs	r3, #0
 80046e8:	f108 0801 	add.w	r8, r8, #1
 80046ec:	9305      	str	r3, [sp, #20]
 80046ee:	4619      	mov	r1, r3
 80046f0:	250a      	movs	r5, #10
 80046f2:	4640      	mov	r0, r8
 80046f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f8:	3a30      	subs	r2, #48	; 0x30
 80046fa:	2a09      	cmp	r2, #9
 80046fc:	d903      	bls.n	8004706 <_vfiprintf_r+0x1ca>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0c3      	beq.n	800468a <_vfiprintf_r+0x14e>
 8004702:	9105      	str	r1, [sp, #20]
 8004704:	e7c1      	b.n	800468a <_vfiprintf_r+0x14e>
 8004706:	fb05 2101 	mla	r1, r5, r1, r2
 800470a:	2301      	movs	r3, #1
 800470c:	4680      	mov	r8, r0
 800470e:	e7f0      	b.n	80046f2 <_vfiprintf_r+0x1b6>
 8004710:	ab03      	add	r3, sp, #12
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	4622      	mov	r2, r4
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_vfiprintf_r+0x228>)
 8004718:	a904      	add	r1, sp, #16
 800471a:	4630      	mov	r0, r6
 800471c:	f3af 8000 	nop.w
 8004720:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004724:	4681      	mov	r9, r0
 8004726:	d1d5      	bne.n	80046d4 <_vfiprintf_r+0x198>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	065b      	lsls	r3, r3, #25
 800472c:	f53f af7e 	bmi.w	800462c <_vfiprintf_r+0xf0>
 8004730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004732:	e77d      	b.n	8004630 <_vfiprintf_r+0xf4>
 8004734:	ab03      	add	r3, sp, #12
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4622      	mov	r2, r4
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <_vfiprintf_r+0x228>)
 800473c:	a904      	add	r1, sp, #16
 800473e:	4630      	mov	r0, r6
 8004740:	f000 f888 	bl	8004854 <_printf_i>
 8004744:	e7ec      	b.n	8004720 <_vfiprintf_r+0x1e4>
 8004746:	bf00      	nop
 8004748:	08005080 	.word	0x08005080
 800474c:	080050ca 	.word	0x080050ca
 8004750:	080050a0 	.word	0x080050a0
 8004754:	08005060 	.word	0x08005060
 8004758:	080050d0 	.word	0x080050d0
 800475c:	080050d4 	.word	0x080050d4
 8004760:	00000000 	.word	0x00000000
 8004764:	08004517 	.word	0x08004517

08004768 <_printf_common>:
 8004768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800476c:	4691      	mov	r9, r2
 800476e:	461f      	mov	r7, r3
 8004770:	688a      	ldr	r2, [r1, #8]
 8004772:	690b      	ldr	r3, [r1, #16]
 8004774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004778:	4293      	cmp	r3, r2
 800477a:	bfb8      	it	lt
 800477c:	4613      	movlt	r3, r2
 800477e:	f8c9 3000 	str.w	r3, [r9]
 8004782:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004786:	4606      	mov	r6, r0
 8004788:	460c      	mov	r4, r1
 800478a:	b112      	cbz	r2, 8004792 <_printf_common+0x2a>
 800478c:	3301      	adds	r3, #1
 800478e:	f8c9 3000 	str.w	r3, [r9]
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	0699      	lsls	r1, r3, #26
 8004796:	bf42      	ittt	mi
 8004798:	f8d9 3000 	ldrmi.w	r3, [r9]
 800479c:	3302      	addmi	r3, #2
 800479e:	f8c9 3000 	strmi.w	r3, [r9]
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	f015 0506 	ands.w	r5, r5, #6
 80047a8:	d107      	bne.n	80047ba <_printf_common+0x52>
 80047aa:	f104 0a19 	add.w	sl, r4, #25
 80047ae:	68e3      	ldr	r3, [r4, #12]
 80047b0:	f8d9 2000 	ldr.w	r2, [r9]
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	42ab      	cmp	r3, r5
 80047b8:	dc28      	bgt.n	800480c <_printf_common+0xa4>
 80047ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	3300      	adds	r3, #0
 80047c2:	bf18      	it	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	0692      	lsls	r2, r2, #26
 80047c8:	d42d      	bmi.n	8004826 <_printf_common+0xbe>
 80047ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047ce:	4639      	mov	r1, r7
 80047d0:	4630      	mov	r0, r6
 80047d2:	47c0      	blx	r8
 80047d4:	3001      	adds	r0, #1
 80047d6:	d020      	beq.n	800481a <_printf_common+0xb2>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	68e5      	ldr	r5, [r4, #12]
 80047dc:	f8d9 2000 	ldr.w	r2, [r9]
 80047e0:	f003 0306 	and.w	r3, r3, #6
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	bf08      	it	eq
 80047e8:	1aad      	subeq	r5, r5, r2
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	6922      	ldr	r2, [r4, #16]
 80047ee:	bf0c      	ite	eq
 80047f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f4:	2500      	movne	r5, #0
 80047f6:	4293      	cmp	r3, r2
 80047f8:	bfc4      	itt	gt
 80047fa:	1a9b      	subgt	r3, r3, r2
 80047fc:	18ed      	addgt	r5, r5, r3
 80047fe:	f04f 0900 	mov.w	r9, #0
 8004802:	341a      	adds	r4, #26
 8004804:	454d      	cmp	r5, r9
 8004806:	d11a      	bne.n	800483e <_printf_common+0xd6>
 8004808:	2000      	movs	r0, #0
 800480a:	e008      	b.n	800481e <_printf_common+0xb6>
 800480c:	2301      	movs	r3, #1
 800480e:	4652      	mov	r2, sl
 8004810:	4639      	mov	r1, r7
 8004812:	4630      	mov	r0, r6
 8004814:	47c0      	blx	r8
 8004816:	3001      	adds	r0, #1
 8004818:	d103      	bne.n	8004822 <_printf_common+0xba>
 800481a:	f04f 30ff 	mov.w	r0, #4294967295
 800481e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004822:	3501      	adds	r5, #1
 8004824:	e7c3      	b.n	80047ae <_printf_common+0x46>
 8004826:	18e1      	adds	r1, r4, r3
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	2030      	movs	r0, #48	; 0x30
 800482c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004830:	4422      	add	r2, r4
 8004832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004836:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800483a:	3302      	adds	r3, #2
 800483c:	e7c5      	b.n	80047ca <_printf_common+0x62>
 800483e:	2301      	movs	r3, #1
 8004840:	4622      	mov	r2, r4
 8004842:	4639      	mov	r1, r7
 8004844:	4630      	mov	r0, r6
 8004846:	47c0      	blx	r8
 8004848:	3001      	adds	r0, #1
 800484a:	d0e6      	beq.n	800481a <_printf_common+0xb2>
 800484c:	f109 0901 	add.w	r9, r9, #1
 8004850:	e7d8      	b.n	8004804 <_printf_common+0x9c>
	...

08004854 <_printf_i>:
 8004854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004858:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800485c:	460c      	mov	r4, r1
 800485e:	7e09      	ldrb	r1, [r1, #24]
 8004860:	b085      	sub	sp, #20
 8004862:	296e      	cmp	r1, #110	; 0x6e
 8004864:	4617      	mov	r7, r2
 8004866:	4606      	mov	r6, r0
 8004868:	4698      	mov	r8, r3
 800486a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800486c:	f000 80b3 	beq.w	80049d6 <_printf_i+0x182>
 8004870:	d822      	bhi.n	80048b8 <_printf_i+0x64>
 8004872:	2963      	cmp	r1, #99	; 0x63
 8004874:	d036      	beq.n	80048e4 <_printf_i+0x90>
 8004876:	d80a      	bhi.n	800488e <_printf_i+0x3a>
 8004878:	2900      	cmp	r1, #0
 800487a:	f000 80b9 	beq.w	80049f0 <_printf_i+0x19c>
 800487e:	2958      	cmp	r1, #88	; 0x58
 8004880:	f000 8083 	beq.w	800498a <_printf_i+0x136>
 8004884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004888:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800488c:	e032      	b.n	80048f4 <_printf_i+0xa0>
 800488e:	2964      	cmp	r1, #100	; 0x64
 8004890:	d001      	beq.n	8004896 <_printf_i+0x42>
 8004892:	2969      	cmp	r1, #105	; 0x69
 8004894:	d1f6      	bne.n	8004884 <_printf_i+0x30>
 8004896:	6820      	ldr	r0, [r4, #0]
 8004898:	6813      	ldr	r3, [r2, #0]
 800489a:	0605      	lsls	r5, r0, #24
 800489c:	f103 0104 	add.w	r1, r3, #4
 80048a0:	d52a      	bpl.n	80048f8 <_printf_i+0xa4>
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6011      	str	r1, [r2, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da03      	bge.n	80048b2 <_printf_i+0x5e>
 80048aa:	222d      	movs	r2, #45	; 0x2d
 80048ac:	425b      	negs	r3, r3
 80048ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048b2:	486f      	ldr	r0, [pc, #444]	; (8004a70 <_printf_i+0x21c>)
 80048b4:	220a      	movs	r2, #10
 80048b6:	e039      	b.n	800492c <_printf_i+0xd8>
 80048b8:	2973      	cmp	r1, #115	; 0x73
 80048ba:	f000 809d 	beq.w	80049f8 <_printf_i+0x1a4>
 80048be:	d808      	bhi.n	80048d2 <_printf_i+0x7e>
 80048c0:	296f      	cmp	r1, #111	; 0x6f
 80048c2:	d020      	beq.n	8004906 <_printf_i+0xb2>
 80048c4:	2970      	cmp	r1, #112	; 0x70
 80048c6:	d1dd      	bne.n	8004884 <_printf_i+0x30>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	f043 0320 	orr.w	r3, r3, #32
 80048ce:	6023      	str	r3, [r4, #0]
 80048d0:	e003      	b.n	80048da <_printf_i+0x86>
 80048d2:	2975      	cmp	r1, #117	; 0x75
 80048d4:	d017      	beq.n	8004906 <_printf_i+0xb2>
 80048d6:	2978      	cmp	r1, #120	; 0x78
 80048d8:	d1d4      	bne.n	8004884 <_printf_i+0x30>
 80048da:	2378      	movs	r3, #120	; 0x78
 80048dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e0:	4864      	ldr	r0, [pc, #400]	; (8004a74 <_printf_i+0x220>)
 80048e2:	e055      	b.n	8004990 <_printf_i+0x13c>
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	1d19      	adds	r1, r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6011      	str	r1, [r2, #0]
 80048ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048f4:	2301      	movs	r3, #1
 80048f6:	e08c      	b.n	8004a12 <_printf_i+0x1be>
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6011      	str	r1, [r2, #0]
 80048fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004900:	bf18      	it	ne
 8004902:	b21b      	sxthne	r3, r3
 8004904:	e7cf      	b.n	80048a6 <_printf_i+0x52>
 8004906:	6813      	ldr	r3, [r2, #0]
 8004908:	6825      	ldr	r5, [r4, #0]
 800490a:	1d18      	adds	r0, r3, #4
 800490c:	6010      	str	r0, [r2, #0]
 800490e:	0628      	lsls	r0, r5, #24
 8004910:	d501      	bpl.n	8004916 <_printf_i+0xc2>
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	e002      	b.n	800491c <_printf_i+0xc8>
 8004916:	0668      	lsls	r0, r5, #25
 8004918:	d5fb      	bpl.n	8004912 <_printf_i+0xbe>
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	4854      	ldr	r0, [pc, #336]	; (8004a70 <_printf_i+0x21c>)
 800491e:	296f      	cmp	r1, #111	; 0x6f
 8004920:	bf14      	ite	ne
 8004922:	220a      	movne	r2, #10
 8004924:	2208      	moveq	r2, #8
 8004926:	2100      	movs	r1, #0
 8004928:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800492c:	6865      	ldr	r5, [r4, #4]
 800492e:	60a5      	str	r5, [r4, #8]
 8004930:	2d00      	cmp	r5, #0
 8004932:	f2c0 8095 	blt.w	8004a60 <_printf_i+0x20c>
 8004936:	6821      	ldr	r1, [r4, #0]
 8004938:	f021 0104 	bic.w	r1, r1, #4
 800493c:	6021      	str	r1, [r4, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d13d      	bne.n	80049be <_printf_i+0x16a>
 8004942:	2d00      	cmp	r5, #0
 8004944:	f040 808e 	bne.w	8004a64 <_printf_i+0x210>
 8004948:	4665      	mov	r5, ip
 800494a:	2a08      	cmp	r2, #8
 800494c:	d10b      	bne.n	8004966 <_printf_i+0x112>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	07db      	lsls	r3, r3, #31
 8004952:	d508      	bpl.n	8004966 <_printf_i+0x112>
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	6862      	ldr	r2, [r4, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	bfde      	ittt	le
 800495c:	2330      	movle	r3, #48	; 0x30
 800495e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004962:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004966:	ebac 0305 	sub.w	r3, ip, r5
 800496a:	6123      	str	r3, [r4, #16]
 800496c:	f8cd 8000 	str.w	r8, [sp]
 8004970:	463b      	mov	r3, r7
 8004972:	aa03      	add	r2, sp, #12
 8004974:	4621      	mov	r1, r4
 8004976:	4630      	mov	r0, r6
 8004978:	f7ff fef6 	bl	8004768 <_printf_common>
 800497c:	3001      	adds	r0, #1
 800497e:	d14d      	bne.n	8004a1c <_printf_i+0x1c8>
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	b005      	add	sp, #20
 8004986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800498a:	4839      	ldr	r0, [pc, #228]	; (8004a70 <_printf_i+0x21c>)
 800498c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004990:	6813      	ldr	r3, [r2, #0]
 8004992:	6821      	ldr	r1, [r4, #0]
 8004994:	1d1d      	adds	r5, r3, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6015      	str	r5, [r2, #0]
 800499a:	060a      	lsls	r2, r1, #24
 800499c:	d50b      	bpl.n	80049b6 <_printf_i+0x162>
 800499e:	07ca      	lsls	r2, r1, #31
 80049a0:	bf44      	itt	mi
 80049a2:	f041 0120 	orrmi.w	r1, r1, #32
 80049a6:	6021      	strmi	r1, [r4, #0]
 80049a8:	b91b      	cbnz	r3, 80049b2 <_printf_i+0x15e>
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	f022 0220 	bic.w	r2, r2, #32
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	2210      	movs	r2, #16
 80049b4:	e7b7      	b.n	8004926 <_printf_i+0xd2>
 80049b6:	064d      	lsls	r5, r1, #25
 80049b8:	bf48      	it	mi
 80049ba:	b29b      	uxthmi	r3, r3
 80049bc:	e7ef      	b.n	800499e <_printf_i+0x14a>
 80049be:	4665      	mov	r5, ip
 80049c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80049c4:	fb02 3311 	mls	r3, r2, r1, r3
 80049c8:	5cc3      	ldrb	r3, [r0, r3]
 80049ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049ce:	460b      	mov	r3, r1
 80049d0:	2900      	cmp	r1, #0
 80049d2:	d1f5      	bne.n	80049c0 <_printf_i+0x16c>
 80049d4:	e7b9      	b.n	800494a <_printf_i+0xf6>
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	6825      	ldr	r5, [r4, #0]
 80049da:	6961      	ldr	r1, [r4, #20]
 80049dc:	1d18      	adds	r0, r3, #4
 80049de:	6010      	str	r0, [r2, #0]
 80049e0:	0628      	lsls	r0, r5, #24
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	d501      	bpl.n	80049ea <_printf_i+0x196>
 80049e6:	6019      	str	r1, [r3, #0]
 80049e8:	e002      	b.n	80049f0 <_printf_i+0x19c>
 80049ea:	066a      	lsls	r2, r5, #25
 80049ec:	d5fb      	bpl.n	80049e6 <_printf_i+0x192>
 80049ee:	8019      	strh	r1, [r3, #0]
 80049f0:	2300      	movs	r3, #0
 80049f2:	6123      	str	r3, [r4, #16]
 80049f4:	4665      	mov	r5, ip
 80049f6:	e7b9      	b.n	800496c <_printf_i+0x118>
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	1d19      	adds	r1, r3, #4
 80049fc:	6011      	str	r1, [r2, #0]
 80049fe:	681d      	ldr	r5, [r3, #0]
 8004a00:	6862      	ldr	r2, [r4, #4]
 8004a02:	2100      	movs	r1, #0
 8004a04:	4628      	mov	r0, r5
 8004a06:	f7fb fc03 	bl	8000210 <memchr>
 8004a0a:	b108      	cbz	r0, 8004a10 <_printf_i+0x1bc>
 8004a0c:	1b40      	subs	r0, r0, r5
 8004a0e:	6060      	str	r0, [r4, #4]
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	6123      	str	r3, [r4, #16]
 8004a14:	2300      	movs	r3, #0
 8004a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a1a:	e7a7      	b.n	800496c <_printf_i+0x118>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	462a      	mov	r2, r5
 8004a20:	4639      	mov	r1, r7
 8004a22:	4630      	mov	r0, r6
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d0aa      	beq.n	8004980 <_printf_i+0x12c>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	079b      	lsls	r3, r3, #30
 8004a2e:	d413      	bmi.n	8004a58 <_printf_i+0x204>
 8004a30:	68e0      	ldr	r0, [r4, #12]
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	4298      	cmp	r0, r3
 8004a36:	bfb8      	it	lt
 8004a38:	4618      	movlt	r0, r3
 8004a3a:	e7a3      	b.n	8004984 <_printf_i+0x130>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	464a      	mov	r2, r9
 8004a40:	4639      	mov	r1, r7
 8004a42:	4630      	mov	r0, r6
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d09a      	beq.n	8004980 <_printf_i+0x12c>
 8004a4a:	3501      	adds	r5, #1
 8004a4c:	68e3      	ldr	r3, [r4, #12]
 8004a4e:	9a03      	ldr	r2, [sp, #12]
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	42ab      	cmp	r3, r5
 8004a54:	dcf2      	bgt.n	8004a3c <_printf_i+0x1e8>
 8004a56:	e7eb      	b.n	8004a30 <_printf_i+0x1dc>
 8004a58:	2500      	movs	r5, #0
 8004a5a:	f104 0919 	add.w	r9, r4, #25
 8004a5e:	e7f5      	b.n	8004a4c <_printf_i+0x1f8>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ac      	bne.n	80049be <_printf_i+0x16a>
 8004a64:	7803      	ldrb	r3, [r0, #0]
 8004a66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a6e:	e76c      	b.n	800494a <_printf_i+0xf6>
 8004a70:	080050db 	.word	0x080050db
 8004a74:	080050ec 	.word	0x080050ec

08004a78 <_sbrk_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4c06      	ldr	r4, [pc, #24]	; (8004a94 <_sbrk_r+0x1c>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	4605      	mov	r5, r0
 8004a80:	4608      	mov	r0, r1
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	f7fe fe2e 	bl	80036e4 <_sbrk>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_sbrk_r+0x1a>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_sbrk_r+0x1a>
 8004a90:	602b      	str	r3, [r5, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20012fd4 	.word	0x20012fd4

08004a98 <__sread>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa0:	f000 f8d4 	bl	8004c4c <_read_r>
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	bfab      	itete	ge
 8004aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8004aac:	181b      	addge	r3, r3, r0
 8004aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ab2:	bfac      	ite	ge
 8004ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ab6:	81a3      	strhlt	r3, [r4, #12]
 8004ab8:	bd10      	pop	{r4, pc}

08004aba <__swrite>:
 8004aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004abe:	461f      	mov	r7, r3
 8004ac0:	898b      	ldrh	r3, [r1, #12]
 8004ac2:	05db      	lsls	r3, r3, #23
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4616      	mov	r6, r2
 8004aca:	d505      	bpl.n	8004ad8 <__swrite+0x1e>
 8004acc:	2302      	movs	r3, #2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad4:	f000 f874 	bl	8004bc0 <_lseek_r>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	4632      	mov	r2, r6
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	4628      	mov	r0, r5
 8004aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aee:	f000 b823 	b.w	8004b38 <_write_r>

08004af2 <__sseek>:
 8004af2:	b510      	push	{r4, lr}
 8004af4:	460c      	mov	r4, r1
 8004af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afa:	f000 f861 	bl	8004bc0 <_lseek_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	bf15      	itete	ne
 8004b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b0e:	81a3      	strheq	r3, [r4, #12]
 8004b10:	bf18      	it	ne
 8004b12:	81a3      	strhne	r3, [r4, #12]
 8004b14:	bd10      	pop	{r4, pc}

08004b16 <__sclose>:
 8004b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1a:	f000 b81f 	b.w	8004b5c <_close_r>

08004b1e <__ascii_wctomb>:
 8004b1e:	b149      	cbz	r1, 8004b34 <__ascii_wctomb+0x16>
 8004b20:	2aff      	cmp	r2, #255	; 0xff
 8004b22:	bf85      	ittet	hi
 8004b24:	238a      	movhi	r3, #138	; 0x8a
 8004b26:	6003      	strhi	r3, [r0, #0]
 8004b28:	700a      	strbls	r2, [r1, #0]
 8004b2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8004b2e:	bf98      	it	ls
 8004b30:	2001      	movls	r0, #1
 8004b32:	4770      	bx	lr
 8004b34:	4608      	mov	r0, r1
 8004b36:	4770      	bx	lr

08004b38 <_write_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4c07      	ldr	r4, [pc, #28]	; (8004b58 <_write_r+0x20>)
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	4608      	mov	r0, r1
 8004b40:	4611      	mov	r1, r2
 8004b42:	2200      	movs	r2, #0
 8004b44:	6022      	str	r2, [r4, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7fe fdbe 	bl	80036c8 <_write>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_write_r+0x1e>
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_write_r+0x1e>
 8004b54:	602b      	str	r3, [r5, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	20012fd4 	.word	0x20012fd4

08004b5c <_close_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4c06      	ldr	r4, [pc, #24]	; (8004b78 <_close_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4605      	mov	r5, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	f7fe fdda 	bl	8003720 <_close>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_close_r+0x1a>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_close_r+0x1a>
 8004b74:	602b      	str	r3, [r5, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	20012fd4 	.word	0x20012fd4

08004b7c <_fstat_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4c07      	ldr	r4, [pc, #28]	; (8004b9c <_fstat_r+0x20>)
 8004b80:	2300      	movs	r3, #0
 8004b82:	4605      	mov	r5, r0
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	f7fe fdcc 	bl	8003726 <_fstat>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	d102      	bne.n	8004b98 <_fstat_r+0x1c>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	b103      	cbz	r3, 8004b98 <_fstat_r+0x1c>
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	bd38      	pop	{r3, r4, r5, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20012fd4 	.word	0x20012fd4

08004ba0 <_isatty_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4c06      	ldr	r4, [pc, #24]	; (8004bbc <_isatty_r+0x1c>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	6023      	str	r3, [r4, #0]
 8004bac:	f7fe fdc0 	bl	8003730 <_isatty>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d102      	bne.n	8004bba <_isatty_r+0x1a>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	b103      	cbz	r3, 8004bba <_isatty_r+0x1a>
 8004bb8:	602b      	str	r3, [r5, #0]
 8004bba:	bd38      	pop	{r3, r4, r5, pc}
 8004bbc:	20012fd4 	.word	0x20012fd4

08004bc0 <_lseek_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4c07      	ldr	r4, [pc, #28]	; (8004be0 <_lseek_r+0x20>)
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	4608      	mov	r0, r1
 8004bc8:	4611      	mov	r1, r2
 8004bca:	2200      	movs	r2, #0
 8004bcc:	6022      	str	r2, [r4, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f7fe fdb0 	bl	8003734 <_lseek>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_lseek_r+0x1e>
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_lseek_r+0x1e>
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20012fd4 	.word	0x20012fd4

08004be4 <memcpy>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	1e43      	subs	r3, r0, #1
 8004be8:	440a      	add	r2, r1
 8004bea:	4291      	cmp	r1, r2
 8004bec:	d100      	bne.n	8004bf0 <memcpy+0xc>
 8004bee:	bd10      	pop	{r4, pc}
 8004bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bf8:	e7f7      	b.n	8004bea <memcpy+0x6>

08004bfa <__malloc_lock>:
 8004bfa:	4770      	bx	lr

08004bfc <__malloc_unlock>:
 8004bfc:	4770      	bx	lr

08004bfe <_realloc_r>:
 8004bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c00:	4607      	mov	r7, r0
 8004c02:	4614      	mov	r4, r2
 8004c04:	460e      	mov	r6, r1
 8004c06:	b921      	cbnz	r1, 8004c12 <_realloc_r+0x14>
 8004c08:	4611      	mov	r1, r2
 8004c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c0e:	f7ff babf 	b.w	8004190 <_malloc_r>
 8004c12:	b922      	cbnz	r2, 8004c1e <_realloc_r+0x20>
 8004c14:	f7ff fa6e 	bl	80040f4 <_free_r>
 8004c18:	4625      	mov	r5, r4
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1e:	f000 f827 	bl	8004c70 <_malloc_usable_size_r>
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	d20f      	bcs.n	8004c46 <_realloc_r+0x48>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f7ff fab1 	bl	8004190 <_malloc_r>
 8004c2e:	4605      	mov	r5, r0
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d0f2      	beq.n	8004c1a <_realloc_r+0x1c>
 8004c34:	4631      	mov	r1, r6
 8004c36:	4622      	mov	r2, r4
 8004c38:	f7ff ffd4 	bl	8004be4 <memcpy>
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f7ff fa58 	bl	80040f4 <_free_r>
 8004c44:	e7e9      	b.n	8004c1a <_realloc_r+0x1c>
 8004c46:	4635      	mov	r5, r6
 8004c48:	e7e7      	b.n	8004c1a <_realloc_r+0x1c>
	...

08004c4c <_read_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4c07      	ldr	r4, [pc, #28]	; (8004c6c <_read_r+0x20>)
 8004c50:	4605      	mov	r5, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fe fd26 	bl	80036ac <_read>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_read_r+0x1e>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_read_r+0x1e>
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20012fd4 	.word	0x20012fd4

08004c70 <_malloc_usable_size_r>:
 8004c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c74:	1f18      	subs	r0, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfbc      	itt	lt
 8004c7a:	580b      	ldrlt	r3, [r1, r0]
 8004c7c:	18c0      	addlt	r0, r0, r3
 8004c7e:	4770      	bx	lr

08004c80 <_init>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr

08004c8c <_fini>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr
